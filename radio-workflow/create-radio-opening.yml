name: Create Radio Opening

on:
  workflow_dispatch:
    inputs:
      opening_theme:
        description: 'オープニングの雰囲気（例：エネルギッシュ、爽やか、ジャズ風）'
        required: true
        type: string

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      branch-name: ${{ steps.create-branch.outputs.branch-name }}
      folder-name: ${{ steps.create-branch.outputs.folder-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create branch for radio opening generation
        id: create-branch
        run: |
          BRANCH_NAME="radio-opening/$(date +%Y%m%d)-${{ github.run_id }}"
          FOLDER_NAME="radio-opening-$(date +%Y%m%d)-${{ github.run_id }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push origin $BRANCH_NAME
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "folder-name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Created branch: $BRANCH_NAME"
          echo "Folder name: $FOLDER_NAME"

  opening-planning:
    runs-on: ubuntu-latest
    needs: [setup-branch]
    permissions:
      contents: write
    outputs:
      planning-completed: ${{ steps.planning.outputs.completed }}
      opening-script: ${{ steps.planning.outputs.opening-script }}
      voice-style: ${{ steps.planning.outputs.voice-style }}
      music-prompt: ${{ steps.planning.outputs.music-prompt }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: オープニング台本作成エージェント
        id: planning
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎙️ Radio Opening Planning Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          SHOW_TITLE="神威日報ふりかえりラジオ"
          OPENING_THEME="${{ inputs.opening_theme }}"
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          PLANNING_DIR="$FOLDER_NAME/planning"
          
          echo "Show title: $SHOW_TITLE"
          echo "Opening theme: $OPENING_THEME"
          echo "Planning folder: $PLANNING_DIR"
          
          # 計画フォルダを事前に作成
          if [ ! -d "$PLANNING_DIR" ]; then
            mkdir -p "$PLANNING_DIR"
            echo "📁 Created planning folder: $PLANNING_DIR"
          fi
          
          # プロンプトの構築
          PROMPT="あなたはラジオ番組制作の専門家です。番組オープニング用の台本を作成し、音楽と合成するための戦略を立ててください。

          **番組タイトル**: $SHOW_TITLE
          **オープニングの雰囲気**: $OPENING_THEME

          **タスク**:
          1. 番組オープニング用の台本を作成（15-20秒程度、約50-80文字）
          2. カムイ日報の話者の口調・特徴を反映した挨拶台本に調整
          3. オープニング音楽の雰囲気に合わせた話し方・トーンを設定
          4. aivis-api用の音声生成設定を計画
          5. オープニング音楽生成用のプロンプトを作成
          6. 音声と音楽の合成戦略を策定
          7. オープニング台本を「$PLANNING_DIR/opening-script.txt」に保存
          8. 音声スタイル設定を「$PLANNING_DIR/voice-style.json」に保存
          9. 音楽生成プロンプトを「$PLANNING_DIR/music-prompt.txt」に保存
          10. 制作戦略書を「$PLANNING_DIR/opening-strategy.md」に保存

          **オープニング台本の例**:
          「皆さん、こんにちは！$SHOW_TITLEの時間がやってきました。今日も最新のテック情報をお届けしていきますよ！」

          **カムイ日報話者の特徴**（voice_analysis.txtから）:
          - 「えっと」「ですね」「ちょっと」を多用
          - 「〜みたいな感じ」「〜っていう感じ」で説明
          - 技術的な内容を親しみやすく解説
          - 「すごい」「やばい」などの感嘆詞を使用
          - カジュアルだが丁寧な語調

          **音声生成設定例**:
          - model_uuid: a59cb814-0083-4369-8542-f51a29e72af7
          - speaking_rate: 1.1-1.3（エネルギッシュに）
          - emotional_intensity: 高め（オープニングらしく明るく）
          - output_format: wav（高音質合成用）

          ファイルを作成し、戦略を計画してください。"

          # Claude Codeを実行
          npx claude-code --prompt "$PROMPT"
          
          # 出力の確認
          if [ -f "$PLANNING_DIR/opening-script.txt" ]; then
            echo "✅ Opening script created"
            OPENING_SCRIPT=$(cat "$PLANNING_DIR/opening-script.txt")
            echo "opening-script<<EOF" >> $GITHUB_OUTPUT
            echo "$OPENING_SCRIPT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Opening script not found"
            exit 1
          fi

          if [ -f "$PLANNING_DIR/voice-style.json" ]; then
            echo "✅ Voice style settings created"
            VOICE_STYLE=$(cat "$PLANNING_DIR/voice-style.json")
            echo "voice-style<<EOF" >> $GITHUB_OUTPUT
            echo "$VOICE_STYLE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Voice style not found"
            exit 1
          fi

          if [ -f "$PLANNING_DIR/music-prompt.txt" ]; then
            echo "✅ Music prompt created"
            MUSIC_PROMPT=$(cat "$PLANNING_DIR/music-prompt.txt")
            echo "music-prompt<<EOF" >> $GITHUB_OUTPUT
            echo "$MUSIC_PROMPT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Music prompt not found"
            exit 1
          fi

          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  generate-opening-audio-and-music:
    runs-on: ubuntu-latest
    needs: [setup-branch, opening-planning]
    permissions:
      contents: write
    outputs:
      voice-url: ${{ steps.voice-generation.outputs.voice-url }}
      music-url: ${{ steps.music-generation.outputs.music-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      # オープニング音声生成（aivis-api使用）
      - name: オープニング音声生成エージェント
        id: voice-generation
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AIVIS_API_KEY: ${{ secrets.AIVIS_API_KEY }}
        run: |
          echo "::group::🎤 Opening Voice Generation Agent Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          AUDIO_DIR="$FOLDER_NAME/audio"
          
          # 音声フォルダ作成
          mkdir -p "$AUDIO_DIR"
          
          OPENING_SCRIPT="${{ needs.opening-planning.outputs.opening-script }}"
          VOICE_STYLE="${{ needs.opening-planning.outputs.voice-style }}"
          
          PROMPT="aivis-apiを使用してオープニング音声を生成してください。

          **台本**: $OPENING_SCRIPT
          **音声設定**: $VOICE_STYLE
          **API Key**: 環境変数AIVIS_API_KEYから取得

          **タスク**:
          1. aivis-api（https://api.aivis-project.com/v1/tts/synthesize）を使って音声生成
          2. 高音質WAV形式で出力
          3. 生成した音声ファイルを「$AUDIO_DIR/opening-voice.wav」に保存
          4. 音声ファイルのURLを出力

          aivis-apiの使用方法:
          - エンドポイント: POST https://api.aivis-project.com/v1/tts/synthesize
          - Authorization: Bearer \$AIVIS_API_KEY
          - model_uuid: a59cb814-0083-4369-8542-f51a29e72af7
          - output_format: wav
          - 台本テキストとスタイル設定を使用

          音声を生成し、ファイルを保存してください。"

          npx claude-code --prompt "$PROMPT"
          
          # 音声ファイルの確認
          if [ -f "$AUDIO_DIR/opening-voice.wav" ]; then
            echo "✅ Opening voice generated successfully"
            # 相対パスをGitHub出力に設定
            echo "voice-url=$AUDIO_DIR/opening-voice.wav" >> $GITHUB_OUTPUT
          else
            echo "❌ Opening voice generation failed"
            exit 1
          fi
          
          echo "::endgroup::"

      # オープニング音楽生成（並列実行）
      - name: オープニング音楽生成エージェント
        id: music-generation
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎵 Opening Music Generation Agent Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          MUSIC_DIR="$FOLDER_NAME/music"
          
          # 音楽フォルダ作成
          mkdir -p "$MUSIC_DIR"
          
          MUSIC_PROMPT="${{ needs.opening-planning.outputs.music-prompt }}"
          
          PROMPT="kamuicode MCPを使用してオープニング音楽を生成してください。

          **音楽プロンプト**: $MUSIC_PROMPT
          **出力長さ**: 約20-30秒（オープニング音声の長さ＋余裕）

          **タスク**:
          1. Google Lyriaを使ってオープニング音楽を生成
          2. 音声に適したボリューム・テンポで生成
          3. 生成した音楽ファイルを「$MUSIC_DIR/opening-music.wav」に保存
          4. 音楽ファイルのURLを出力

          kamuicode MCPの音楽生成機能を使用して、ラジオ番組のオープニングに適した音楽を生成してください。"

          npx claude-code --prompt "$PROMPT"
          
          # 音楽ファイルの確認
          if [ -f "$MUSIC_DIR/opening-music.wav" ]; then
            echo "✅ Opening music generated successfully"
            echo "music-url=$MUSIC_DIR/opening-music.wav" >> $GITHUB_OUTPUT
          else
            echo "❌ Opening music generation failed"
            exit 1
          fi
          
          echo "::endgroup::"

  compose-opening-audio:
    runs-on: ubuntu-latest
    needs: [setup-branch, opening-planning, generate-opening-audio-and-music]
    permissions:
      contents: write
    outputs:
      final-opening-url: ${{ steps.compose.outputs.final-opening-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Install FFmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg
      
      - name: オープニング音声合成エージェント
        id: compose
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎚️ Opening Audio Composition Agent Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          FINAL_DIR="$FOLDER_NAME/final"
          
          # 最終出力フォルダ作成
          mkdir -p "$FINAL_DIR"
          
          VOICE_FILE="${{ needs.generate-opening-audio-and-music.outputs.voice-url }}"
          MUSIC_FILE="${{ needs.generate-opening-audio-and-music.outputs.music-url }}"
          
          PROMPT="FFmpegを使用してオープニング音声と音楽を合成し、最終的なオープニング音声を作成してください。

          **音声ファイル**: $VOICE_FILE
          **音楽ファイル**: $MUSIC_FILE
          **出力先**: $FINAL_DIR/final-opening-audio.wav

          **合成要件**:
          1. 背景音楽のボリュームを音声の40-50%に調整（オープニングなので音楽を少し目立たせる）
          2. 音声をメインに、音楽を背景として配置
          3. フェードイン・フェードアウトを適用
          4. 音声の長さに合わせて音楽をループまたはトリミング
          5. 最終的な音質は高品質を維持

          **FFmpegコマンド例**:
          - 音楽ボリューム調整: -filter:a \"volume=0.4\"
          - 音声と音楽の合成: -filter_complex \"[1:a]volume=0.4[bg];[0:a][bg]amix=inputs=2[out]\"
          - フェード効果: afade=in:st=0:d=1,afade=out:st=(duration-1):d=1

          音声と音楽を合成し、高品質なオープニング音声を完成させてください。"

          npx claude-code --prompt "$PROMPT"
          
          # 最終ファイルの確認
          if [ -f "$FINAL_DIR/final-opening-audio.wav" ]; then
            echo "✅ Final opening audio created successfully"
            echo "final-opening-url=$FINAL_DIR/final-opening-audio.wav" >> $GITHUB_OUTPUT
            
            # ファイル情報を表示
            echo "📊 File information:"
            ls -lh "$FINAL_DIR/final-opening-audio.wav"
            
            # 音声時間を表示
            DURATION=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$FINAL_DIR/final-opening-audio.wav" 2>/dev/null || echo "Unknown")
            echo "⏱️ Duration: ${DURATION}s"
          else
            echo "❌ Final opening audio composition failed"
            exit 1
          fi
          
          echo "::endgroup::"

      - name: Commit and push results
        run: |
          git add .
          git commit -m "Add generated radio opening: 神威日報ふりかえりラジオ" || echo "No changes to commit"
          git push origin ${{ needs.setup-branch.outputs.branch-name }}

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          gh pr create \
            --title "Add new AI-generated radio opening: 神威日報ふりかえりラジオ" \
            --body "## 生成されたラジオオープニング

          **番組タイトル**: 神威日報ふりかえりラジオ
          **オープニングの雰囲気**: ${{ inputs.opening_theme }}

          ### 📁 出力ファイル
          \`\`\`
          ${{ needs.setup-branch.outputs.folder-name }}/
          ├── planning/
          │   ├── opening-script.txt      # 生成されたオープニング台本
          │   ├── voice-style.json        # 音声スタイル設定
          │   ├── music-prompt.txt        # 音楽生成プロンプト
          │   └── opening-strategy.md     # 制作戦略
          ├── audio/
          │   └── opening-voice.wav       # 生成されたオープニング音声
          ├── music/
          │   └── opening-music.wav       # 生成されたオープニング音楽
          └── final/
              └── final-opening-audio.wav # 最終合成オープニング音声
          \`\`\`

          🤖 Generated with [Claude Code](https://claude.ai/code) & [kamuicode MCP](https://www.kamui.ai/ja)

          Co-Authored-By: Claude <noreply@anthropic.com>" \
            --head ${{ needs.setup-branch.outputs.branch-name }} \
            --base main