name: Create Radio Audio with Music

on:
  workflow_dispatch:
    inputs:
      script_content:
        description: 'ラジオの原稿（テキスト形式）'
        required: true
        type: string
      music_mood:
        description: '音楽の雰囲気（例：リラックス、エネルギッシュ、ジャズ風）'
        required: true
        type: string

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      branch-name: ${{ steps.create-branch.outputs.branch-name }}
      folder-name: ${{ steps.create-branch.outputs.folder-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create branch for radio audio generation
        id: create-branch
        run: |
          BRANCH_NAME="radio-audio/$(date +%Y%m%d)-${{ github.run_id }}"
          FOLDER_NAME="radio-audio-$(date +%Y%m%d)-${{ github.run_id }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push origin $BRANCH_NAME
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "folder-name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Created branch: $BRANCH_NAME"
          echo "Folder name: $FOLDER_NAME"

  script-planning:
    runs-on: ubuntu-latest
    needs: [setup-branch]
    permissions:
      contents: write
    outputs:
      planning-completed: ${{ steps.planning.outputs.completed }}
      # Version A outputs
      radio-script-a: ${{ steps.planning.outputs.radio-script-a }}
      voice-style-a: ${{ steps.planning.outputs.voice-style-a }}
      music-prompt-a: ${{ steps.planning.outputs.music-prompt-a }}
      # Version B outputs
      radio-script-b: ${{ steps.planning.outputs.radio-script-b }}
      voice-style-b: ${{ steps.planning.outputs.voice-style-b }}
      music-prompt-b: ${{ steps.planning.outputs.music-prompt-b }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: ラジオ台本作成エージェント
        id: planning
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎙️ Radio Script Planning Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          SCRIPT_CONTENT="${{ inputs.script_content }}"
          MUSIC_MOOD="${{ inputs.music_mood }}"
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          PLANNING_DIR="$FOLDER_NAME/planning"
          
          echo "Script content: $SCRIPT_CONTENT"
          echo "Music mood: $MUSIC_MOOD"
          echo "Planning folder: $PLANNING_DIR"
          
          # 計画フォルダを事前に作成（A/B版両方）
          PLANNING_DIR_A="$PLANNING_DIR/version-a"
          PLANNING_DIR_B="$PLANNING_DIR/version-b"
          
          if [ ! -d "$PLANNING_DIR_A" ]; then
            mkdir -p "$PLANNING_DIR_A"
            echo "📁 Created planning folder A: $PLANNING_DIR_A"
          fi
          
          if [ ! -d "$PLANNING_DIR_B" ]; then
            mkdir -p "$PLANNING_DIR_B"
            echo "📁 Created planning folder B: $PLANNING_DIR_B"
          fi
          
          # Version A用プロンプトの構築
          PROMPT_A="あなたはラジオ番組制作の専門家です。原稿から1分程度のラジオ台本を作成し、音楽と合成するための戦略を立ててください。

          **原稿内容**: $SCRIPT_CONTENT
          **音楽の雰囲気**: $MUSIC_MOOD
          **バージョン**: A（カジュアル・親しみやすいアプローチ）

          **タスク**:
          1. 原稿を分析し、1分程度（約150-200文字）のラジオ台本にまとめる
          2. カムイ日報の話者の口調・特徴を反映した台本に調整（より親しみやすく、口癖を多用）
          3. 音楽の雰囲気に合わせた話し方・トーンを設定（カジュアル寄り）
          4. aivis-api用の音声生成設定を計画（話速1.0、感情強度標準）
          5. 音楽生成用のプロンプトを作成（リラックス・親しみやすい雰囲気）
          6. 音声と音楽の合成戦略を策定
          7. ラジオ台本を「$PLANNING_DIR_A/radio-script.txt」に保存
          8. 音声スタイル設定を「$PLANNING_DIR_A/voice-style.json」に保存
          9. 音楽生成プロンプトを「$PLANNING_DIR_A/music-prompt.txt」に保存
          10. 制作戦略書を「$PLANNING_DIR_A/radio-strategy.md」に保存

          **カムイ日報話者の特徴**（voice_analysis.txtから）:
          - 「えっと」「ですね」「ちょっと」を多用
          - 「〜みたいな感じ」「〜っていう感じ」で説明
          - 技術的な内容を親しみやすく解説
          - 「すごい」「やばい」などの感嘆詞を使用
          - カジュアルだが丁寧な語調

          **音声生成設定例**:
          - model_uuid: a59cb814-0083-4369-8542-f51a29e72af7
          - speaking_rate: 1.0（親しみやすいペース）
          - emotional_intensity: 0.5（標準的な感情表現）
          - output_format: wav（高音質合成用）

          ファイルを作成し、戦略を計画してください。"

          # Version B用プロンプトの構築
          PROMPT_B="あなたはラジオ番組制作の専門家です。原稿から1分程度のラジオ台本を作成し、音楽と合成するための戦略を立ててください。

          **原稿内容**: $SCRIPT_CONTENT
          **音楽の雰囲気**: $MUSIC_MOOD
          **バージョン**: B（プロフェッショナル・説明重視アプローチ）

          **タスク**:
          1. 原稿を分析し、1分程度（約150-200文字）のラジオ台本にまとめる
          2. カムイ日報の話者の口調・特徴を反映した台本に調整（より説明的、技術的な表現重視）
          3. 音楽の雰囲気に合わせた話し方・トーンを設定（プロフェッショナル寄り）
          4. aivis-api用の音声生成設定を計画（話速1.2、感情強度控えめ）
          5. 音楽生成用のプロンプトを作成（集中・プロフェッショナルな雰囲気）
          6. 音声と音楽の合成戦略を策定
          7. ラジオ台本を「$PLANNING_DIR_B/radio-script.txt」に保存
          8. 音声スタイル設定を「$PLANNING_DIR_B/voice-style.json」に保存
          9. 音楽生成プロンプトを「$PLANNING_DIR_B/music-prompt.txt」に保存
          10. 制作戦略書を「$PLANNING_DIR_B/radio-strategy.md」に保存

          **カムイ日報話者の特徴**（voice_analysis.txtから）:
          - 技術的な内容の詳細な説明を重視
          - 専門用語の後に分かりやすい説明を追加
          - 実装の優先順位を明確に説明
          - 比較表現多用（「〜より〜の方が」）
          - 効率性・正確性を重視した表現

          **音声生成設定例**:
          - model_uuid: a59cb814-0083-4369-8542-f51a29e72af7
          - speaking_rate: 1.2（少し速めのプロフェッショナルなペース）
          - emotional_intensity: 0.3（控えめな感情表現）
          - output_format: wav（高音質合成用）

          ファイルを作成し、戦略を計画してください。"

          # Version A Claude Code実行
          echo "🎙️ Generating Version A (Casual/Friendly)"
          npx claude-code --prompt "$PROMPT_A"
          
          # Version B Claude Code実行
          echo "🎙️ Generating Version B (Professional/Technical)"
          npx claude-code --prompt "$PROMPT_B"
          
          # Version A出力の確認
          echo "🔍 Checking Version A outputs..."
          if [ -f "$PLANNING_DIR_A/radio-script.txt" ]; then
            echo "✅ Radio script A created"
            RADIO_SCRIPT_A=$(cat "$PLANNING_DIR_A/radio-script.txt")
            echo "radio-script-a<<EOF" >> $GITHUB_OUTPUT
            echo "$RADIO_SCRIPT_A" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Radio script A not found"
            exit 1
          fi

          if [ -f "$PLANNING_DIR_A/voice-style.json" ]; then
            echo "✅ Voice style A settings created"
            VOICE_STYLE_A=$(cat "$PLANNING_DIR_A/voice-style.json")
            echo "voice-style-a<<EOF" >> $GITHUB_OUTPUT
            echo "$VOICE_STYLE_A" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Voice style A not found"
            exit 1
          fi

          if [ -f "$PLANNING_DIR_A/music-prompt.txt" ]; then
            echo "✅ Music prompt A created"
            MUSIC_PROMPT_A=$(cat "$PLANNING_DIR_A/music-prompt.txt")
            echo "music-prompt-a<<EOF" >> $GITHUB_OUTPUT
            echo "$MUSIC_PROMPT_A" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Music prompt A not found"
            exit 1
          fi

          # Version B出力の確認
          echo "🔍 Checking Version B outputs..."
          if [ -f "$PLANNING_DIR_B/radio-script.txt" ]; then
            echo "✅ Radio script B created"
            RADIO_SCRIPT_B=$(cat "$PLANNING_DIR_B/radio-script.txt")
            echo "radio-script-b<<EOF" >> $GITHUB_OUTPUT
            echo "$RADIO_SCRIPT_B" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Radio script B not found"
            exit 1
          fi

          if [ -f "$PLANNING_DIR_B/voice-style.json" ]; then
            echo "✅ Voice style B settings created"
            VOICE_STYLE_B=$(cat "$PLANNING_DIR_B/voice-style.json")
            echo "voice-style-b<<EOF" >> $GITHUB_OUTPUT
            echo "$VOICE_STYLE_B" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Voice style B not found"
            exit 1
          fi

          if [ -f "$PLANNING_DIR_B/music-prompt.txt" ]; then
            echo "✅ Music prompt B created"
            MUSIC_PROMPT_B=$(cat "$PLANNING_DIR_B/music-prompt.txt")
            echo "music-prompt-b<<EOF" >> $GITHUB_OUTPUT
            echo "$MUSIC_PROMPT_B" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Music prompt B not found"
            exit 1
          fi

          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  generate-audio-and-music:
    runs-on: ubuntu-latest
    needs: [setup-branch, script-planning]
    permissions:
      contents: write
    outputs:
      # Version A outputs
      voice-url-a: ${{ steps.voice-generation-a.outputs.voice-url }}
      music-url-a: ${{ steps.music-generation-a.outputs.music-url }}
      # Version B outputs
      voice-url-b: ${{ steps.voice-generation-b.outputs.voice-url }}
      music-url-b: ${{ steps.music-generation-b.outputs.music-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      # 音声生成A（aivis-api使用）
      - name: 音声生成エージェントA
        id: voice-generation-a
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AIVIS_API_KEY: ${{ secrets.AIVIS_API_KEY }}
        run: |
          echo "::group::🎤 Voice Generation Agent A Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          AUDIO_DIR_A="$FOLDER_NAME/audio/version-a"
          
          # 音声フォルダ作成
          mkdir -p "$AUDIO_DIR_A"
          
          RADIO_SCRIPT_A="${{ needs.script-planning.outputs.radio-script-a }}"
          VOICE_STYLE_A="${{ needs.script-planning.outputs.voice-style-a }}"
          
          PROMPT="aivis-apiを使用してラジオ音声（バージョンA：カジュアル）を生成してください。

          **台本**: $RADIO_SCRIPT_A
          **音声設定**: $VOICE_STYLE_A
          **API Key**: 環境変数AIVIS_API_KEYから取得
          **バージョン**: A（カジュアル・親しみやすい）

          **タスク**:
          1. aivis-api（https://api.aivis-project.com/v1/tts/synthesize）を使って音声生成
          2. 高音質WAV形式で出力
          3. 生成した音声ファイルを「$AUDIO_DIR_A/radio-voice.wav」に保存
          4. 音声ファイルのURLを出力

          aivis-apiの使用方法:
          - エンドポイント: POST https://api.aivis-project.com/v1/tts/synthesize
          - Authorization: Bearer \$AIVIS_API_KEY
          - model_uuid: a59cb814-0083-4369-8542-f51a29e72af7
          - output_format: wav
          - 台本テキストとスタイル設定を使用

          音声を生成し、ファイルを保存してください。"

          npx claude-code --prompt "$PROMPT"
          
          # 音声ファイルの確認
          if [ -f "$AUDIO_DIR_A/radio-voice.wav" ]; then
            echo "✅ Voice A generated successfully"
            echo "voice-url=$AUDIO_DIR_A/radio-voice.wav" >> $GITHUB_OUTPUT
          else
            echo "❌ Voice A generation failed"
            exit 1
          fi
          
          echo "::endgroup::"

      # 音声生成B（aivis-api使用）
      - name: 音声生成エージェントB
        id: voice-generation-b
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AIVIS_API_KEY: ${{ secrets.AIVIS_API_KEY }}
        run: |
          echo "::group::🎤 Voice Generation Agent B Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          AUDIO_DIR_B="$FOLDER_NAME/audio/version-b"
          
          # 音声フォルダ作成
          mkdir -p "$AUDIO_DIR_B"
          
          RADIO_SCRIPT_B="${{ needs.script-planning.outputs.radio-script-b }}"
          VOICE_STYLE_B="${{ needs.script-planning.outputs.voice-style-b }}"
          
          PROMPT="aivis-apiを使用してラジオ音声（バージョンB：プロフェッショナル）を生成してください。

          **台本**: $RADIO_SCRIPT_B
          **音声設定**: $VOICE_STYLE_B
          **API Key**: 環境変数AIVIS_API_KEYから取得
          **バージョン**: B（プロフェッショナル・技術的）

          **タスク**:
          1. aivis-api（https://api.aivis-project.com/v1/tts/synthesize）を使って音声生成
          2. 高音質WAV形式で出力
          3. 生成した音声ファイルを「$AUDIO_DIR_B/radio-voice.wav」に保存
          4. 音声ファイルのURLを出力

          aivis-apiの使用方法:
          - エンドポイント: POST https://api.aivis-project.com/v1/tts/synthesize
          - Authorization: Bearer \$AIVIS_API_KEY
          - model_uuid: a59cb814-0083-4369-8542-f51a29e72af7
          - output_format: wav
          - 台本テキストとスタイル設定を使用

          音声を生成し、ファイルを保存してください。"

          npx claude-code --prompt "$PROMPT"
          
          # 音声ファイルの確認
          if [ -f "$AUDIO_DIR_B/radio-voice.wav" ]; then
            echo "✅ Voice B generated successfully"
            echo "voice-url=$AUDIO_DIR_B/radio-voice.wav" >> $GITHUB_OUTPUT
          else
            echo "❌ Voice B generation failed"
            exit 1
          fi
          
          echo "::endgroup::"

      # 音楽生成A（並列実行）
      - name: 音楽生成エージェントA
        id: music-generation-a
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎵 Music Generation Agent A Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          MUSIC_DIR_A="$FOLDER_NAME/music/version-a"
          
          # 音楽フォルダ作成
          mkdir -p "$MUSIC_DIR_A"
          
          MUSIC_PROMPT_A="${{ needs.script-planning.outputs.music-prompt-a }}"
          
          PROMPT="kamuicode MCPを使用して背景音楽（バージョンA：カジュアル）を生成してください。

          **音楽プロンプト**: $MUSIC_PROMPT_A
          **出力長さ**: 約60-90秒（音声の1分間＋余裕）
          **バージョン**: A（カジュアル・親しみやすい雰囲気）

          **タスク**:
          1. Google Lyriaを使って背景音楽を生成
          2. 音声に適したボリューム・テンポで生成（リラックス・親しみやすい）
          3. 生成した音楽ファイルを「$MUSIC_DIR_A/background-music.wav」に保存
          4. 音楽ファイルのURLを出力

          kamuicode MCPの音楽生成機能を使用して、カジュアルなラジオ番組に適した背景音楽を生成してください。"

          npx claude-code --prompt "$PROMPT"
          
          # 音楽ファイルの確認
          if [ -f "$MUSIC_DIR_A/background-music.wav" ]; then
            echo "✅ Music A generated successfully"
            echo "music-url=$MUSIC_DIR_A/background-music.wav" >> $GITHUB_OUTPUT
          else
            echo "❌ Music A generation failed"
            exit 1
          fi
          
          echo "::endgroup::"

      # 音楽生成B（並列実行）
      - name: 音楽生成エージェントB
        id: music-generation-b
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎵 Music Generation Agent B Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          MUSIC_DIR_B="$FOLDER_NAME/music/version-b"
          
          # 音楽フォルダ作成
          mkdir -p "$MUSIC_DIR_B"
          
          MUSIC_PROMPT_B="${{ needs.script-planning.outputs.music-prompt-b }}"
          
          PROMPT="kamuicode MCPを使用して背景音楽（バージョンB：プロフェッショナル）を生成してください。

          **音楽プロンプト**: $MUSIC_PROMPT_B
          **出力長さ**: 約60-90秒（音声の1分間＋余裕）
          **バージョン**: B（プロフェッショナル・技術的な雰囲気）

          **タスク**:
          1. Google Lyriaを使って背景音楽を生成
          2. 音声に適したボリューム・テンポで生成（集中・プロフェッショナル）
          3. 生成した音楽ファイルを「$MUSIC_DIR_B/background-music.wav」に保存
          4. 音楽ファイルのURLを出力

          kamuicode MCPの音楽生成機能を使用して、プロフェッショナルなラジオ番組に適した背景音楽を生成してください。"

          npx claude-code --prompt "$PROMPT"
          
          # 音楽ファイルの確認
          if [ -f "$MUSIC_DIR_B/background-music.wav" ]; then
            echo "✅ Music B generated successfully"
            echo "music-url=$MUSIC_DIR_B/background-music.wav" >> $GITHUB_OUTPUT
          else
            echo "❌ Music B generation failed"
            exit 1
          fi
          
          echo "::endgroup::"

  compose-final-audio-a:
    runs-on: ubuntu-latest
    needs: [setup-branch, script-planning, generate-audio-and-music]
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Install FFmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg
      
      - name: 音声合成エージェントA
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎚️ Audio Composition Agent A Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          FINAL_DIR_A="$FOLDER_NAME/final/version-a"
          
          # 最終出力フォルダ作成
          mkdir -p "$FINAL_DIR_A"
          
          VOICE_FILE_A="${{ needs.generate-audio-and-music.outputs.voice-url-a }}"
          MUSIC_FILE_A="${{ needs.generate-audio-and-music.outputs.music-url-a }}"
          
          PROMPT="FFmpegを使用して音声と音楽を合成し、最終的なラジオ音声（バージョンA：カジュアル）を作成してください。

          **音声ファイル**: $VOICE_FILE_A
          **音楽ファイル**: $MUSIC_FILE_A
          **出力先**: $FINAL_DIR_A/final-radio-audio.wav
          **バージョン**: A（カジュアル・親しみやすい）

          **合成要件**:
          1. 背景音楽のボリュームを音声の60%に調整（カジュアルな雰囲気を重視）
          2. 音声をメインに、音楽を背景として配置
          3. 柔らかいフェードイン・フェードアウトを適用
          4. 音声の長さに合わせて音楽をループまたはトリミング
          5. 最終的な音質は高品質を維持

          **FFmpegコマンド例**:
          - 音楽ボリューム調整: -filter:a \"volume=0.6\"
          - 音声と音楽の合成: -filter_complex \"[1:a]volume=0.6[bg];[0:a][bg]amix=inputs=2[out]\"
          - フェード効果: afade=in:st=0:d=2,afade=out:st=(duration-2):d=2

          音声と音楽を合成し、カジュアルで親しみやすい高品質なラジオ音声を完成させてください。"

          npx claude-code --prompt "$PROMPT"
          
          # 最終ファイルの確認
          if [ -f "$FINAL_DIR_A/final-radio-audio.wav" ]; then
            echo "✅ Final radio audio A created successfully"
            
            # ファイル情報を表示
            echo "📊 File information:"
            ls -lh "$FINAL_DIR_A/final-radio-audio.wav"
            
            # 音声時間を表示
            DURATION=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$FINAL_DIR_A/final-radio-audio.wav" 2>/dev/null || echo "Unknown")
            echo "⏱️ Duration: ${DURATION}s"
          else
            echo "❌ Final audio A composition failed"
            exit 1
          fi
          
          echo "::endgroup::"

  compose-final-audio-b:
    runs-on: ubuntu-latest
    needs: [setup-branch, script-planning, generate-audio-and-music]
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Install FFmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg
      
      - name: 音声合成エージェントB
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎚️ Audio Composition Agent B Execution"
          
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          FINAL_DIR_B="$FOLDER_NAME/final/version-b"
          
          # 最終出力フォルダ作成
          mkdir -p "$FINAL_DIR_B"
          
          VOICE_FILE_B="${{ needs.generate-audio-and-music.outputs.voice-url-b }}"
          MUSIC_FILE_B="${{ needs.generate-audio-and-music.outputs.music-url-b }}"
          
          PROMPT="FFmpegを使用して音声と音楽を合成し、最終的なラジオ音声（バージョンB：プロフェッショナル）を作成してください。

          **音声ファイル**: $VOICE_FILE_B
          **音楽ファイル**: $MUSIC_FILE_B
          **出力先**: $FINAL_DIR_B/final-radio-audio.wav
          **バージョン**: B（プロフェッショナル・技術的）

          **合成要件**:
          1. 背景音楽のボリュームを音声の60%に調整（プロフェッショナルでも音楽を楽しむ）
          2. 音声をメインに、音楽を背景として配置
          3. 精密なフェードイン・フェードアウトを適用
          4. 音声の長さに合わせて音楽をループまたはトリミング
          5. 最終的な音質は高品質を維持

          **FFmpegコマンド例**:
          - 音楽ボリューム調整: -filter:a \"volume=0.6\"
          - 音声と音楽の合成: -filter_complex \"[1:a]volume=0.6[bg];[0:a][bg]amix=inputs=2[out]\"
          - フェード効果: afade=in:st=0:d=1.5,afade=out:st=(duration-1.5):d=1.5

          音声と音楽を合成し、プロフェッショナルで技術的な高品質なラジオ音声を完成させてください。"

          npx claude-code --prompt "$PROMPT"
          
          # 最終ファイルの確認
          if [ -f "$FINAL_DIR_B/final-radio-audio.wav" ]; then
            echo "✅ Final radio audio B created successfully"
            
            # ファイル情報を表示
            echo "📊 File information:"
            ls -lh "$FINAL_DIR_B/final-radio-audio.wav"
            
            # 音声時間を表示
            DURATION=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$FINAL_DIR_B/final-radio-audio.wav" 2>/dev/null || echo "Unknown")
            echo "⏱️ Duration: ${DURATION}s"
          else
            echo "❌ Final audio B composition failed"
            exit 1
          fi
          
          echo "::endgroup::"

  finalize-and-commit:
    runs-on: ubuntu-latest
    needs: [setup-branch, compose-final-audio-a, compose-final-audio-b]
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}

      - name: Commit and push results
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Add generated radio audio (A&B versions): ${{ inputs.script_content }}" || echo "No changes to commit"
          git push origin ${{ needs.setup-branch.outputs.branch-name }}

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          gh pr create \
            --title "Add new AI-generated radio audio (2 versions): $(echo '${{ inputs.script_content }}' | head -c 50)..." \
            --body "## 生成されたラジオ音声（2バージョン）

          **原稿**: ${{ inputs.script_content }}
          **音楽の雰囲気**: ${{ inputs.music_mood }}

          ### 🎙️ 生成された2つのバージョン
          - **バージョンA**: カジュアル・親しみやすいアプローチ（音楽ボリューム60%）
          - **バージョンB**: プロフェッショナル・技術的アプローチ（音楽ボリューム60%）

          ### 📁 出力ファイル構造
          \`\`\`
          ${{ needs.setup-branch.outputs.folder-name }}/
          ├── planning/
          │   ├── version-a/
          │   │   ├── radio-script.txt        # 台本A（カジュアル）
          │   │   ├── voice-style.json        # 音声スタイル設定A
          │   │   ├── music-prompt.txt        # 音楽生成プロンプトA
          │   │   └── radio-strategy.md       # 制作戦略A
          │   └── version-b/
          │       ├── radio-script.txt        # 台本B（プロフェッショナル）
          │       ├── voice-style.json        # 音声スタイル設定B
          │       ├── music-prompt.txt        # 音楽生成プロンプトB
          │       └── radio-strategy.md       # 制作戦略B
          ├── audio/
          │   ├── version-a/
          │   │   └── radio-voice.wav         # 音声A（カジュアル）
          │   └── version-b/
          │       └── radio-voice.wav         # 音声B（プロフェッショナル）
          ├── music/
          │   ├── version-a/
          │   │   └── background-music.wav    # 音楽A（親しみやすい）
          │   └── version-b/
          │       └── background-music.wav    # 音楽B（技術的）
          └── final/
              ├── version-a/
              │   └── final-radio-audio.wav   # 最終合成音声A
              └── version-b/
                  └── final-radio-audio.wav   # 最終合成音声B
          \`\`\`

          ### 🔧 バージョン特徴
          
          #### バージョンA（カジュアル）
          - 話し方: 「えっと」「ちょっと」多用、親しみやすい口調
          - 音声設定: 話速1.0、感情強度0.5
          - 音楽: リラックス・親しみやすい雰囲気
          - 合成: 背景音楽60%ボリューム、柔らかいフェード
          
          #### バージョンB（プロフェッショナル）
          - 話し方: 技術的表現重視、説明的アプローチ
          - 音声設定: 話速1.2、感情強度0.3
          - 音楽: 集中・プロフェッショナルな雰囲気
          - 合成: 背景音楽60%ボリューム、精密なフェード

          🤖 Generated with [Claude Code](https://claude.ai/code) & [kamuicode MCP](https://www.kamui.ai/ja)

          Co-Authored-By: Claude <noreply@anthropic.com>" \
            --head ${{ needs.setup-branch.outputs.branch-name }} \
            --base main