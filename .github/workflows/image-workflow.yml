name: Create Images from Prompt

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: '画像生成用のプロンプト'
        required: true
        type: string

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      branch-name: ${{ steps.create-branch.outputs.branch-name }}
      folder-name: ${{ steps.create-branch.outputs.folder-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create branch for image generation
        id: create-branch
        run: |
          BRANCH_NAME="images/$(date +%Y%m%d)-${{ github.run_id }}"
          FOLDER_NAME="images-$(date +%Y%m%d)-${{ github.run_id }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push origin $BRANCH_NAME
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "folder-name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Created branch: $BRANCH_NAME"
          echo "Folder name: $FOLDER_NAME"

  planning:
    runs-on: ubuntu-latest
    needs: [setup-branch]
    permissions:
      contents: write
    outputs:
      planning-completed: ${{ steps.planning.outputs.completed }}
      image-prompts: ${{ steps.planning.outputs.image-prompts }}
      variation-concepts: ${{ steps.planning.outputs.variation-concepts }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: 画像制作計画エージェント
        id: planning
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Image Planning Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          USER_PROMPT="${{ inputs.prompt }}"
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          PLANNING_DIR="$FOLDER_NAME/planning"
          
          echo "User prompt: $USER_PROMPT"
          echo "Planning folder: $PLANNING_DIR"
          
          # 計画フォルダを事前に作成
          if [ ! -d "$PLANNING_DIR" ]; then
            mkdir -p "$PLANNING_DIR"
            echo "📁 Created planning folder: $PLANNING_DIR"
          fi
          
          # プロンプトの構築
          PROMPT=$(cat <<'EOF'
あなたは画像制作の専門プランナーです。ユーザーの指示から、異なるシチュエーションで3枚の魅力的な画像を生成するための詳細な計画を立ててください。

**ユーザーの指示**: USER_PROMPT_PLACEHOLDER

**タスク**:
1. ユーザーの指示を分析し、3つの異なるシチュエーション/バリエーションを考案
2. 各バリエーションに対して高品質な画像生成用のプロンプトを作成
3. 3枚の画像が一貫性を保ちながらも、それぞれ独自の魅力を持つように計画
4. 計画書を「PLANNING_DIR_PLACEHOLDER/image-plan.md」に保存
5. 3つの画像生成用プロンプトを「PLANNING_DIR_PLACEHOLDER/image-prompts.json」に保存
6. バリエーションのコンセプトを「PLANNING_DIR_PLACEHOLDER/variation-concepts.md」に保存

**計画のポイント**:
- ユーザーの意図を正確に理解
- 3つの異なるシチュエーション（時間帯、天候、視点、スタイル等）を設定
- 各画像が独自性を持ちながら、全体として統一感のあるセット
- 魅力的で視覚的に美しい画像の構想
- 技術的制約を考慮した現実的な計画

**画像生成プロンプトの要件**:
- Imagen4 Ultraに最適化された詳細なプロンプト
- 各プロンプトは50-100語程度
- 視覚的要素（色彩、構図、スタイル）を明確に指定
- 高解像度・高品質を意識した記述

**JSONファイルのフォーマット**:
{
  "prompts": [
    {
      "id": 1,
      "concept": "朝の光景",
      "prompt": "詳細なプロンプト..."
    },
    {
      "id": 2,
      "concept": "昼の光景",
      "prompt": "詳細なプロンプト..."
    },
    {
      "id": 3,
      "concept": "夜の光景",
      "prompt": "詳細なプロンプト..."
    }
  ]
}

**重要**: 
1. 必ず以下の3つのファイルを作成してください：
   - PLANNING_DIR_PLACEHOLDER/image-plan.md（全体計画書）
   - PLANNING_DIR_PLACEHOLDER/image-prompts.json（機械処理用プロンプト）
   - PLANNING_DIR_PLACEHOLDER/variation-concepts.md（バリエーション説明）
2. 各ファイルの内容は具体的で詳細に記述してください
3. 3つのプロンプトは必ず異なるシチュエーションに基づいて作成してください
EOF
)
          
          # プレースホルダーを実際の値に置換
          PROMPT="${PROMPT//USER_PROMPT_PLACEHOLDER/$USER_PROMPT}"
          PROMPT="${PROMPT//PLANNING_DIR_PLACEHOLDER/$PLANNING_DIR}"
          
          echo "🚀 Starting Planning Agent Claude Code CLI..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Edit" \
            --max-turns 25 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::❌ Claude Code CLI execution failed"
              exit 1
            }
          
          # 生成された計画の確認
          echo ""
          echo "📋 Checking generated planning files..."
          
          # 画像プロンプトの確認
          if [ -f "$PLANNING_DIR/image-prompts.json" ]; then
            IMAGE_PROMPTS=$(cat "$PLANNING_DIR/image-prompts.json" | jq -c)
            echo "::notice::✅ Image prompts JSON generated"
            echo "Image prompts: $IMAGE_PROMPTS"
            echo "image-prompts=$IMAGE_PROMPTS" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Image prompts JSON file not found"
            exit 1
          fi
          
          # バリエーションコンセプトの確認
          if [ -f "$PLANNING_DIR/variation-concepts.md" ]; then
            echo "::notice::✅ Variation concepts generated"
            VARIATION_CONCEPTS=$(head -10 "$PLANNING_DIR/variation-concepts.md" | tr '\n' ' ')
            echo "Variation concepts: $VARIATION_CONCEPTS"
            echo "variation-concepts=$VARIATION_CONCEPTS" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Variation concepts file not found"
            exit 1
          fi
          
          # 計画書の確認
          if [ -f "$PLANNING_DIR/image-plan.md" ]; then
            echo "::notice::✅ Image plan document generated"
            echo "First 10 lines of plan:"
            head -10 "$PLANNING_DIR/image-plan.md"
          else
            echo "::warning::⚠️ Image plan document not found"
          fi
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Commit and push planning
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No planning files to commit"
          else
            git commit -m "Add image planning: ${{ inputs.prompt }}"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  image-generation:
    runs-on: ubuntu-latest
    needs: [setup-branch, planning]
    permissions:
      contents: write
    outputs:
      images-completed: ${{ steps.image.outputs.completed }}
      generated-images-count: ${{ steps.image.outputs.generated-images-count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: 画像生成エージェント (Imagen4 Ultra)
        id: image
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::🎨 Image Generation Agent Execution (Imagen4 Ultra)"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          USER_PROMPT="${{ inputs.prompt }}"
          IMAGE_PROMPTS=$(echo '${{ needs.planning.outputs.image-prompts }}' | jq -r '.' || echo '{}')
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          IMAGES_DIR="$FOLDER_NAME/images"
          
          echo "User prompt: $USER_PROMPT"
          echo "Image prompts: $IMAGE_PROMPTS"
          echo "Target folder: $IMAGES_DIR"
          
          # 画像フォルダを事前に作成
          if [ ! -d "$IMAGES_DIR" ]; then
            mkdir -p "$IMAGES_DIR"
            echo "📁 Created images folder: $IMAGES_DIR"
          fi
          
          # MCP設定の確認
          MCP_CONFIG_PATH=".claude/mcp-kamuicode.json"
          MCP_CONFIG_ABS_PATH="$(pwd)/$MCP_CONFIG_PATH"
          
          echo "📋 MCP Configuration Check:"
          echo "Working directory: $(pwd)"
          echo "MCP config path: $MCP_CONFIG_PATH"
          echo "MCP config absolute path: $MCP_CONFIG_ABS_PATH"
          echo "Allowed tools: mcp__t2i-fal-imagen4-ultra__imagen4_ultra_submit,mcp__t2i-fal-imagen4-ultra__imagen4_ultra_status,mcp__t2i-fal-imagen4-ultra__imagen4_ultra_result,Bash"
          
          # MCP設定ファイルの存在確認
          if [ -f "$MCP_CONFIG_ABS_PATH" ]; then
            echo "✅ MCP config file exists at: $MCP_CONFIG_ABS_PATH"
            echo "MCP servers configured:"
            jq -r '.mcpServers | keys[]' "$MCP_CONFIG_ABS_PATH" || true
          else
            echo "❌ MCP config file not found at: $MCP_CONFIG_ABS_PATH"
            exit 1
          fi
          
          # プロンプトの構築
          PROMPT=$(cat <<'EOF'
以下のプロンプトリストを使用してImagen4 Ultraで3枚の高品質な画像を生成してください。

**元のユーザー指示**: USER_PROMPT_PLACEHOLDER
**生成する画像プロンプト**: IMAGE_PROMPTS_PLACEHOLDER

**実行手順**:
1. 提供されたJSONデータから3つのプロンプトを抽出
2. 各プロンプトに対してImagen4 Ultraで画像生成を実行
3. `mcp__t2i-fal-imagen4-ultra__imagen4_ultra_submit`ツールで各画像生成を開始
4. `mcp__t2i-fal-imagen4-ultra__imagen4_ultra_status`でステータス確認
5. `mcp__t2i-fal-imagen4-ultra__imagen4_ultra_result`で結果取得してGoogle URLを取得
6. 各画像を以下の名前で保存：
   - 1枚目: IMAGES_DIR_PLACEHOLDER/image-variation-1.png
   - 2枚目: IMAGES_DIR_PLACEHOLDER/image-variation-2.png
   - 3枚目: IMAGES_DIR_PLACEHOLDER/image-variation-3.png
7. 各画像のGoogle URLも「IMAGES_DIR_PLACEHOLDER/image-urls.json」に保存

**URLファイルのフォーマット**:
{
  "urls": [
    {
      "id": 1,
      "concept": "コンセプト名",
      "url": "Google URL",
      "filename": "image-variation-1.png"
    },
    ...
  ]
}

**重要な注意点**:
- 必ず3枚の画像を生成してください
- 各画像は提供されたプロンプトに従って生成
- Google URLの有効期限は約1時間のため、生成後すぐにダウンロード
- ファイル名は指定された形式（image-variation-N.png）を使用
- 画像は必ず「IMAGES_DIR_PLACEHOLDER」ディレクトリに保存
- URLの記録も忘れずに実行

**処理の流れ**:
1. 1枚目の画像生成 → ダウンロード保存
2. 2枚目の画像生成 → ダウンロード保存
3. 3枚目の画像生成 → ダウンロード保存
4. すべてのURLを記録してJSONファイルに保存
EOF
)
          
          # プレースホルダーを実際の値に置換
          PROMPT="${PROMPT//USER_PROMPT_PLACEHOLDER/$USER_PROMPT}"
          PROMPT="${PROMPT//IMAGE_PROMPTS_PLACEHOLDER/$IMAGE_PROMPTS}"
          PROMPT="${PROMPT//IMAGES_DIR_PLACEHOLDER/$IMAGES_DIR}"
          
          echo "🚀 Starting Image Generation Agent Claude Code CLI..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            --mcp-config="$MCP_CONFIG_ABS_PATH" \
            --allowedTools "mcp__t2i-fal-imagen4-ultra__imagen4_ultra_submit,mcp__t2i-fal-imagen4-ultra__imagen4_ultra_status,mcp__t2i-fal-imagen4-ultra__imagen4_ultra_result,Bash,Write" \
            --max-turns 30 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::❌ Claude Code CLI execution failed"
              exit 1
            }
          
          # 生成された画像の確認
          echo ""
          echo "📸 Checking generated images..."
          if [ -d "$IMAGES_DIR" ]; then
            IMAGE_COUNT=$(find "$IMAGES_DIR" -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | wc -l)
            echo "::notice::📸 Generated $IMAGE_COUNT images"
            if [ "$IMAGE_COUNT" -gt 0 ]; then
              echo "Image files:"
              find "$IMAGES_DIR" -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | sort
              
              # URLファイルの確認
              if [ -f "$IMAGES_DIR/image-urls.json" ]; then
                echo "::notice::✅ Image URLs JSON file found"
                cat "$IMAGES_DIR/image-urls.json"
              else
                echo "::warning::⚠️ Image URLs JSON file not found"
              fi
              
              echo "generated-images-count=$IMAGE_COUNT" >> $GITHUB_OUTPUT
            else
              echo "::error::❌ No images were generated"
              exit 1
            fi
          else
            echo "::error::❌ Images directory not found"
            exit 1
          fi
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Commit and push images
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No images to commit"
          else
            git commit -m "Add generated images: ${{ inputs.prompt }}"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  create-pr:
    runs-on: ubuntu-latest
    needs: [setup-branch, planning, image-generation]
    permissions:
      contents: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # ブランチ名を取得
          BRANCH_NAME="${{ needs.setup-branch.outputs.branch-name }}"
          
          # 変更をコミット
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 最終成果物の確認とコミット
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          echo "=== Final Image Generation Summary ==="
          echo "Image folder: $FOLDER_NAME"
          
          IMAGES_COUNT=0
          
          if [ -d "$FOLDER_NAME" ]; then
            echo "✅ Image folder exists: $FOLDER_NAME"
            echo "Contents:"
            ls -la "$FOLDER_NAME"
            
            # 画像ファイルの確認
            if [ -d "$FOLDER_NAME/images" ]; then
              IMAGES_COUNT=$(find "$FOLDER_NAME/images" -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | wc -l)
              echo "✅ Images directory exists with $IMAGES_COUNT files"
              if [ "$IMAGES_COUNT" -gt 0 ]; then
                echo "Image files:"
                find "$FOLDER_NAME/images" -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | sort
              fi
            else
              echo "❌ Images directory not found"
            fi
          else
            echo "❌ Image folder not found: $FOLDER_NAME"
          fi
          
          # すべてのファイルをコミット
          git add "$FOLDER_NAME/" 2>/dev/null || true
          
          # コミットメッセージを作成
          COMMIT_MESSAGE="Add new AI-generated images: ${{ inputs.prompt }}
          
          プロンプト: ${{ inputs.prompt }}
          生成日時: $(date -u +%Y-%m-%d\ %H:%M:%S)\ UTC
          
          📊 Generation Summary:
          - Images: $IMAGES_COUNT files (Imagen4 Ultra)
          - Variations: 3 different situations
          
          🤖 Generated with Claude Code SDK & kamuicode MCP
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # コミット
          if git diff --cached --quiet; then
            echo "Warning: No changes to commit"
            git commit --allow-empty -m "$COMMIT_MESSAGE"
          else
            git commit -m "$COMMIT_MESSAGE"
          fi
          
          # プッシュ
          git push origin $BRANCH_NAME
          
          # GitHub Actions Summaryに結果を出力
          echo "# 🎨 AI画像生成完了" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 生成情報" >> $GITHUB_STEP_SUMMARY
          echo "- **プロンプト**: ${{ inputs.prompt }}" >> $GITHUB_STEP_SUMMARY
          echo "- **生成日時**: $(date -u +%Y-%m-%d\ %H:%M:%S)\ UTC" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 生成結果" >> $GITHUB_STEP_SUMMARY
          echo "- 📸 **画像**: $IMAGES_COUNT ファイル (Imagen4 Ultra)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 **バリエーション**: 3つの異なるシチュエーション" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 画像をサマリに表示
          if [ -d "$FOLDER_NAME/images" ] && [ "$IMAGES_COUNT" -gt 0 ]; then
            echo "## 🎨 生成された画像" >> $GITHUB_STEP_SUMMARY
            
            # 各画像をサマリに追加
            for i in 1 2 3; do
              IMAGE_PATH="$FOLDER_NAME/images/image-variation-$i.png"
              if [ -f "$IMAGE_PATH" ]; then
                # GitHubの生ファイルURL構築
                GITHUB_IMAGE_URL="https://github.com/${{ github.repository }}/raw/$BRANCH_NAME/$IMAGE_PATH"
                echo "### バリエーション $i" >> $GITHUB_STEP_SUMMARY
                echo "![Variation $i]($GITHUB_IMAGE_URL)" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          echo "## 🔗 次のステップ" >> $GITHUB_STEP_SUMMARY
          echo "1. プルリクエストで全ての画像を確認" >> $GITHUB_STEP_SUMMARY
          echo "2. 必要に応じてメインブランチにマージ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # プルリクエスト用のボディを作成
          PR_BODY="🤖 Claude Code SDK & kamuicode MCPを使用して自動生成された画像セットです."
          PR_BODY="$PR_BODY"$'\n\n'"プロンプト: ${{ inputs.prompt }}"
          PR_BODY="$PR_BODY"$'\n\n'"生成フロー:"
          PR_BODY="$PR_BODY"$'\n'"1. 🎨 Imagen4 Ultra で3つの異なるシチュエーションの高品質画像を生成"
          PR_BODY="$PR_BODY"$'\n\n'"成果物:"
          PR_BODY="$PR_BODY"$'\n'"- 画像: $IMAGES_COUNT ファイル"
          PR_BODY="$PR_BODY"$'\n'"- バリエーション: 3つの異なるシチュエーション"
          
          # 画像をプルリクに埋め込み
          if [ -d "$FOLDER_NAME/images" ] && [ "$IMAGES_COUNT" -gt 0 ]; then
            PR_BODY="$PR_BODY"$'\n\n'"## 🎨 生成された画像"
            
            # 各画像をプルリクに追加
            for i in 1 2 3; do
              IMAGE_PATH="$FOLDER_NAME/images/image-variation-$i.png"
              if [ -f "$IMAGE_PATH" ]; then
                # GitHubの生ファイルURL構築
                GITHUB_IMAGE_URL="https://github.com/${{ github.repository }}/raw/$BRANCH_NAME/$IMAGE_PATH"
                PR_BODY="$PR_BODY"$'\n\n'"### バリエーション $i"
                PR_BODY="$PR_BODY"$'\n'"![Variation $i]($GITHUB_IMAGE_URL)"
              fi
            done
          fi
          
          PR_BODY="$PR_BODY

          ---
          🤖 Generated with [Claude Code SDK & kamuicode MCP](https://github.com/AI-Summoner/ai-summoner)"
          
          # PR作成 (GH_TOKENを使用)
          gh pr create \
            --title "新しいAI生成画像セット: ${{ inputs.prompt }}" \
            --body "$PR_BODY" \
            --base main \
            --head $BRANCH_NAME