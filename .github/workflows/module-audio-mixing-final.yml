name: Audio Mixing Module - Final
on:
  workflow_call:
    inputs:
      opening-audio:
        required: true
        type: string
      main-audio:
        required: true
        type: string
      main2-audio:
        required: true
        type: string
      main3-audio:
        required: true
        type: string
      ending-audio:
        required: true
        type: string
    outputs:
      final-audio:
        value: ${{ jobs.mix-final.outputs.url }}
      metadata:
        value: ${{ jobs.mix-final.outputs.metadata }}

jobs:
  mix-final:
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.mixing.outputs.final-file }}
      metadata: ${{ steps.mixing.outputs.metadata }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download opening mixed audio artifact
        uses: actions/download-artifact@v4
        with:
          name: opening-mixed-audio
          path: artifacts/opening-mixed-audio
      
      - name: Download main mixed audio artifact
        uses: actions/download-artifact@v4
        with:
          name: main-mixed-audio
          path: artifacts/main-mixed-audio
      
      - name: Download main2 mixed audio artifact
        uses: actions/download-artifact@v4
        with:
          name: main2-mixed-audio
          path: artifacts/main2-mixed-audio
      
      - name: Download main3 mixed audio artifact
        uses: actions/download-artifact@v4
        with:
          name: main3-mixed-audio
          path: artifacts/main3-mixed-audio
      
      - name: Download ending mixed audio artifact
        uses: actions/download-artifact@v4
        with:
          name: ending-mixed-audio
          path: artifacts/ending-mixed-audio
      
      - name: Download voice-uuid artifact
        uses: actions/download-artifact@v4
        with:
          name: voice-uuid
          path: artifacts/voice-uuid
      
      - name: List downloaded artifacts
        run: |
          echo "::group::📁 最終統合用アーティファクト"
          echo "=== artifacts/ ==="
          ls -la artifacts/ || echo "artifactsディレクトリが見つかりません"
          echo ""
          echo "=== 各アーティファクトの内容 ==="
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              echo "--- $dir ---"
              ls -la "$dir" || echo "ディレクトリが空です"
              echo ""
            fi
          done
          echo "::endgroup::"
      
      - name: Install FFmpeg
        run: |
          # タイムアウトと3回リトライ機能付きFFmpegインストール
          install_ffmpeg() {
            local attempt=1
            local max_attempts=3
            
            while [ $attempt -le $max_attempts ]; do
              echo "📦 FFmpegインストール試行 $attempt/$max_attempts"
              
              # タイムアウト付きapt-get update実行（5分でタイムアウト）
              if timeout 300 sudo apt-get update; then
                echo "✅ apt-get update 成功"
                if sudo apt-get install -y ffmpeg; then
                  echo "✅ FFmpegインストール成功"
                  return 0
                else
                  echo "::warning::FFmpegインストールに失敗（試行 $attempt/$max_attempts）"
                fi
              else
                echo "::warning::apt-get update がタイムアウトまたは失敗（試行 $attempt/$max_attempts）"
                
                # Microsoft リポジトリが原因の可能性があるため削除して再試行
                if [ $attempt -eq 2 ]; then
                  echo "🔧 問題のあるリポジトリを無効化してリトライ"
                  sudo rm -f /etc/apt/sources.list.d/microsoft* || true
                  sudo rm -f /etc/apt/sources.list.d/azure* || true
                fi
              fi
              
              attempt=$((attempt + 1))
              if [ $attempt -le $max_attempts ]; then
                echo "⏳ 10秒待機してリトライ..."
                sleep 10
              fi
            done
            
            echo "::error::❌ FFmpegのインストールに失敗しました（$max_attempts 回試行）"
            return 1
          }
          
          install_ffmpeg
      
      - name: Combine all sections into final audio
        id: mixing
        run: |
          # 5つのセクションを時系列で結合し、最終調整
          
          # エラーハンドリング付きFFmpeg実行
          safe_ffmpeg() {
            local TEMP_LOG="ffmpeg_$(date +%s).log"
            if ! ffmpeg "$@" 2>"$TEMP_LOG"; then
              echo "::error::FFmpeg処理に失敗しました: $*"
              echo "::error::FFmpegエラー出力:"
              cat "$TEMP_LOG" | head -20
              rm -f "$TEMP_LOG"
              return 1
            fi
            rm -f "$TEMP_LOG"
            return 0
          }
          
          # アーティファクトからファイルをコピー
          echo "📂 ミックス済み音声ファイルのコピー"
          
          if [ -f "artifacts/opening-mixed-audio/${{ inputs.opening-audio }}" ]; then
            cp "artifacts/opening-mixed-audio/${{ inputs.opening-audio }}" opening-final.wav
            echo "✅ opening-final.wav をコピーしました"
          else
            echo "::error::オープニング音声が見つかりません: artifacts/opening-mixed-audio/${{ inputs.opening-audio }}"
            exit 1
          fi
          
          if [ -f "artifacts/main-mixed-audio/${{ inputs.main-audio }}" ]; then
            cp "artifacts/main-mixed-audio/${{ inputs.main-audio }}" main-final.wav
            echo "✅ main-final.wav をコピーしました"
          else
            echo "::error::メイン音声が見つかりません: artifacts/main-mixed-audio/${{ inputs.main-audio }}"
            exit 1
          fi
          
          if [ -f "artifacts/main2-mixed-audio/${{ inputs.main2-audio }}" ]; then
            cp "artifacts/main2-mixed-audio/${{ inputs.main2-audio }}" main2-final.wav
            echo "✅ main2-final.wav をコピーしました"
          else
            echo "::error::メイン2音声が見つかりません: artifacts/main2-mixed-audio/${{ inputs.main2-audio }}"
            exit 1
          fi
          
          if [ -f "artifacts/main3-mixed-audio/${{ inputs.main3-audio }}" ]; then
            cp "artifacts/main3-mixed-audio/${{ inputs.main3-audio }}" main3-final.wav
            echo "✅ main3-final.wav をコピーしました"
          else
            echo "::error::メイン3音声が見つかりません: artifacts/main3-mixed-audio/${{ inputs.main3-audio }}"
            exit 1
          fi
          
          if [ -f "artifacts/ending-mixed-audio/${{ inputs.ending-audio }}" ]; then
            cp "artifacts/ending-mixed-audio/${{ inputs.ending-audio }}" ending-final.wav
            echo "✅ ending-final.wav をコピーしました"
          else
            echo "::error::エンディング音声が見つかりません: artifacts/ending-mixed-audio/${{ inputs.ending-audio }}"
            exit 1
          fi
          
          # セクション間用の無音ファイルを作成（1〜2秒のランダム）
          echo "🔇 セクション間無音ファイルを作成"
          
          # 1つ目の無音区間（1〜2秒のランダム）
          SILENCE_1=$(awk "BEGIN {srand(); print 1 + rand()}")
          echo "  1つ目の無音: ${SILENCE_1}秒"
          safe_ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t $SILENCE_1 -ar 44100 -ac 2 -c:a pcm_s16le section-break-1.wav || exit 1
          
          # 2つ目の無音区間（1〜2秒のランダム）
          SILENCE_2=$(awk "BEGIN {srand(); print 1 + rand()}")
          echo "  2つ目の無音: ${SILENCE_2}秒"
          safe_ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t $SILENCE_2 -ar 44100 -ac 2 -c:a pcm_s16le section-break-2.wav || exit 1
          
          # 3つ目の無音区間（1〜2秒のランダム）
          SILENCE_3=$(awk "BEGIN {srand(); print 1 + rand()}")
          echo "  3つ目の無音: ${SILENCE_3}秒"
          safe_ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t $SILENCE_3 -ar 44100 -ac 2 -c:a pcm_s16le section-break-3.wav || exit 1
          
          # 4つ目の無音区間（1〜2秒のランダム）
          SILENCE_4=$(awk "BEGIN {srand(); print 1 + rand()}")
          echo "  4つ目の無音: ${SILENCE_4}秒"
          safe_ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t $SILENCE_4 -ar 44100 -ac 2 -c:a pcm_s16le section-break-4.wav || exit 1
          
          # 5つのセクションを無音区間付きで連結し、最終調整
          echo "🎵 最終ミックス開始（5セクション + ランダム無音区間結合）"
          echo "📁 連結するファイル:"
          ls -la opening-final.wav section-break-1.wav main-final.wav section-break-2.wav main2-final.wav section-break-3.wav main3-final.wav section-break-4.wav ending-final.wav
          
          # 5つのセクションを時系列順に連結（セクション間にランダム無音を挿入）し、放送基準に正規化
          safe_ffmpeg -i opening-final.wav \
                      -i section-break-1.wav \
                      -i main-final.wav \
                      -i section-break-2.wav \
                      -i main2-final.wav \
                      -i section-break-3.wav \
                      -i main3-final.wav \
                      -i section-break-4.wav \
                      -i ending-final.wav \
                      -filter_complex "[0][1][2][3][4][5][6][7][8]concat=n=9:v=0:a=1[combined];
                                      [combined]loudnorm=I=-23:LRA=7:TP=-1[normalized]" \
                      -map "[normalized]" \
                      -c:a mp3 \
                      -b:a 320k \
                      final-radio.mp3 || exit 1
          
          if [ -f "final-radio.mp3" ]; then
            echo "✅ final-radio.mp3 生成成功 ($(stat -c%s final-radio.mp3) bytes)"
          else
            echo "::error::❌ final-radio.mp3 の生成に失敗"
            exit 1
          fi
          
          # 選択された音楽情報を取得してメタデータに含める
          SELECTED_MUSIC_INFO="unknown"
          if [ -f "artifacts/voice-uuid/USE_UUID.md" ]; then
            SELECTED_MUSIC_INFO=$(grep "Selected Music File:" artifacts/voice-uuid/USE_UUID.md | cut -d' ' -f4- || echo "unknown")
          fi
          
          # 最終音声の長さを取得
          FINAL_DURATION=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "final-radio.mp3" 2>/dev/null || echo "unknown")
          
          # メタデータ生成
          echo "{
            \"duration\": \"${FINAL_DURATION}s\",
            \"selected_music\": \"$SELECTED_MUSIC_INFO\",
            \"sections\": [
              {\"name\": \"opening\", \"description\": \"音声+BGM+選択楽曲（クロスフェード）\", \"bgm\": \"upbeat\", \"bgm_volume\": \"100%→50%→0\", \"intro\": \"6s\", \"crossfade\": \"楽曲との5秒クロスフェード\"},
              {\"name\": \"main\", \"description\": \"音声+BGM（昼の神威日報）\", \"bgm\": \"talk-friendly\", \"bgm_volume\": \"100%→50%\", \"intro\": \"4s\", \"fade_out\": \"5s\"},
              {\"name\": \"main2\", \"description\": \"音声+BGM（テックニュース）\", \"bgm\": \"tech-digital\", \"bgm_volume\": \"100%→50%\", \"intro\": \"4s\", \"fade_out\": \"5s\"},
              {\"name\": \"main3\", \"description\": \"音声+BGM（夜の神威日報）\", \"bgm\": \"night-chill\", \"bgm_volume\": \"100%→50%\", \"intro\": \"4s\", \"fade_out\": \"5s\"},
              {\"name\": \"ending\", \"description\": \"音声+BGM\", \"bgm\": \"warm-outro\", \"bgm_volume\": \"100%→50%→100%\", \"intro\": \"4s\", \"fade_out\": \"7s\"}
            ],
            \"processing\": {
              \"workflow\": \"分割処理後統合\",
              \"opening_job\": \"audio-mixing-opening\",
              \"main_job\": \"audio-mixing-main\",
              \"main2_job\": \"audio-mixing-main2\",
              \"main3_job\": \"audio-mixing-main3\",
              \"ending_job\": \"audio-mixing-ending\",
              \"final_job\": \"audio-mixing-final\"
            },
            \"audio_standard\": \"-23 LUFS\",
            \"format\": \"MP3 320kbps\"
          }" > metadata.json
          
          echo "final-file=final-radio.mp3" >> $GITHUB_OUTPUT
          echo "metadata=metadata.json" >> $GITHUB_OUTPUT
      
      - name: Upload final audio artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-audio
          path: |
            final-radio.mp3
            metadata.json
          retention-days: 7