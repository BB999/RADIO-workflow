name: Radio Planning Module - Fine Split Version (Minimal)
on:
  workflow_call:
    inputs:
      development-report:
        required: false
        type: string
      processed-summary:
        description: 'Gemini CLIで処理済みの構造化されたサマリー'
        required: false
        type: string
      use-processed-input:
        description: '処理済み入力を使用するかどうか'
        required: false
        type: boolean
        default: false
    outputs:
      script-opening:
        value: ${{ jobs.generate-opening.outputs.script-opening }}
      script-main:
        value: ${{ jobs.generate-main.outputs.script-main }}
      script-main-part2:
        value: ${{ jobs.generate-main-part2.outputs.script-main-part2 }}
      script-jingle:
        value: ${{ jobs.generate-jingle.outputs.script-jingle }}
      script-ending:
        value: ${{ jobs.generate-ending.outputs.script-ending }}
      voice-config:
        value: ${{ jobs.generate-opening.outputs.voice-config }}

jobs:
  generate-opening:
    runs-on: ubuntu-latest
    outputs:
      script-opening: ${{ steps.planning.outputs.script-opening }}
      voice-config: ${{ steps.planning.outputs.voice-config }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup music file selection
        run: |
          # 音楽ファイル選択とUUID生成
          echo "🎵 音楽ファイル選択"
          
          # radio-workflow/musicディレクトリから実際のmp3ファイルを取得
          if [ ! -d "radio-workflow/music" ]; then
            echo "::error::radio-workflow/musicディレクトリが見つかりません"
            exit 1
          fi
          
          # .mp3ファイルを配列に取得
          declare -a MUSIC_FILES=()
          while IFS= read -r -d '' file; do
            filename=$(basename "$file")
            MUSIC_FILES+=("$filename")
            echo "  - 発見: $filename"
          done < <(find radio-workflow/music -name "*.mp3" -print0)
          
          # 音楽ファイルが存在するかチェック
          if [ ${#MUSIC_FILES[@]} -eq 0 ]; then
            echo "::error::音楽ファイルが見つかりません"
            exit 1
          fi
          
          # ランダムに音楽ファイルを選択（時刻ベースのシード使用）
          MUSIC_SEED=$(($(date +%s%N | cut -b10-19) + $$ + RANDOM))
          SELECTED_INDEX=$((MUSIC_SEED % ${#MUSIC_FILES[@]}))
          SELECTED_MUSIC_FILE="${MUSIC_FILES[$SELECTED_INDEX]}"
          echo "🎯 選択された音楽ファイル: $SELECTED_MUSIC_FILE (シード: $MUSIC_SEED)"
          
          # radio-workflow/UUID.mdから音声IDをランダム選択
          if [ -f "radio-workflow/UUID.md" ]; then
            # 空行を除いてUUIDを配列に読み込み
            declare -a VOICE_UUIDS=()
            while IFS= read -r uuid; do
              if [ -n "$uuid" ]; then
                VOICE_UUIDS+=("$uuid")
                echo "  - 発見UUID: $uuid"
              fi
            done < "radio-workflow/UUID.md"
            
            # UUIDが存在するかチェック
            if [ ${#VOICE_UUIDS[@]} -eq 0 ]; then
              echo "::error::有効なUUIDが見つかりません"
              exit 1
            fi
            
            # 時刻ベースのランダム選択
            CURRENT_TIME=$(date +%s)
            UUID_INDEX=$((CURRENT_TIME % ${#VOICE_UUIDS[@]}))
            DEFAULT_VOICE_ID="${VOICE_UUIDS[$UUID_INDEX]}"
            echo "🎯 選択された音声UUID: $DEFAULT_VOICE_ID (時刻: $CURRENT_TIME, インデックス: $UUID_INDEX)"
          else
            echo "::error::UUID.mdファイルが見つかりません"
            exit 1
          fi
          
          # 楽曲名とアーティスト名を抽出（「楽曲名・アーティスト名.mp3」形式）
          FILENAME_WITHOUT_EXT="${SELECTED_MUSIC_FILE%.mp3}"
          if [[ "$FILENAME_WITHOUT_EXT" == *"・"* ]]; then
            SONG_NAME="${FILENAME_WITHOUT_EXT%・*}"
            ARTIST_NAME="${FILENAME_WITHOUT_EXT#*・}"
            echo "📝 楽曲情報を抽出: 楽曲名='$SONG_NAME', アーティスト='$ARTIST_NAME'"
          else
            SONG_NAME="$FILENAME_WITHOUT_EXT"
            ARTIST_NAME="不明"
            echo "📝 楽曲情報: 楽曲名='$SONG_NAME' (アーティスト名なし)"
          fi
          
          # USE_UUID.mdファイルを作成
          mkdir -p radio-workflow/temp
          cat > radio-workflow/temp/USE_UUID.md << EOF
          Voice UUID: $DEFAULT_VOICE_ID
          Selected Music File: $SELECTED_MUSIC_FILE
          Artist: $ARTIST_NAME
          Song: $SONG_NAME
          EOF
          
          echo "✅ 音楽選択とUUID設定完了"
      
      - name: Upload voice-uuid artifact
        uses: actions/upload-artifact@v4
        with:
          name: voice-uuid
          path: radio-workflow/temp/USE_UUID.md
          retention-days: 1
      
      - name: Generate opening script
        id: planning
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Opening Script Generation"
          
          WORK_DIR="radio-scripts"
          mkdir -p "$WORK_DIR"
          
          # パーソナリティデータファイルの内容を読み込み
          if [ -f "radio-workflow/radio-personality-data.md" ]; then
            PERSONALITY_DATA=$(cat radio-workflow/radio-personality-data.md)
            echo "✅ パーソナリティデータを読み込みました"
          else
            PERSONALITY_DATA=""
            echo "::warning::パーソナリティデータファイルが見つかりません"
          fi
          
          # SSMLフォーマッターをコピー
          cp radio-workflow/ssml_formatter.js $WORK_DIR/
          
          # 楽曲情報を取得
          SELECTED_MUSIC="不明"
          ARTIST_NAME="不明"
          SONG_NAME="不明"
          if [ -f "radio-workflow/temp/USE_UUID.md" ]; then
            SELECTED_MUSIC_FILE=$(grep "Selected Music File:" radio-workflow/temp/USE_UUID.md | cut -d' ' -f4- 2>/dev/null || echo "不明")
            ARTIST_NAME=$(grep "Artist:" radio-workflow/temp/USE_UUID.md | cut -d' ' -f2- 2>/dev/null || echo "不明")
            SONG_NAME=$(grep "Song:" radio-workflow/temp/USE_UUID.md | cut -d' ' -f2- 2>/dev/null || echo "不明")
            
            # 楽曲紹介テキストを作成
            if [ "$ARTIST_NAME" != "不明" ] && [ "$SONG_NAME" != "不明" ] && [ "$SONG_NAME" != "不明2" ] && [ "$SONG_NAME" != "不明3" ]; then
              MUSIC_INTRO="今日紹介するカムイユーザーの楽曲は、${ARTIST_NAME}さんの「${SONG_NAME}」です。"
            elif [ "$ARTIST_NAME" != "不明" ] && ([[ "$SONG_NAME" == "不明"* ]] || [ "$SONG_NAME" == "" ]); then
              MUSIC_INTRO="今日紹介するカムイユーザーの楽曲は、${ARTIST_NAME}さんの楽曲です。"
            elif [ "$SONG_NAME" != "不明" ] && [[ ! "$SONG_NAME" == "不明"* ]]; then
              MUSIC_INTRO="今日紹介するカムイユーザーの楽曲は「${SONG_NAME}」です。"
            else
              MUSIC_INTRO="今日も素敵な楽曲と共にお送りします。"
            fi
            echo "🎵 楽曲紹介: $MUSIC_INTRO"
          else
            MUSIC_INTRO="今日も素敵な楽曲と共にお送りします。"
            echo "::warning::楽曲情報ファイルが見つからないため、デフォルトの紹介文を使用"
          fi
          
          PROMPT="オープニング台本を生成してください。

          パーソナリティ: $PERSONALITY_DATA

          要件: 1分（300-400文字）
          構成: 明るい挨拶 → 番組紹介 → 最後に楽曲紹介(必ず絶対に最後に入れる)
          楽曲紹介文（必ず絶対最後に入れる）: $MUSIC_INTRO
          
          以下のJSONファイルを opening.json として現在のディレクトリに保存してください：
          {\"opening\": \"台本テキスト（楽曲紹介で終わる）\"}
          
          **重要**: Writeツールを使用してファイルを確実に保存してください。"
          
          cd "$WORK_DIR" && npx @anthropic-ai/claude-code \
            --allowedTools "Write" \
            --max-turns 8 \
            --permission-mode "acceptEdits" \
            -p "$PROMPT"
          
          # 元のディレクトリに戻る
          cd - > /dev/null 2>&1 || cd /home/runner/work/kamuicode-workflow/kamuicode-workflow
          
          if [ -f "$WORK_DIR/opening.json" ]; then
            echo "📄 opening.json ファイルが存在"
            
            # JSONの検証
            if ! jq empty "$WORK_DIR/opening.json" 2>/dev/null; then
              echo "::error::opening.json が無効なJSONフォーマットです"
              echo "::error::ファイル内容:"
              cat "$WORK_DIR/opening.json" | head -10
              exit 1
            fi
            
            OPENING_TEXT=$(jq -r '.opening' "$WORK_DIR/opening.json")
            
            if [ -z "$OPENING_TEXT" ] || [ "$OPENING_TEXT" = "null" ]; then
              echo "::error::opening.json に 'opening' フィールドが見つかりません"
              echo "::error::JSONファイル内容:"
              cat "$WORK_DIR/opening.json"
              exit 1
            fi
            
            echo "📝 取得したテキスト（最初の100文字）: ${OPENING_TEXT:0:100}..."
            
            # SSMLフォーマッターを使用して処理
            echo "🎛️ SSMLフォーマット処理開始"
            
            if [ ! -f "radio-workflow/ssml_formatter.js" ]; then
              echo "::error::ssml_formatter.js が見つかりません"
              exit 1
            fi
            
            cp radio-workflow/ssml_formatter.js $WORK_DIR/
            
            # Node.jsのバージョン確認
            node --version
            
            # SSMLフォーマッター実行（エラーハンドリング付き）
            FORMATTED_TEXT=$(cd $WORK_DIR && node -e "
              try {
                const SSMLFormatter = require('./ssml_formatter.js');
                const formatter = new SSMLFormatter();
                const text = process.argv[1];
                if (!text) {
                  console.error('Error: Empty text provided');
                  process.exit(1);
                }
                const preset = formatter.getPreset ? formatter.getPreset('normal') : {};
                const formatted = formatter.formatWithBreaks(text, preset);
                console.log(formatted);
              } catch (e) {
                console.error('Error in SSML formatting:', e.message);
                process.exit(1);
              }
            " "$OPENING_TEXT" 2>&1) || {
              echo "::error::SSMLフォーマッター実行エラー"
              echo "::error::エラー出力: $FORMATTED_TEXT"
              exit 1
            }
            
            # 固有名詞置き換え
            FINAL_TEXT=$(echo "$FORMATTED_TEXT" | sed 's/神威日報/かむいにっぽう/g' | sed 's/神威/カムイ/g')
            
            echo "script-opening<<EOF" >> $GITHUB_OUTPUT
            echo "$FINAL_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "voice-config=default" >> $GITHUB_OUTPUT
            echo "✅ Opening script generated successfully with SSML formatting"
          else
            echo "::error::Opening script generation failed - opening.json ファイルが作成されませんでした"
            echo "::error::作業ディレクトリの内容:"
            ls -la "$WORK_DIR/" || echo "作業ディレクトリが存在しません"
            exit 1
          fi
          echo "::endgroup::"

  generate-main:
    runs-on: ubuntu-latest
    outputs:
      script-main: ${{ steps.planning.outputs.script-main }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate main part1 script
        id: planning
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Main Part1 Script Generation"
          
          WORK_DIR="radio-scripts"
          mkdir -p "$WORK_DIR"
          
          # パーソナリティデータファイルの内容を読み込み
          if [ -f "radio-workflow/radio-personality-data.md" ]; then
            PERSONALITY_DATA=$(cat radio-workflow/radio-personality-data.md)
            echo "✅ パーソナリティデータを読み込みました"
          else
            PERSONALITY_DATA=""
            echo "::warning::パーソナリティデータファイルが見つかりません"
          fi
          
          # SSMLフォーマッターをコピー
          cp radio-workflow/ssml_formatter.js $WORK_DIR/
          
          # 開発進捗情報を前半用に分割
          DEV_REPORT='${{ inputs.development-report }}'
          HALF_LENGTH=$((${#DEV_REPORT} / 2))
          DEV_REPORT_PART1=$(echo "$DEV_REPORT" | cut -c1-$HALF_LENGTH)
          
          PROMPT="メイン前半台本を生成してください。

          パーソナリティ: $PERSONALITY_DATA
          進捗情報: $DEV_REPORT_PART1

          要件: 3分（900-1200文字）、開発進捗の主要ポイント解説
          
          以下のJSONファイルを main.json として現在のディレクトリに保存してください：
          {\"main\": \"台本テキスト\"}
          
          **重要**: Writeツールを使用してファイルを確実に保存してください。"
          
          cd "$WORK_DIR" && npx @anthropic-ai/claude-code \
            --allowedTools "Write" \
            --max-turns 8 \
            --permission-mode "acceptEdits" \
            -p "$PROMPT"
          
          # 元のディレクトリに戻る
          cd - > /dev/null 2>&1 || cd /home/runner/work/kamuicode-workflow/kamuicode-workflow
          
          if [ -f "$WORK_DIR/main.json" ]; then
            echo "📄 main.json ファイルが存在"
            
            # JSONの検証
            if ! jq empty "$WORK_DIR/main.json" 2>/dev/null; then
              echo "::error::main.json が無効なJSONフォーマットです"
              echo "::error::ファイル内容:"
              cat "$WORK_DIR/main.json" | head -10
              exit 1
            fi
            
            MAIN_TEXT=$(jq -r '.main' "$WORK_DIR/main.json")
            
            if [ -z "$MAIN_TEXT" ] || [ "$MAIN_TEXT" = "null" ]; then
              echo "::error::main.json に 'main' フィールドが見つかりません"
              echo "::error::JSONファイル内容:"
              cat "$WORK_DIR/main.json"
              exit 1
            fi
            
            echo "📝 取得したテキスト（最初の100文字）: ${MAIN_TEXT:0:100}..."
            
            # SSMLフォーマッターを使用して処理
            echo "🎛️ SSMLフォーマット処理開始"
            cp radio-workflow/ssml_formatter.js $WORK_DIR/
            
            # SSMLフォーマッター実行（エラーハンドリング付き）
            FORMATTED_TEXT=$(cd $WORK_DIR && node -e "
              try {
                const SSMLFormatter = require('./ssml_formatter.js');
                const formatter = new SSMLFormatter();
                const text = process.argv[1];
                if (!text) {
                  console.error('Error: Empty text provided');
                  process.exit(1);
                }
                const preset = formatter.getPreset ? formatter.getPreset('normal') : {};
                const formatted = formatter.formatWithBreaks(text, preset);
                console.log(formatted);
              } catch (e) {
                console.error('Error in SSML formatting:', e.message);
                process.exit(1);
              }
            " "$MAIN_TEXT" 2>&1) || {
              echo "::error::SSMLフォーマッター実行エラー"
              echo "::error::エラー出力: $FORMATTED_TEXT"
              exit 1
            }
            
            # 固有名詞置き換え
            FINAL_TEXT=$(echo "$FORMATTED_TEXT" | sed 's/神威日報/かむいにっぽう/g' | sed 's/神威/カムイ/g')
            
            echo "script-main<<EOF" >> $GITHUB_OUTPUT
            echo "$FINAL_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "✅ Main part1 script generated successfully with SSML formatting"
          else
            echo "::error::Main part1 script generation failed - main.json ファイルが作成されませんでした"
            echo "::error::作業ディレクトリの内容:"
            ls -la "$WORK_DIR/" || echo "作業ディレクトリが存在しません"
            exit 1
          fi
          echo "::endgroup::"

  generate-main-part2:
    runs-on: ubuntu-latest
    outputs:
      script-main-part2: ${{ steps.planning.outputs.script-main-part2 }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate main part2 script
        id: planning
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Main Part2 Script Generation"
          
          WORK_DIR="radio-scripts"
          mkdir -p "$WORK_DIR"
          
          # パーソナリティデータファイルの内容を読み込み
          if [ -f "radio-workflow/radio-personality-data.md" ]; then
            PERSONALITY_DATA=$(cat radio-workflow/radio-personality-data.md)
            echo "✅ パーソナリティデータを読み込みました"
          else
            PERSONALITY_DATA=""
            echo "::warning::パーソナリティデータファイルが見つかりません"
          fi
          
          # SSMLフォーマッターをコピー
          cp radio-workflow/ssml_formatter.js $WORK_DIR/
          
          # 開発進捗情報を後半用に分割
          DEV_REPORT='${{ inputs.development-report }}'
          HALF_LENGTH=$((${#DEV_REPORT} / 2))
          DEV_REPORT_PART2=$(echo "$DEV_REPORT" | cut -c$((HALF_LENGTH + 1))-)
          
          PROMPT="メイン後半台本を生成してください。

          パーソナリティ: $PERSONALITY_DATA
          進捗情報: $DEV_REPORT_PART2

          要件: 3分（900-1200文字）、時事ニュースや追加情報、リスナーメッセージ
          
          以下のJSONファイルを main_part2.json として現在のディレクトリに保存してください：
          {\"main_part2\": \"台本テキスト\"}
          
          **重要**: Writeツールを使用してファイルを確実に保存してください。"
          
          cd "$WORK_DIR" && npx @anthropic-ai/claude-code \
            --allowedTools "Write" \
            --max-turns 8 \
            --permission-mode "acceptEdits" \
            -p "$PROMPT"
          
          # 元のディレクトリに戻る
          cd - > /dev/null 2>&1 || cd /home/runner/work/kamuicode-workflow/kamuicode-workflow
          
          if [ -f "$WORK_DIR/main_part2.json" ]; then
            echo "📄 main_part2.json ファイルが存在"
            
            # JSONの検証
            if ! jq empty "$WORK_DIR/main_part2.json" 2>/dev/null; then
              echo "::error::main_part2.json が無効なJSONフォーマットです"
              echo "::error::ファイル内容:"
              cat "$WORK_DIR/main_part2.json" | head -10
              exit 1
            fi
            
            MAIN_PART2_TEXT=$(jq -r '.main_part2' "$WORK_DIR/main_part2.json")
            
            if [ -z "$MAIN_PART2_TEXT" ] || [ "$MAIN_PART2_TEXT" = "null" ]; then
              echo "::error::main_part2.json に 'main_part2' フィールドが見つかりません"
              echo "::error::JSONファイル内容:"
              cat "$WORK_DIR/main_part2.json"
              exit 1
            fi
            
            echo "📝 取得したテキスト（最初の100文字）: ${MAIN_PART2_TEXT:0:100}..."
            
            # SSMLフォーマッターを使用して処理
            echo "🎛️ SSMLフォーマット処理開始"
            cp radio-workflow/ssml_formatter.js $WORK_DIR/
            
            # SSMLフォーマッター実行（エラーハンドリング付き）
            FORMATTED_TEXT=$(cd $WORK_DIR && node -e "
              try {
                const SSMLFormatter = require('./ssml_formatter.js');
                const formatter = new SSMLFormatter();
                const text = process.argv[1];
                if (!text) {
                  console.error('Error: Empty text provided');
                  process.exit(1);
                }
                const preset = formatter.getPreset ? formatter.getPreset('normal') : {};
                const formatted = formatter.formatWithBreaks(text, preset);
                console.log(formatted);
              } catch (e) {
                console.error('Error in SSML formatting:', e.message);
                process.exit(1);
              }
            " "$MAIN_PART2_TEXT" 2>&1) || {
              echo "::error::SSMLフォーマッター実行エラー"
              echo "::error::エラー出力: $FORMATTED_TEXT"
              exit 1
            }
            
            # 固有名詞置き換え
            FINAL_TEXT=$(echo "$FORMATTED_TEXT" | sed 's/神威日報/かむいにっぽう/g' | sed 's/神威/カムイ/g')
            
            echo "script-main-part2<<EOF" >> $GITHUB_OUTPUT
            echo "$FINAL_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "✅ Main part2 script generated successfully with SSML formatting"
          else
            echo "::error::Main part2 script generation failed - main_part2.json ファイルが作成されませんでした"
            echo "::error::作業ディレクトリの内容:"
            ls -la "$WORK_DIR/" || echo "作業ディレクトリが存在しません"
            exit 1
          fi
          echo "::endgroup::"

  generate-jingle:
    runs-on: ubuntu-latest
    outputs:
      script-jingle: ${{ steps.planning.outputs.script-jingle }}
    steps:
      - name: Generate jingle script
        id: planning
        run: |
          echo "::group::📋 Jingle Script Generation"
          
          echo "script-jingle<<EOF" >> $GITHUB_OUTPUT
          echo "かむらじ" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Jingle script generated successfully"
          echo "::endgroup::"

  generate-ending:
    runs-on: ubuntu-latest
    outputs:
      script-ending: ${{ steps.planning.outputs.script-ending }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate ending script
        id: planning
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Ending Script Generation"
          
          WORK_DIR="radio-scripts"
          mkdir -p "$WORK_DIR"
          
          # パーソナリティデータファイルの内容を読み込み
          if [ -f "radio-workflow/radio-personality-data.md" ]; then
            PERSONALITY_DATA=$(cat radio-workflow/radio-personality-data.md)
            echo "✅ パーソナリティデータを読み込みました"
          else
            PERSONALITY_DATA=""
            echo "::warning::パーソナリティデータファイルが見つかりません"
          fi
          
          PROMPT="エンディング台本を生成してください。

          パーソナリティ: $PERSONALITY_DATA

          要件: 1分（300-400文字）、まとめと次回予告
          
          以下のJSONファイルを ending.json として現在のディレクトリに保存してください：
          {\"ending\": \"台本テキスト\"}
          
          **重要**: Writeツールを使用してファイルを確実に保存してください。"
          
          echo "🔍 Claude Code実行前のデバッグ情報:"
          echo "  現在のディレクトリ: $(pwd)"
          echo "  WORK_DIR: $WORK_DIR"
          echo "  WORK_DIRの存在確認: $(ls -ld "$WORK_DIR" 2>/dev/null || echo "存在しません")"
          echo "  WORK_DIR内の内容: $(ls -la "$WORK_DIR" 2>/dev/null || echo "空またはアクセス不可")"
          
          cd "$WORK_DIR" && echo "✅ ディレクトリ移動成功: $(pwd)" && npx @anthropic-ai/claude-code \
            --allowedTools "Write" \
            --max-turns 8 \
            --permission-mode "acceptEdits" \
            -p "$PROMPT"
          
          echo "🔍 Claude Code実行後のデバッグ情報:"
          echo "  現在のディレクトリ: $(pwd)"
          echo "  WORK_DIRの存在確認: $(ls -ld "$WORK_DIR" 2>/dev/null || echo "存在しません")"
          echo "  WORK_DIR内の内容: $(ls -la "$WORK_DIR" 2>/dev/null || echo "空またはアクセス不可")"
          echo "  ending.jsonの検索: $(find . -name "ending.json" 2>/dev/null || echo "見つかりません")"
          
          # 元のディレクトリに戻る
          cd - > /dev/null 2>&1 || cd /home/runner/work/kamuicode-workflow/kamuicode-workflow
          echo "  元のディレクトリに戻りました: $(pwd)"
          
          if [ -f "$WORK_DIR/ending.json" ]; then
            echo "📄 ending.json ファイルが存在"
            
            # JSONの検証
            if ! jq empty "$WORK_DIR/ending.json" 2>/dev/null; then
              echo "::error::ending.json が無効なJSONフォーマットです"
              echo "::error::ファイル内容:"
              cat "$WORK_DIR/ending.json" | head -10
              exit 1
            fi
            
            ENDING_TEXT=$(jq -r '.ending' "$WORK_DIR/ending.json")
            
            if [ -z "$ENDING_TEXT" ] || [ "$ENDING_TEXT" = "null" ]; then
              echo "::error::ending.json に 'ending' フィールドが見つかりません"
              echo "::error::JSONファイル内容:"
              cat "$WORK_DIR/ending.json"
              exit 1
            fi
            
            echo "📝 取得したテキスト（最初の100文字）: ${ENDING_TEXT:0:100}..."
            
            # SSMLフォーマッターを使用して処理
            echo "🎛️ SSMLフォーマット処理開始"
            cp radio-workflow/ssml_formatter.js $WORK_DIR/
            
            # SSMLフォーマッター実行（エラーハンドリング付き）
            FORMATTED_TEXT=$(cd $WORK_DIR && node -e "
              try {
                const SSMLFormatter = require('./ssml_formatter.js');
                const formatter = new SSMLFormatter();
                const text = process.argv[1];
                if (!text) {
                  console.error('Error: Empty text provided');
                  process.exit(1);
                }
                const preset = formatter.getPreset ? formatter.getPreset('normal') : {};
                const formatted = formatter.formatWithBreaks(text, preset);
                console.log(formatted);
              } catch (e) {
                console.error('Error in SSML formatting:', e.message);
                process.exit(1);
              }
            " "$ENDING_TEXT" 2>&1) || {
              echo "::error::SSMLフォーマッター実行エラー"
              echo "::error::エラー出力: $FORMATTED_TEXT"
              exit 1
            }
            
            # 固有名詞置き換え
            FINAL_TEXT=$(echo "$FORMATTED_TEXT" | sed 's/神威日報/かむいにっぽう/g' | sed 's/神威/カムイ/g')
            
            echo "script-ending<<EOF" >> $GITHUB_OUTPUT
            echo "$FINAL_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "✅ Ending script generated successfully with SSML formatting"
          else
            echo "::error::Ending script generation failed - ending.json ファイルが作成されませんでした"
            echo "::error::作業ディレクトリの内容:"
            ls -la "$WORK_DIR/" || echo "作業ディレクトリが存在しません"
            exit 1
          fi
          echo "::endgroup::"