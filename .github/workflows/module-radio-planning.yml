name: Radio Planning Module (Minimal)
on:
  workflow_call:
    inputs:
      development-report:
        required: true
        type: string
      topic-focus:
        required: false
        type: string
    outputs:
      script-opening:
        value: ${{ jobs.generate.outputs.script-opening }}
      script-main:
        value: ${{ jobs.generate.outputs.script-main }}
      script-ending:
        value: ${{ jobs.generate.outputs.script-ending }}
      voice-config:
        value: ${{ jobs.generate.outputs.voice-config }}

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      script-opening: ${{ steps.planning.outputs.script-opening }}
      script-main: ${{ steps.planning.outputs.script-main }}
      script-ending: ${{ steps.planning.outputs.script-ending }}
      voice-config: ${{ steps.planning.outputs.voice-config }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Copy SSML formatter
        run: |
          # SSMLフォーマッターをワーキングディレクトリにコピー
          cp radio-workflow/ssml_formatter.js ./ssml_formatter.js
          echo "✅ SSML formatter copied to working directory"
      
      - name: Generate radio scripts with Claude
        id: planning
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Radio Script Generation"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 作業ディレクトリ作成
          WORK_DIR="radio-scripts"
          mkdir -p "$WORK_DIR"
          
          # パーソナリティデータファイルの内容を読み込み
          if [ -f "radio-workflow/radio-personality-data.md" ]; then
            PERSONALITY_DATA=$(cat radio-workflow/radio-personality-data.md)
            echo "✅ パーソナリティデータを読み込みました"
          else
            PERSONALITY_DATA=""
            echo "::warning::パーソナリティデータファイルが見つかりません"
          fi
          
          # プロンプトの構築
          PROMPT="以下の内容でラジオ番組台本を生成し、JSONファイルに保存してください：

          【パーソナリティ設定】
          $PERSONALITY_DATA

          【開発進捗・最新情報】
          ${{ inputs.development-report }}

          【強調ポイント】
          ${{ inputs.topic-focus || 'なし' }}

          【要件】
          - オープニング: 1分（明るい挨拶、必ず今日の日付と番組名を紹介）約300-400文字
          - メイン: 2分（内容を分かりやすく解説）約600-800文字  
          - エンディング: 1分（まとめと次回予告）約300-400文字
          - パーソナリティ: radio-personality-data.mdの設定に従う
          - 一人称は「僕」、口癖や話し方の特徴を必ず反映
          - **重要**: オープニング・エンディングは1分（300-400文字）、メインは2分（600-800文字）で生成し、API制限の3000文字以内に収めてください

          **重要**: 以下のJSONを \"$WORK_DIR/scripts.json\" ファイルに保存してください：
          {
            \"opening\": \"オープニング台本（300-400文字程度）\",
            \"main\": \"メイン台本（600-800文字程度）\", 
            \"ending\": \"エンディング台本（300-400文字程度）\"
          }"
          
          echo "🚀 Starting Radio Script Generation..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行（リトライ付き文字数制限チェック）
          for attempt in {1..5}; do
            echo "🎯 Claude Code CLI実行中（試行 $attempt/5）..."
            
            if npx @anthropic-ai/claude-code \
              --allowedTools "Write,Edit" \
              --max-turns 10 \
              --verbose \
              --permission-mode "acceptEdits" \
              -p "$PROMPT"; then
              
              # 生成された台本の文字数チェック
              if [ -f "$WORK_DIR/scripts.json" ] && jq empty "$WORK_DIR/scripts.json" 2>/dev/null; then
                echo "✅ JSONファイル生成成功"
                
                # 各セクションの文字数チェック
                OPENING_LENGTH=$(jq -r '.opening' "$WORK_DIR/scripts.json" | wc -c)
                MAIN_LENGTH=$(jq -r '.main' "$WORK_DIR/scripts.json" | wc -c)
                ENDING_LENGTH=$(jq -r '.ending' "$WORK_DIR/scripts.json" | wc -c)
                
                echo "📏 文字数チェック: opening=$OPENING_LENGTH, main=$MAIN_LENGTH, ending=$ENDING_LENGTH"
                
                if [ $OPENING_LENGTH -le 3000 ] && [ $MAIN_LENGTH -le 3000 ] && [ $ENDING_LENGTH -le 3000 ]; then
                  echo "✅ 全セクションが3000文字以内です"
                  break
                else
                  echo "::warning::⚠️ 一部セクションが3000文字を超えています（試行 $attempt/5）"
                  PROMPT="前回生成した台本が長すぎました。各セクションを3000文字以内で短く生成し直してください。JSONを $WORK_DIR/scripts.json に保存してください。"
                fi
              else
                echo "::warning::⚠️ JSONファイル生成失敗（試行 $attempt/5）"
              fi
            else
              echo "::warning::⚠️ Claude Code実行失敗（試行 $attempt/5）"
            fi
            
            if [ $attempt -eq 5 ]; then
              echo "::error::❌ 5回試行しても適切な台本を生成できませんでした"
              exit 1
            fi
            
            sleep 5
          done
          
          # 生成されたJSONファイルの確認と読み込み
          if [ -f "$WORK_DIR/scripts.json" ]; then
            echo "✅ Scripts JSON file generated"
            cat "$WORK_DIR/scripts.json"
            
            # JSONから各セクションを抽出
            if jq empty "$WORK_DIR/scripts.json" 2>/dev/null; then
              echo "✅ Valid JSON response received"
              
              # SSML処理を追加
              echo "::group::🎵 SSML Processing"
              echo "🔄 Applying SSML formatting to all scripts..."
              
              # 各セクションにSSMLフォーマットを適用
              OPENING_TEXT=$(jq -r '.opening' "$WORK_DIR/scripts.json")
              MAIN_TEXT=$(jq -r '.main' "$WORK_DIR/scripts.json")
              ENDING_TEXT=$(jq -r '.ending' "$WORK_DIR/scripts.json")
              
              # 各セクションをファイルに保存してから処理（クォート問題を回避）
              echo "$OPENING_TEXT" > temp_opening.txt
              echo "$MAIN_TEXT" > temp_main.txt
              echo "$ENDING_TEXT" > temp_ending.txt
              
              # Node.jsでSSMLフォーマッターを実行（stdin使用でクォート問題を回避）
              OPENING_SSML=$(cat temp_opening.txt | node -e "
                const SSMLFormatter = require('./ssml_formatter.js');
                const formatter = new SSMLFormatter();
                let text = '';
                process.stdin.on('data', chunk => text += chunk);
                process.stdin.on('end', () => {
                  const result = formatter.formatWithBreaks(text.trim(), formatter.getPreset('normal'));
                  console.log(result);
                });
              ")
              
              MAIN_SSML=$(cat temp_main.txt | node -e "
                const SSMLFormatter = require('./ssml_formatter.js');
                const formatter = new SSMLFormatter();
                let text = '';
                process.stdin.on('data', chunk => text += chunk);
                process.stdin.on('end', () => {
                  const result = formatter.formatWithBreaks(text.trim(), formatter.getPreset('normal'));
                  console.log(result);
                });
              ")
              
              ENDING_SSML=$(cat temp_ending.txt | node -e "
                const SSMLFormatter = require('./ssml_formatter.js');
                const formatter = new SSMLFormatter();
                let text = '';
                process.stdin.on('data', chunk => text += chunk);
                process.stdin.on('end', () => {
                  const result = formatter.formatWithBreaks(text.trim(), formatter.getPreset('normal'));
                  console.log(result);
                });
              ")
              
              # 一時ファイルを削除
              rm -f temp_opening.txt temp_main.txt temp_ending.txt
              
              echo "✅ SSML formatting completed"
              echo "📏 Opening SSML length: ${#OPENING_SSML}"
              echo "📏 Main SSML length: ${#MAIN_SSML}"  
              echo "📏 Ending SSML length: ${#ENDING_SSML}"
              echo "::endgroup::"
              
              # SSML版をGitHub Outputsに設定（マルチライン対応）
              {
                echo "script-opening<<EOF"
                echo "$OPENING_SSML"
                echo "EOF"
              } >> $GITHUB_OUTPUT
              
              {
                echo "script-main<<EOF"
                echo "$MAIN_SSML"
                echo "EOF"
              } >> $GITHUB_OUTPUT
              
              {
                echo "script-ending<<EOF"
                echo "$ENDING_SSML"
                echo "EOF"
              } >> $GITHUB_OUTPUT
            else
              echo "::warning::Invalid JSON format, using fallback scripts"
              echo "script-opening=こんにちは、神威日報ラジオです。申し訳ございません、システムにエラーが発生しました。" >> $GITHUB_OUTPUT
              echo "script-main=台本生成システムに不具合が起きており、本日の放送をお届けできません。ご迷惑をおかけして大変申し訳ございません。しばらく間をおいてから、また聞きに来ていただけると嬉しいです。" >> $GITHUB_OUTPUT
              echo "script-ending=復旧作業を進めておりますので、今後ともよろしくお願いいたします。神威日報ラジオでした。" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::Scripts JSON file not found, using fallback scripts"
            echo "script-opening=こんにちは、神威日報ラジオです。申し訳ございません、システムにエラーが発生しました。" >> $GITHUB_OUTPUT
            echo "script-main=台本生成システムに不具合が起きており、本日の放送をお届けできません。ご迷惑をおかけして大変申し訳ございません。しばらく間をおいてから、また聞きに来ていただけると嬉しいです。" >> $GITHUB_OUTPUT
            echo "script-ending=復旧作業を進めておりますので、今後ともよろしくお願いいたします。神威日報ラジオでした。" >> $GITHUB_OUTPUT
          fi
          
          echo 'voice-config={"gender":"female","age":"20s"}' >> $GITHUB_OUTPUT
          
          # 音声ID選択とUSE_UUID.mdファイル作成
          echo "::group::🎲 音声ID選択"
          
          # UUID.mdファイルから音声IDリストを読み込み
          if [ -f "radio-workflow/UUID.md" ]; then
            echo "✅ UUID.mdファイルから音声IDを読み込みます"
            # 空行を除いて配列に読み込み
            readarray -t VOICE_IDS < <(grep -v '^$' radio-workflow/UUID.md)
            echo "📝 読み込まれた音声ID数: ${#VOICE_IDS[@]}"
            for i in "${!VOICE_IDS[@]}"; do
              echo "  [$i] ${VOICE_IDS[$i]}"
            done
          else
            echo "::error::❌ UUID.mdファイルが見つかりません"
            exit 1
          fi
          
          # ランダムに音声IDを選択
          if [ ${#VOICE_IDS[@]} -eq 0 ]; then
            echo "::error::❌ 音声IDが見つかりません"
            exit 1
          fi
          RANDOM_INDEX=$((RANDOM % ${#VOICE_IDS[@]}))
          SELECTED_VOICE_ID="${VOICE_IDS[$RANDOM_INDEX]}"
          
          # 現在の日付を取得
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          echo "🎯 選択された音声ID: $SELECTED_VOICE_ID"
          echo "📅 日付: $CURRENT_DATE"
          
          # USE_UUID.mdファイルを作成
          mkdir -p radio-workflow/temp
          echo "# Selected Voice ID for Radio Production" > radio-workflow/temp/USE_UUID.md
          echo "" >> radio-workflow/temp/USE_UUID.md
          echo "Date: $CURRENT_DATE" >> radio-workflow/temp/USE_UUID.md
          echo "Voice UUID: $SELECTED_VOICE_ID" >> radio-workflow/temp/USE_UUID.md
          
          echo "✅ USE_UUID.mdファイルを作成しました"
          cat radio-workflow/temp/USE_UUID.md
          
          echo "::endgroup::"
      
      - name: Upload voice UUID file
        uses: actions/upload-artifact@v4
        with:
          name: voice-uuid
          path: radio-workflow/temp/USE_UUID.md
          retention-days: 1