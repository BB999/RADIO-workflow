name: Radio Planning Module - Split Version (Minimal)
on:
  workflow_call:
    inputs:
      development-report:
        required: false
        type: string
      topic-focus:
        required: false
        type: string
      processed-summary:
        description: 'Gemini CLIで処理済みの構造化されたサマリー'
        required: false
        type: string
      use-processed-input:
        description: '処理済み入力を使用するかどうか'
        required: false
        type: boolean
        default: false
    outputs:
      script-opening:
        value: ${{ jobs.generate-part1.outputs.script-opening }}
      script-main:
        value: ${{ jobs.generate-part1.outputs.script-main }}
      script-main-part2:
        value: ${{ jobs.generate-part2.outputs.script-main-part2 }}
      script-jingle:
        value: ${{ jobs.generate-part1.outputs.script-jingle }}
      script-ending:
        value: ${{ jobs.generate-part2.outputs.script-ending }}
      voice-config:
        value: ${{ jobs.generate-part1.outputs.voice-config }}

jobs:
  generate-part1:
    runs-on: ubuntu-latest
    outputs:
      script-opening: ${{ steps.planning-part1.outputs.script-opening }}
      script-main: ${{ steps.planning-part1.outputs.script-main }}
      script-jingle: ${{ steps.planning-part1.outputs.script-jingle }}
      voice-config: ${{ steps.planning-part1.outputs.voice-config }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate radio scripts part 1 with Claude
        id: planning-part1
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Radio Script Generation Part 1"
          
          WORK_DIR="radio-scripts"
          mkdir -p "$WORK_DIR"
          
          # 開発進捗情報を前半用に分割
          DEV_REPORT='${{ inputs.development-report }}'
          HALF_LENGTH=$((${#DEV_REPORT} / 2))
          DEV_REPORT_PART1=$(echo "$DEV_REPORT" | cut -c1-$HALF_LENGTH)
          
          # プロンプト作成
          PROMPT="ラジオ番組台本のオープニング、メイン前半、ジングルを生成してください。

          開発進捗情報: $DEV_REPORT_PART1
          強調ポイント: ${{ inputs.topic-focus }}

          要件:
          - オープニング: 1分（300-400文字）明るい挨拶と番組紹介
          - メイン前半: 3分（900-1200文字）開発進捗の主要ポイントを解説
          - ジングル: 「かむらじ」のみ
          
          以下のJSONを $WORK_DIR/part1.json に保存してください：
          {
            \"opening\": \"オープニング台本\",
            \"main\": \"メイン前半台本\", 
            \"jingle\": \"かむらじ\"
          }"
          
          # Claude Code実行
          npx @anthropic-ai/claude-code \
            --allowedTools "Write,Edit" \
            --max-turns 5 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT"
          
          # 結果を出力に設定
          if [ -f "$WORK_DIR/part1.json" ] && jq empty "$WORK_DIR/part1.json" 2>/dev/null; then
            OPENING_TEXT=$(jq -r '.opening' "$WORK_DIR/part1.json")
            MAIN_TEXT=$(jq -r '.main' "$WORK_DIR/part1.json") 
            JINGLE_TEXT=$(jq -r '.jingle' "$WORK_DIR/part1.json")
            
            echo "script-opening<<EOF" >> $GITHUB_OUTPUT
            echo "$OPENING_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "script-main<<EOF" >> $GITHUB_OUTPUT
            echo "$MAIN_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "script-jingle<<EOF" >> $GITHUB_OUTPUT
            echo "$JINGLE_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "voice-config=default" >> $GITHUB_OUTPUT
            echo "✅ Part 1 scripts generated successfully"
          else
            echo "::error::Part 1 script generation failed"
            exit 1
          fi
          echo "::endgroup::"
      
      - name: Upload part1 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: radio-scripts-part1
          path: radio-scripts/part1.json
          retention-days: 1

  generate-part2:
    runs-on: ubuntu-latest
    outputs:
      script-main-part2: ${{ steps.planning-part2.outputs.script-main-part2 }}
      script-ending: ${{ steps.planning-part2.outputs.script-ending }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate radio scripts part 2 with Claude
        id: planning-part2
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Radio Script Generation Part 2"
          
          WORK_DIR="radio-scripts"
          mkdir -p "$WORK_DIR"
          
          # 開発進捗情報を後半用に分割
          DEV_REPORT='${{ inputs.development-report }}'
          HALF_LENGTH=$((${#DEV_REPORT} / 2))
          DEV_REPORT_PART2=$(echo "$DEV_REPORT" | cut -c$((HALF_LENGTH + 1))-)
          
          # プロンプト作成
          PROMPT="ラジオ番組台本のメイン後半とエンディングを生成してください。

          開発進捗情報: $DEV_REPORT_PART2
          強調ポイント: ${{ inputs.topic-focus }}

          要件:
          - メイン後半: 3分（900-1200文字）時事ニュースや追加情報、リスナーへのメッセージ
          - エンディング: 1分（300-400文字）まとめと次回予告
          
          以下のJSONを $WORK_DIR/part2.json に保存してください：
          {
            \"main_part2\": \"メイン後半台本\",
            \"ending\": \"エンディング台本\"
          }"
          
          # Claude Code実行
          npx @anthropic-ai/claude-code \
            --allowedTools "Write,Edit" \
            --max-turns 5 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT"
          
          # 結果を出力に設定
          if [ -f "$WORK_DIR/part2.json" ] && jq empty "$WORK_DIR/part2.json" 2>/dev/null; then
            MAIN_PART2_TEXT=$(jq -r '.main_part2' "$WORK_DIR/part2.json")
            ENDING_TEXT=$(jq -r '.ending' "$WORK_DIR/part2.json")
            
            echo "script-main-part2<<EOF" >> $GITHUB_OUTPUT
            echo "$MAIN_PART2_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "script-ending<<EOF" >> $GITHUB_OUTPUT
            echo "$ENDING_TEXT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "✅ Part 2 scripts generated successfully"
          else
            echo "::error::Part 2 script generation failed"
            exit 1
          fi
          echo "::endgroup::"
      
      - name: Upload part2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: radio-scripts-part2
          path: radio-scripts/part2.json
          retention-days: 1