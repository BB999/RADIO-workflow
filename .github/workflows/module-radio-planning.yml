name: Radio Planning Module - Split Jobs
on:
  workflow_call:
    inputs:
      development-report:
        required: true
        type: string
      tech-news:
        required: true
        type: string
      evening-report:
        required: true
        type: string
      topic-focus:
        required: false
        type: string
    outputs:
      script-opening:
        value: ${{ jobs.script-opening.outputs.script-text }}
      script-main:
        value: ${{ jobs.script-main.outputs.script-text }}
      script-main2:
        value: ${{ jobs.script-main2.outputs.script-text }}
      script-main3:
        value: ${{ jobs.script-main3.outputs.script-text }}
      script-ending:
        value: ${{ jobs.script-ending.outputs.script-text }}
      voice-config:
        value: ${{ jobs.planning-setup.outputs.voice-config }}

jobs:
  planning-setup:
    runs-on: ubuntu-latest
    outputs:
      personality-data: ${{ steps.setup.outputs.personality-data }}
      voice-config: ${{ steps.setup.outputs.voice-config }}
      voice-id: ${{ steps.setup.outputs.voice-id }}
      selected-music: ${{ steps.setup.outputs.selected-music }}
      artist-name: ${{ steps.setup.outputs.artist-name }}
      song-name: ${{ steps.setup.outputs.song-name }}
      news-content: ${{ steps.setup.outputs.news-content }}
      random-element: ${{ steps.setup.outputs.random-element }}
      opening-pattern: ${{ steps.setup.outputs.opening-pattern }}
      ending-pattern: ${{ steps.setup.outputs.ending-pattern }}
      character-mode: ${{ steps.setup.outputs.character-mode }}
      music-info: ${{ steps.setup.outputs.music-info }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Setup basic radio production data
        id: setup
        run: |
          echo "📋 Radio Production Setup"
          
          # パーソナリティデータファイルの内容を読み込み
          if [ -f "radio-workflow/radio-personality-data.md" ]; then
            PERSONALITY_DATA=$(cat radio-workflow/radio-personality-data.md)
            echo "personality-data<<EOF" >> $GITHUB_OUTPUT
            echo "$PERSONALITY_DATA" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "personality-data=" >> $GITHUB_OUTPUT
          fi
          
          # 音楽ファイルをランダム選択
          if [ -d "radio-workflow/music" ]; then
            SELECTED_MUSIC_FILE=$(ls radio-workflow/music/*.mp3 | shuf -n 1 | xargs basename)
            if [[ "$SELECTED_MUSIC_FILE" =~ ^(.+)・(.+)\.mp3$ ]]; then
              SONG_NAME="${BASH_REMATCH[1]}"
              ARTIST_NAME="${BASH_REMATCH[2]}"
            else
              SONG_NAME=""
              ARTIST_NAME=""
            fi
          else
            SELECTED_MUSIC_FILE="unknown.mp3"
            SONG_NAME=""
            ARTIST_NAME=""
          fi
          
          # 簡易ニュースコンテンツ
          NEWS_CONTENT="【天気予報】東京の天気: 晴れ 最高気温: 20℃【最近の話題】AI技術の進化が話題"
          
          # ランダム要素の生成
          RANDOM_ELEMENTS=("今日のプログラミングあるある話" "開発者の変な癖エピソード" "バグとの格闘記")
          RANDOM_ELEMENT_INDEX=$((RANDOM % ${#RANDOM_ELEMENTS[@]}))
          SELECTED_RANDOM_ELEMENT="${RANDOM_ELEMENTS[$RANDOM_ELEMENT_INDEX]}"
          
          OPENING_PATTERNS=("元気いっぱいハイテンション" "ちょっと眠そうな感じから徐々にテンション上がる" "謎のテンションで始まる")
          OPENING_PATTERN_INDEX=$((RANDOM % ${#OPENING_PATTERNS[@]}))
          SELECTED_OPENING_PATTERN="${OPENING_PATTERNS[$OPENING_PATTERN_INDEX]}"
          
          ENDING_PATTERNS=("感動的に締める（でもちょっとズレてる）" "急にテンション下がって締める" "最後にダジャレで締める")
          ENDING_PATTERN_INDEX=$((RANDOM % ${#ENDING_PATTERNS[@]}))
          SELECTED_ENDING_PATTERN="${ENDING_PATTERNS[$ENDING_PATTERN_INDEX]}"
          
          CHARACTER_MODES=("いつも通り" "ちょっと関西弁混じり" "やたら例え話が多い")
          CHARACTER_MODE_INDEX=$((RANDOM % ${#CHARACTER_MODES[@]}))
          SELECTED_CHARACTER_MODE="${CHARACTER_MODES[$CHARACTER_MODE_INDEX]}"
          
          # 楽曲情報の設定
          if [ -n "$ARTIST_NAME" ] && [ -n "$SONG_NAME" ]; then
            MUSIC_INFO="- アーティスト: $ARTIST_NAME - 楽曲名: $SONG_NAME"
          else
            MUSIC_INFO="- 楽曲: $SELECTED_MUSIC_FILE（詳細不明）"
          fi
          
          # 全セクションをGitHub Outputsに設定
          echo "selected-music=$SELECTED_MUSIC_FILE" >> $GITHUB_OUTPUT
          echo "artist-name=$ARTIST_NAME" >> $GITHUB_OUTPUT
          echo "song-name=$SONG_NAME" >> $GITHUB_OUTPUT
          echo "news-content=$NEWS_CONTENT" >> $GITHUB_OUTPUT
          echo "random-element=$SELECTED_RANDOM_ELEMENT" >> $GITHUB_OUTPUT
          echo "opening-pattern=$SELECTED_OPENING_PATTERN" >> $GITHUB_OUTPUT
          echo "ending-pattern=$SELECTED_ENDING_PATTERN" >> $GITHUB_OUTPUT
          echo "character-mode=$SELECTED_CHARACTER_MODE" >> $GITHUB_OUTPUT
          echo "music-info=$MUSIC_INFO" >> $GITHUB_OUTPUT
          
          echo 'voice-config={"gender":"female","age":"20s"}' >> $GITHUB_OUTPUT
          
          # 音声ID選択とUSE_UUID.mdファイル作成
          echo "::group::🎲 音声ID選択"
          
          # UUID.mdファイルから音声IDリストを読み込み
          if [ -f "radio-workflow/UUID.md" ]; then
            echo "✅ UUID.mdファイルから音声IDを読み込みます"
            # 空行を除いて配列に読み込み
            readarray -t VOICE_IDS < <(grep -v '^$' radio-workflow/UUID.md)
            echo "📝 読み込まれた音声ID数: ${#VOICE_IDS[@]}"
            for i in "${!VOICE_IDS[@]}"; do
              echo "  [$i] ${VOICE_IDS[$i]}"
            done
          else
            echo "::error::❌ UUID.mdファイルが見つかりません"
            exit 1
          fi
          
          # ランダムに音声IDを選択
          if [ ${#VOICE_IDS[@]} -eq 0 ]; then
            echo "::error::❌ 音声IDが見つかりません"
            exit 1
          fi
          RANDOM_INDEX=$((RANDOM % ${#VOICE_IDS[@]}))
          SELECTED_VOICE_ID="${VOICE_IDS[$RANDOM_INDEX]}"
          
          echo "::endgroup::"
          
          # 現在の日付を取得
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          echo "🎯 選択された音声ID: $SELECTED_VOICE_ID"
          echo "📅 日付: $CURRENT_DATE"
          
          # USE_UUID.mdファイルを作成
          mkdir -p radio-workflow/temp
          echo "# Selected Voice ID and Music for Radio Production" > radio-workflow/temp/USE_UUID.md
          echo "" >> radio-workflow/temp/USE_UUID.md
          echo "Date: $CURRENT_DATE" >> radio-workflow/temp/USE_UUID.md
          echo "Voice UUID: $SELECTED_VOICE_ID" >> radio-workflow/temp/USE_UUID.md
          echo "Selected Music File: $SELECTED_MUSIC_FILE" >> radio-workflow/temp/USE_UUID.md
          echo "Artist: $ARTIST_NAME" >> radio-workflow/temp/USE_UUID.md
          echo "Song: $SONG_NAME" >> radio-workflow/temp/USE_UUID.md
          
          echo "voice-id=$SELECTED_VOICE_ID" >> $GITHUB_OUTPUT
          
          echo "✅ USE_UUID.mdファイルを作成しました"
          cat radio-workflow/temp/USE_UUID.md
      
      - name: Upload voice UUID file
        uses: actions/upload-artifact@v4
        with:
          name: voice-uuid
          path: radio-workflow/temp/USE_UUID.md
          retention-days: 1

  preprocess-development-report:
    needs: planning-setup
    runs-on: ubuntu-latest
    outputs:
      processed-report: ${{ steps.process.outputs.processed-report }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Process development report in stages
        id: process
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔄 development-report段階的処理開始"
          
          # 入力データの長さをチェック
          INPUT_TEXT="${{ inputs.development-report }}"
          INPUT_LENGTH=$(echo "$INPUT_TEXT" | wc -c)
          echo "📏 入力データ長: ${INPUT_LENGTH}文字"
          
          # 文字数が1000文字以下なら直接使用
          if [ "$INPUT_LENGTH" -le 1000 ]; then
            echo "✅ 短いデータのため直接使用します"
            PROCESSED_REPORT="$INPUT_TEXT"
          else
            echo "⚡ 長いデータのため段階的処理を実行します"
            
            # データを2つに分割（改行で分割）
            echo "$INPUT_TEXT" > temp_full.txt
            TOTAL_LINES=$(wc -l < temp_full.txt)
            HALF_LINES=$((TOTAL_LINES / 2))
            
            head -n "$HALF_LINES" temp_full.txt > temp_part1.txt
            tail -n +"$((HALF_LINES + 1))" temp_full.txt > temp_part2.txt
            
            echo "📂 パート1 (${HALF_LINES}行):"
            head -3 temp_part1.txt
            echo "..."
            echo "📂 パート2 ($((TOTAL_LINES - HALF_LINES))行):"
            head -3 temp_part2.txt
            echo "..."
            
            # パート1を要約
            echo "🤖 パート1要約開始"
            cat > part1_prompt.txt << 'PROMPT_EOF'
          以下の神威アプリ開発進捗情報を、ラジオ台本用に1000文字以内で要約してください。
          重要な機能追加、バグ修正、技術実装の要点のみを含めてください：
          
          PROMPT_EOF
            cat temp_part1.txt >> part1_prompt.txt
            
            SUMMARY1=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < part1_prompt.txt) || {
              echo "::error::パート1要約でエラーが発生しました"
              exit 1
            }
            
            echo "✅ パート1要約完了 ($(echo "$SUMMARY1" | wc -c)文字)"
            
            # パート2を要約
            echo "🤖 パート2要約開始"
            cat > part2_prompt.txt << 'PROMPT_EOF'
          以下の神威アプリ開発進捗情報を、ラジオ台本用に1000文字以内で要約してください。
          重要な機能追加、バグ修正、技術実装の要点のみを含めてください：
          
          PROMPT_EOF
            cat temp_part2.txt >> part2_prompt.txt
            
            SUMMARY2=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < part2_prompt.txt) || {
              echo "::error::パート2要約でエラーが発生しました"
              exit 1
            }
            
            echo "✅ パート2要約完了 ($(echo "$SUMMARY2" | wc -c)文字)"
            
            # 2つの要約を統合
            echo "🔀 要約統合開始"
            cat > merge_prompt.txt << 'PROMPT_EOF'
          以下2つの神威アプリ開発進捗要約を、ラジオ台本用に1000文字以内で統合してください。
          重複を避け、最も重要なポイントを含めてください：
          
          【要約1】
          PROMPT_EOF
            echo "$SUMMARY1" >> merge_prompt.txt
            echo "" >> merge_prompt.txt
            echo "【要約2】" >> merge_prompt.txt
            echo "$SUMMARY2" >> merge_prompt.txt
            
            PROCESSED_REPORT=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < merge_prompt.txt) || {
              echo "::error::要約統合でエラーが発生しました"
              exit 1
            }
            
            echo "✅ 要約統合完了 ($(echo "$PROCESSED_REPORT" | wc -c)文字)"
            
            # 一時ファイルをクリーンアップ
            rm -f temp_*.txt *_prompt.txt
          fi
          
          echo "📝 最終処理結果:"
          echo "$PROCESSED_REPORT"
          
          {
            echo "processed-report<<EOF"
            echo "$PROCESSED_REPORT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  preprocess-tech-news:
    needs: planning-setup
    runs-on: ubuntu-latest
    outputs:
      processed-tech-news: ${{ steps.process.outputs.processed-tech-news }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Process tech news in stages
        id: process
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔄 tech-news段階的処理開始"
          
          # 入力データの長さをチェック
          INPUT_TEXT="${{ inputs.tech-news }}"
          INPUT_LENGTH=$(echo "$INPUT_TEXT" | wc -c)
          echo "📏 入力データ長: ${INPUT_LENGTH}文字"
          
          # 文字数が1000文字以下なら直接使用
          if [ "$INPUT_LENGTH" -le 1000 ]; then
            echo "✅ 短いデータのため直接使用します"
            PROCESSED_TECH_NEWS="$INPUT_TEXT"
          else
            echo "⚡ 長いデータのため段階的処理を実行します"
            
            # データを2つに分割（改行で分割）
            echo "$INPUT_TEXT" > temp_tech_full.txt
            TOTAL_LINES=$(wc -l < temp_tech_full.txt)
            HALF_LINES=$((TOTAL_LINES / 2))
            
            head -n "$HALF_LINES" temp_tech_full.txt > temp_tech_part1.txt
            tail -n +"$((HALF_LINES + 1))" temp_tech_full.txt > temp_tech_part2.txt
            
            echo "📂 パート1 (${HALF_LINES}行):"
            head -3 temp_tech_part1.txt
            echo "..."
            echo "📂 パート2 ($((TOTAL_LINES - HALF_LINES))行):"
            head -3 temp_tech_part2.txt
            echo "..."
            
            # パート1を要約
            echo "🤖 パート1要約開始"
            cat > tech_part1_prompt.txt << 'PROMPT_EOF'
          以下のテックニュース情報を、ラジオ台本用に1000文字以内で要約してください。
          重要なニュース、技術動向、業界情報の要点のみを含めてください：
          
          PROMPT_EOF
            cat temp_tech_part1.txt >> tech_part1_prompt.txt
            
            SUMMARY1=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < tech_part1_prompt.txt) || {
              echo "::error::パート1要約でエラーが発生しました"
              exit 1
            }
            
            echo "✅ パート1要約完了 ($(echo "$SUMMARY1" | wc -c)文字)"
            
            # パート2を要約
            echo "🤖 パート2要約開始"
            cat > tech_part2_prompt.txt << 'PROMPT_EOF'
          以下のテックニュース情報を、ラジオ台本用に1000文字以内で要約してください。
          重要なニュース、技術動向、業界情報の要点のみを含めてください：
          
          PROMPT_EOF
            cat temp_tech_part2.txt >> tech_part2_prompt.txt
            
            SUMMARY2=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < tech_part2_prompt.txt) || {
              echo "::error::パート2要約でエラーが発生しました"
              exit 1
            }
            
            echo "✅ パート2要約完了 ($(echo "$SUMMARY2" | wc -c)文字)"
            
            # 2つの要約を統合
            echo "🔀 要約統合開始"
            cat > tech_merge_prompt.txt << 'PROMPT_EOF'
          以下2つのテックニュース要約を、ラジオ台本用に1000文字以内で統合してください。
          重複を避け、最も重要なポイントを含めてください：
          
          【要約1】
          PROMPT_EOF
            echo "$SUMMARY1" >> tech_merge_prompt.txt
            echo "" >> tech_merge_prompt.txt
            echo "【要約2】" >> tech_merge_prompt.txt
            echo "$SUMMARY2" >> tech_merge_prompt.txt
            
            PROCESSED_TECH_NEWS=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < tech_merge_prompt.txt) || {
              echo "::error::要約統合でエラーが発生しました"
              exit 1
            }
            
            echo "✅ 要約統合完了 ($(echo "$PROCESSED_TECH_NEWS" | wc -c)文字)"
            
            # 一時ファイルをクリーンアップ
            rm -f temp_tech_*.txt tech_*_prompt.txt
          fi
          
          echo "📝 最終処理結果:"
          echo "$PROCESSED_TECH_NEWS"
          
          {
            echo "processed-tech-news<<EOF"
            echo "$PROCESSED_TECH_NEWS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  preprocess-evening-report:
    needs: planning-setup
    runs-on: ubuntu-latest
    outputs:
      processed-evening-report: ${{ steps.process.outputs.processed-evening-report }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Process evening report in stages
        id: process
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🔄 evening-report段階的処理開始"
          
          # 入力データの長さをチェック
          INPUT_TEXT="${{ inputs.evening-report }}"
          INPUT_LENGTH=$(echo "$INPUT_TEXT" | wc -c)
          echo "📏 入力データ長: ${INPUT_LENGTH}文字"
          
          # 文字数が1000文字以下なら直接使用
          if [ "$INPUT_LENGTH" -le 1000 ]; then
            echo "✅ 短いデータのため直接使用します"
            PROCESSED_EVENING_REPORT="$INPUT_TEXT"
          else
            echo "⚡ 長いデータのため段階的処理を実行します"
            
            # データを2つに分割（改行で分割）
            echo "$INPUT_TEXT" > temp_evening_full.txt
            TOTAL_LINES=$(wc -l < temp_evening_full.txt)
            HALF_LINES=$((TOTAL_LINES / 2))
            
            head -n "$HALF_LINES" temp_evening_full.txt > temp_evening_part1.txt
            tail -n +"$((HALF_LINES + 1))" temp_evening_full.txt > temp_evening_part2.txt
            
            echo "📂 パート1 (${HALF_LINES}行):"
            head -3 temp_evening_part1.txt
            echo "..."
            echo "📂 パート2 ($((TOTAL_LINES - HALF_LINES))行):"
            head -3 temp_evening_part2.txt
            echo "..."
            
            # パート1を要約
            echo "🤖 パート1要約開始"
            cat > evening_part1_prompt.txt << 'PROMPT_EOF'
          以下の夜の神威日報情報を、ラジオ台本用に1000文字以内で要約してください。
          重要な開発進捗、実装詳細、技術的な気づきの要点のみを含めてください：
          
          PROMPT_EOF
            cat temp_evening_part1.txt >> evening_part1_prompt.txt
            
            SUMMARY1=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < evening_part1_prompt.txt) || {
              echo "::error::パート1要約でエラーが発生しました"
              exit 1
            }
            
            echo "✅ パート1要約完了 ($(echo "$SUMMARY1" | wc -c)文字)"
            
            # パート2を要約
            echo "🤖 パート2要約開始"
            cat > evening_part2_prompt.txt << 'PROMPT_EOF'
          以下の夜の神威日報情報を、ラジオ台本用に1000文字以内で要約してください。
          重要な開発進捗、実装詳細、技術的な気づきの要点のみを含めてください：
          
          PROMPT_EOF
            cat temp_evening_part2.txt >> evening_part2_prompt.txt
            
            SUMMARY2=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < evening_part2_prompt.txt) || {
              echo "::error::パート2要約でエラーが発生しました"
              exit 1
            }
            
            echo "✅ パート2要約完了 ($(echo "$SUMMARY2" | wc -c)文字)"
            
            # 2つの要約を統合
            echo "🔀 要約統合開始"
            cat > evening_merge_prompt.txt << 'PROMPT_EOF'
          以下2つの夜の神威日報要約を、ラジオ台本用に1000文字以内で統合してください。
          重複を避け、最も重要なポイントを含めてください：
          
          【要約1】
          PROMPT_EOF
            echo "$SUMMARY1" >> evening_merge_prompt.txt
            echo "" >> evening_merge_prompt.txt
            echo "【要約2】" >> evening_merge_prompt.txt
            echo "$SUMMARY2" >> evening_merge_prompt.txt
            
            PROCESSED_EVENING_REPORT=$(npx @anthropic-ai/claude-code \
              --allowedTools "none" \
              --max-turns 2 \
              < evening_merge_prompt.txt) || {
              echo "::error::要約統合でエラーが発生しました"
              exit 1
            }
            
            echo "✅ 要約統合完了 ($(echo "$PROCESSED_EVENING_REPORT" | wc -c)文字)"
            
            # 一時ファイルをクリーンアップ
            rm -f temp_evening_*.txt evening_*_prompt.txt
          fi
          
          echo "📝 最終処理結果:"
          echo "$PROCESSED_EVENING_REPORT"
          
          {
            echo "processed-evening-report<<EOF"
            echo "$PROCESSED_EVENING_REPORT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  script-opening:
    needs: [planning-setup, preprocess-development-report, preprocess-tech-news, preprocess-evening-report]
    runs-on: ubuntu-latest
    outputs:
      script-text: ${{ steps.generate.outputs.script-text }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Generate opening script
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎬 オープニング台本生成開始"
          
          # プロンプトファイルを作成
          cat > opening_prompt.txt << 'EOF'
          以下の設定でラジオのオープニング台本を生成してください：

          【パーソナリティ設定】
          ${{ needs.planning-setup.outputs.personality-data }}

          【今日のランダム要素】
          - オープニングスタイル: ${{ needs.planning-setup.outputs.opening-pattern }}
          - キャラクターモード: ${{ needs.planning-setup.outputs.character-mode }}
          - 特別トーク要素: ${{ needs.planning-setup.outputs.random-element }}

          【楽曲情報】
          ${{ needs.planning-setup.outputs.music-info }}

          【今日の内容概要（参考用）】
          - 開発進捗: ${{ needs.preprocess-development-report.outputs.processed-report }}
          - テックニュース: ${{ needs.preprocess-tech-news.outputs.processed-tech-news }}
          - 夜の振り返り: ${{ needs.preprocess-evening-report.outputs.processed-evening-report }}

          【要件】
          - 時間: 30秒（約200-250文字）
          - 内容: 明るい挨拶、今日の日付と番組名を紹介、楽曲紹介を含める
          - パーソナリティの口調や特徴を反映
          - 一人称は「僕」を使用

          重要: 生成したオープニング台本のテキストのみを出力してください（JSON形式ではなく、プレーンテキスト）。
          EOF

          # Claude Code実行
          OPENING_SCRIPT=$(npx @anthropic-ai/claude-code \
            --allowedTools "none" \
            --max-turns 3 \
            < opening_prompt.txt)

          # SSML処理
          if [ -f "radio-workflow/ssml_formatter.js" ]; then
            OPENING_SSML=$(echo "$OPENING_SCRIPT" | node -e "
              const SSMLFormatter = require('./radio-workflow/ssml_formatter.js');
              const formatter = new SSMLFormatter();
              let text = '';
              process.stdin.on('data', chunk => text += chunk);
              process.stdin.on('end', () => {
                const result = formatter.formatWithBreaks(text.trim(), formatter.getPreset('normal'));
                console.log(result);
              });
            ")
          else
            OPENING_SSML="$OPENING_SCRIPT"
          fi

          {
            echo "script-text<<EOF"
            echo "$OPENING_SSML"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  script-main:
    needs: [planning-setup, preprocess-development-report]
    runs-on: ubuntu-latest
    outputs:
      script-text: ${{ steps.generate.outputs.script-text }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Generate main script
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎬 メイン1台本生成開始"
          
          # プロンプトファイルを作成
          cat > main_prompt.txt << 'EOF'
          以下の設定でラジオのメイン1（昼の神威日報）台本を生成してください：

          【パーソナリティ設定】
          ${{ needs.planning-setup.outputs.personality-data }}

          【セクション内容】
          ${{ needs.preprocess-development-report.outputs.processed-report }}

          【強調ポイント】
          ${{ inputs.topic-focus || 'なし' }}

          【今日のランダム要素】
          - キャラクターモード: ${{ needs.planning-setup.outputs.character-mode }}
          - 特別トーク要素: ${{ needs.planning-setup.outputs.random-element }}

          【要件】
          - 時間: 50秒（約300-350文字）
          - 内容: 昼の神威日報の要点まとめ
          - パーソナリティの口調や特徴を反映
          - 一人称は「僕」を使用

          重要: 生成したメイン台本のテキストのみを出力してください（JSON形式ではなく、プレーンテキスト）。
          EOF

          # Claude Code実行
          MAIN_SCRIPT=$(npx @anthropic-ai/claude-code \
            --allowedTools "none" \
            --max-turns 3 \
            < main_prompt.txt)

          # SSML処理
          if [ -f "radio-workflow/ssml_formatter.js" ]; then
            MAIN_SSML=$(echo "$MAIN_SCRIPT" | node -e "
              const SSMLFormatter = require('./radio-workflow/ssml_formatter.js');
              const formatter = new SSMLFormatter();
              let text = '';
              process.stdin.on('data', chunk => text += chunk);
              process.stdin.on('end', () => {
                const result = formatter.formatWithBreaks(text.trim(), formatter.getPreset('normal'));
                console.log(result);
              });
            ")
          else
            MAIN_SSML="$MAIN_SCRIPT"
          fi

          {
            echo "script-text<<EOF"
            echo "$MAIN_SSML"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  script-main2:
    needs: [planning-setup, preprocess-tech-news]
    runs-on: ubuntu-latest
    outputs:
      script-text: ${{ steps.generate.outputs.script-text }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Generate main2 script
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎬 メイン2台本生成開始"
          
          # プロンプトファイルを作成
          cat > main2_prompt.txt << 'EOF'
          以下の設定でラジオのメイン2（テックニュース）台本を生成してください：

          【パーソナリティ設定】
          ${{ needs.planning-setup.outputs.personality-data }}

          【セクション内容】
          ${{ needs.preprocess-tech-news.outputs.processed-tech-news }}

          【今日のランダム要素】
          - キャラクターモード: ${{ needs.planning-setup.outputs.character-mode }}
          - 特別トーク要素: ${{ needs.planning-setup.outputs.random-element }}

          【要件】
          - 時間: 50秒（約300-350文字）
          - 内容: 元木さん厳選のテックニュースを速報番組のように紹介
          - ニューキャスターのようなマジマな口調（厳守）
          - 一人称は「僕」を使用

          重要: 生成したメイン2台本のテキストのみを出力してください（JSON形式ではなく、プレーンテキスト）。
          EOF

          # Claude Code実行
          MAIN2_SCRIPT=$(npx @anthropic-ai/claude-code \
            --allowedTools "none" \
            --max-turns 3 \
            < main2_prompt.txt)

          # SSML処理
          if [ -f "radio-workflow/ssml_formatter.js" ]; then
            MAIN2_SSML=$(echo "$MAIN2_SCRIPT" | node -e "
              const SSMLFormatter = require('./radio-workflow/ssml_formatter.js');
              const formatter = new SSMLFormatter();
              let text = '';
              process.stdin.on('data', chunk => text += chunk);
              process.stdin.on('end', () => {
                const result = formatter.formatWithBreaks(text.trim(), formatter.getPreset('normal'));
                console.log(result);
              });
            ")
          else
            MAIN2_SSML="$MAIN2_SCRIPT"
          fi

          {
            echo "script-text<<EOF"
            echo "$MAIN2_SSML"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  script-main3:
    needs: [planning-setup, preprocess-evening-report]
    runs-on: ubuntu-latest
    outputs:
      script-text: ${{ steps.generate.outputs.script-text }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Generate main3 script
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎬 メイン3台本生成開始"
          
          # プロンプトファイルを作成
          cat > main3_prompt.txt << 'EOF'
          以下の設定でラジオのメイン3（夜の神威日報）台本を生成してください：

          【パーソナリティ設定】
          ${{ needs.planning-setup.outputs.personality-data }}

          【セクション内容】
          ${{ needs.preprocess-evening-report.outputs.processed-evening-report }}

          【今日のランダム要素】
          - キャラクターモード: ${{ needs.planning-setup.outputs.character-mode }}
          - 特別トーク要素: ${{ needs.planning-setup.outputs.random-element }}

          【要件】
          - 時間: 50秒（約300-350文字）
          - 内容: 夜の神威日報の要点まとめ
          - パーソナリティの口調や特徴を反映
          - 一人称は「僕」を使用

          重要: 生成したメイン3台本のテキストのみを出力してください（JSON形式ではなく、プレーンテキスト）。
          EOF

          # Claude Code実行
          MAIN3_SCRIPT=$(npx @anthropic-ai/claude-code \
            --allowedTools "none" \
            --max-turns 3 \
            < main3_prompt.txt)

          # SSML処理
          if [ -f "radio-workflow/ssml_formatter.js" ]; then
            MAIN3_SSML=$(echo "$MAIN3_SCRIPT" | node -e "
              const SSMLFormatter = require('./radio-workflow/ssml_formatter.js');
              const formatter = new SSMLFormatter();
              let text = '';
              process.stdin.on('data', chunk => text += chunk);
              process.stdin.on('end', () => {
                const result = formatter.formatWithBreaks(text.trim(), formatter.getPreset('normal'));
                console.log(result);
              });
            ")
          else
            MAIN3_SSML="$MAIN3_SCRIPT"
          fi

          {
            echo "script-text<<EOF"
            echo "$MAIN3_SSML"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  script-ending:
    needs: [planning-setup, preprocess-development-report, preprocess-tech-news, preprocess-evening-report]
    runs-on: ubuntu-latest
    outputs:
      script-text: ${{ steps.generate.outputs.script-text }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Generate ending script
        id: generate
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "🎬 エンディング台本生成開始"
          
          # プロンプトファイルを作成
          cat > ending_prompt.txt << 'EOF'
          以下の設定でラジオのエンディング台本を生成してください：

          【パーソナリティ設定】
          ${{ needs.planning-setup.outputs.personality-data }}

          【今日のランダム要素】
          - エンディングスタイル: ${{ needs.planning-setup.outputs.ending-pattern }}
          - キャラクターモード: ${{ needs.planning-setup.outputs.character-mode }}

          【今日の内容概要（参考用）】
          - 開発進捗: ${{ needs.preprocess-development-report.outputs.processed-report }}
          - テックニュース: ${{ needs.preprocess-tech-news.outputs.processed-tech-news }}
          - 夜の振り返り: ${{ needs.preprocess-evening-report.outputs.processed-evening-report }}

          【要件】
          - 時間: 30秒（約200-250文字）
          - 内容: まとめと次回予告
          - パーソナリティの口調や特徴を反映
          - 一人称は「僕」を使用

          重要: 生成したエンディング台本のテキストのみを出力してください（JSON形式ではなく、プレーンテキスト）。
          EOF

          # Claude Code実行
          ENDING_SCRIPT=$(npx @anthropic-ai/claude-code \
            --allowedTools "none" \
            --max-turns 3 \
            < ending_prompt.txt)

          # SSML処理
          if [ -f "radio-workflow/ssml_formatter.js" ]; then
            ENDING_SSML=$(echo "$ENDING_SCRIPT" | node -e "
              const SSMLFormatter = require('./radio-workflow/ssml_formatter.js');
              const formatter = new SSMLFormatter();
              let text = '';
              process.stdin.on('data', chunk => text += chunk);
              process.stdin.on('end', () => {
                const result = formatter.formatWithBreaks(text.trim(), formatter.getPreset('normal'));
                console.log(result);
              });
            ")
          else
            ENDING_SSML="$ENDING_SCRIPT"
          fi

          {
            echo "script-text<<EOF"
            echo "$ENDING_SSML"
            echo "EOF"
          } >> $GITHUB_OUTPUT