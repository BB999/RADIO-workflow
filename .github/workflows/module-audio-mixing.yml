name: Audio Mixing Module (Minimal)
on:
  workflow_call:
    inputs:
      voice-opening:
        required: true
        type: string
      voice-main:
        required: true
        type: string
      voice-ending:
        required: true
        type: string
      bgm-opening:
        required: true
        type: string
      bgm-main:
        required: true
        type: string
      bgm-ending:
        required: true
        type: string
    outputs:
      final-audio:
        value: ${{ jobs.mix.outputs.url }}
      metadata:
        value: ${{ jobs.mix.outputs.metadata }}

jobs:
  mix:
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.mixing.outputs.final-file }}
      metadata: ${{ steps.mixing.outputs.metadata }}
    steps:
      - name: Download voice-opening artifact
        uses: actions/download-artifact@v4
        with:
          name: voice-opening
          path: artifacts/voice-opening
      
      - name: Download voice-main artifact
        uses: actions/download-artifact@v4
        with:
          name: voice-main
          path: artifacts/voice-main
      
      - name: Download voice-ending artifact
        uses: actions/download-artifact@v4
        with:
          name: voice-ending
          path: artifacts/voice-ending
      
      - name: Download bgm-opening artifact
        uses: actions/download-artifact@v4
        with:
          name: bgm-opening
          path: artifacts/bgm-opening
      
      - name: Download bgm-main artifact
        uses: actions/download-artifact@v4
        with:
          name: bgm-main
          path: artifacts/bgm-main
      
      - name: Download bgm-ending artifact
        uses: actions/download-artifact@v4
        with:
          name: bgm-ending
          path: artifacts/bgm-ending
      
      - name: List downloaded artifacts
        run: |
          echo "::group::📁 ダウンロードされたアーティファクト"
          echo "=== artifacts/ ==="
          ls -la artifacts/ || echo "artifactsディレクトリが見つかりません"
          echo ""
          echo "=== 各アーティファクトの内容 ==="
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              echo "--- $dir ---"
              ls -la "$dir" || echo "ディレクトリが空です"
              echo ""
            fi
          done
          echo "::endgroup::"
      
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Mix audio files with section-specific BGMs
        id: mixing
        run: |
          # 各セクションで音声とBGMを個別にミックス（エラーハンドリング＋改善版）
          
          # 音声の長さを取得する関数（エラーハンドリング付き）
          get_duration() {
            local file="$1"
            if [ ! -f "$file" ]; then
              echo "::warning::音声ファイルが見つかりません: $file、デフォルト値30秒を使用"
              echo "30"
              return 0
            fi
            local duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null)
            if [ -z "$duration" ] || [ "$duration" = "N/A" ]; then
              echo "::warning::音声ファイルの長さを取得できません: $file、デフォルト値30秒を使用"
              echo "30"
              return 0
            fi
            echo "$duration"
          }
          
          # エラーハンドリング付きFFmpeg実行
          safe_ffmpeg() {
            local TEMP_LOG="ffmpeg_$(date +%s).log"
            if ! ffmpeg "$@" 2>"$TEMP_LOG"; then
              echo "::error::FFmpeg処理に失敗しました: $*"
              echo "::error::FFmpegエラー出力:"
              cat "$TEMP_LOG" | head -20
              rm -f "$TEMP_LOG"
              return 1
            fi
            rm -f "$TEMP_LOG"
            return 0
          }
          
          # アーティファクトからファイルをコピー（パスを明確に指定）
          echo "📂 音声ファイルのコピー"
          if [ -f "artifacts/voice-opening/${{ inputs.voice-opening }}" ]; then
            cp "artifacts/voice-opening/${{ inputs.voice-opening }}" voice-opening.wav
            echo "✅ voice-opening.wav をコピーしました"
          else
            echo "::warning::音声ファイルが見つかりません: artifacts/voice-opening/${{ inputs.voice-opening }}"
          fi
          
          if [ -f "artifacts/voice-main/${{ inputs.voice-main }}" ]; then
            cp "artifacts/voice-main/${{ inputs.voice-main }}" voice-main.wav
            echo "✅ voice-main.wav をコピーしました"
          else
            echo "::warning::音声ファイルが見つかりません: artifacts/voice-main/${{ inputs.voice-main }}"
          fi
          
          if [ -f "artifacts/voice-ending/${{ inputs.voice-ending }}" ]; then
            cp "artifacts/voice-ending/${{ inputs.voice-ending }}" voice-ending.wav
            echo "✅ voice-ending.wav をコピーしました"
          else
            echo "::warning::音声ファイルが見つかりません: artifacts/voice-ending/${{ inputs.voice-ending }}"
          fi
          
          echo "📂 BGMファイルのコピー"
          if [ -f "artifacts/bgm-opening/${{ inputs.bgm-opening }}" ]; then
            cp "artifacts/bgm-opening/${{ inputs.bgm-opening }}" bgm-opening-30s.wav
            echo "✅ bgm-opening-30s.wav をコピーしました"
          else
            echo "::warning::BGMファイルが見つかりません: artifacts/bgm-opening/${{ inputs.bgm-opening }}"
          fi
          
          if [ -f "artifacts/bgm-main/${{ inputs.bgm-main }}" ]; then
            cp "artifacts/bgm-main/${{ inputs.bgm-main }}" bgm-main-30s.wav
            echo "✅ bgm-main-30s.wav をコピーしました"
          else
            echo "::warning::BGMファイルが見つかりません: artifacts/bgm-main/${{ inputs.bgm-main }}"
          fi
          
          if [ -f "artifacts/bgm-ending/${{ inputs.bgm-ending }}" ]; then
            cp "artifacts/bgm-ending/${{ inputs.bgm-ending }}" bgm-ending-30s.wav
            echo "✅ bgm-ending-30s.wav をコピーしました"
          else
            echo "::warning::BGMファイルが見つかりません: artifacts/bgm-ending/${{ inputs.bgm-ending }}"
          fi
          
          # 音声ファイルの存在確認とダミー作成
          for voice_file in voice-opening.wav voice-main.wav voice-ending.wav; do
            if [ ! -f "$voice_file" ]; then
              echo "::warning::音声ファイル $voice_file が見つかりません、無音で代替"
              safe_ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t 30 -c:a pcm_s16le "$voice_file" || exit 1
            fi
          done
          
          # BGMファイルの存在確認とダミー作成
          for bgm_file in bgm-opening-30s.wav bgm-main-30s.wav bgm-ending-30s.wav; do
            if [ ! -f "$bgm_file" ]; then
              echo "::warning::BGMファイル $bgm_file が見つかりません、無音で代替"
              safe_ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t 30 -c:a pcm_s16le "$bgm_file" || exit 1
            fi
          done
          
          # 各音声の長さを取得して、必要なBGMの長さを計算
          echo "📏 音声ファイルの長さを測定中..."
          VOICE_OPENING_DURATION=$(get_duration voice-opening.wav)
          VOICE_MAIN_DURATION=$(get_duration voice-main.wav)
          VOICE_ENDING_DURATION=$(get_duration voice-ending.wav)
          
          echo "  オープニング音声: ${VOICE_OPENING_DURATION}秒"
          echo "  メイン音声: ${VOICE_MAIN_DURATION}秒"
          echo "  エンディング音声: ${VOICE_ENDING_DURATION}秒"
          
          # 必要なBGMの長さを計算（音声の長さ + 10秒の余裕）
          BGM_OPENING_NEEDED=$(awk "BEGIN {print int($VOICE_OPENING_DURATION + 10)}")
          BGM_MAIN_NEEDED=$(awk "BEGIN {print int($VOICE_MAIN_DURATION + 10)}")
          BGM_ENDING_NEEDED=$(awk "BEGIN {print int($VOICE_ENDING_DURATION + 10)}")
          
          echo "🎵 必要なBGMの長さ:"
          echo "  オープニング: ${BGM_OPENING_NEEDED}秒"
          echo "  メイン: ${BGM_MAIN_NEEDED}秒"
          echo "  エンディング: ${BGM_ENDING_NEEDED}秒"
          
          # BGMを必要な長さにループ拡張
          if [ $BGM_OPENING_NEEDED -gt 30 ]; then
            echo "🔄 オープニングBGMを${BGM_OPENING_NEEDED}秒に拡張"
            safe_ffmpeg -stream_loop -1 -i bgm-opening-30s.wav -t $BGM_OPENING_NEEDED -ar 44100 -ac 2 -c:a pcm_s16le bgm-opening-extended.wav -y || exit 1
            mv bgm-opening-extended.wav bgm-opening-30s.wav
          fi
          
          if [ $BGM_MAIN_NEEDED -gt 30 ]; then
            echo "🔄 メインBGMを${BGM_MAIN_NEEDED}秒に拡張"
            safe_ffmpeg -stream_loop -1 -i bgm-main-30s.wav -t $BGM_MAIN_NEEDED -ar 44100 -ac 2 -c:a pcm_s16le bgm-main-extended.wav -y || exit 1
            mv bgm-main-extended.wav bgm-main-30s.wav
          fi
          
          if [ $BGM_ENDING_NEEDED -gt 30 ]; then
            echo "🔄 エンディングBGMを${BGM_ENDING_NEEDED}秒に拡張"
            safe_ffmpeg -stream_loop -1 -i bgm-ending-30s.wav -t $BGM_ENDING_NEEDED -ar 44100 -ac 2 -c:a pcm_s16le bgm-ending-extended.wav -y || exit 1
            mv bgm-ending-extended.wav bgm-ending-30s.wav
          fi
          
          # オープニング: BGM最大音量6秒→音声開始時50%→音声終了後3秒最大→5秒フェードアウト
          VOICE_START=0
          VOICE_END=$(awk "BEGIN {print $VOICE_OPENING_DURATION}")
          FULL_VOLUME_END=$(awk "BEGIN {print $VOICE_END + 3}")
          TOTAL_OPENING_DURATION=$(awk "BEGIN {print $VOICE_END + 8}")
          
          # FFmpeg用の計算済み値
          VOICE_END_WITH_DELAY=$(awk "BEGIN {print $VOICE_END + 6}")
          FULL_VOLUME_END_WITH_DELAY=$(awk "BEGIN {print $FULL_VOLUME_END + 6}")
          TOTAL_DURATION_WITH_DELAY=$(awk "BEGIN {print $TOTAL_OPENING_DURATION + 6}")
          FADE_START_TIME=$(awk "BEGIN {print $FULL_VOLUME_END + 6}")
          
          echo "🎵 オープニングセクションのミキシング開始"
          echo "  音声開始: 6秒後"
          echo "  音声終了: ${VOICE_END_WITH_DELAY}秒"
          echo "  フルボリューム終了: ${FULL_VOLUME_END_WITH_DELAY}秒"
          echo "  総時間: ${TOTAL_DURATION_WITH_DELAY}秒"
          
          safe_ffmpeg -i voice-opening.wav \
                      -i bgm-opening-30s.wav \
                      -filter_complex "[0]adelay=6s:all=1[voice_delayed];
                                      [1]volume='if(lt(t,6),1,if(lt(t,${VOICE_END_WITH_DELAY}),0.5,if(lt(t,${FULL_VOLUME_END_WITH_DELAY}),1,1)))':eval=frame,
                                      afade=t=out:st=${FADE_START_TIME}:d=5[bgm1];
                                      [voice_delayed][bgm1]amix=inputs=2[opening]" \
                      -map "[opening]" \
                      -t ${TOTAL_DURATION_WITH_DELAY} \
                      -ar 44100 -ac 2 -c:a pcm_s16le \
                      opening-mixed.wav || exit 1
          
          if [ -f "opening-mixed.wav" ]; then
            echo "✅ opening-mixed.wav 生成成功 ($(stat -c%s opening-mixed.wav) bytes)"
          else
            echo "::error::❌ opening-mixed.wav の生成に失敗"
            exit 1
          fi
          
          # メイン: BGM4秒イントロ（最大音量）→音声開始時50%→音声終了後BGMフェードアウト（5秒）
          FADE_START_MAIN=$(awk "BEGIN {print $VOICE_MAIN_DURATION + 4}")
          TOTAL_MAIN_DURATION=$(awk "BEGIN {print $VOICE_MAIN_DURATION + 9}")
          VOICE_MAIN_WITH_DELAY=$(awk "BEGIN {print $VOICE_MAIN_DURATION + 4}")
          
          echo "🎵 メインセクションのミキシング開始"
          safe_ffmpeg -i voice-main.wav \
                      -i bgm-main-30s.wav \
                      -filter_complex "[0]adelay=4s:all=1[voice_delayed];
                                      [1]volume='if(lt(t,4),1,if(lt(t,${VOICE_MAIN_WITH_DELAY}),0.5,0.5))':eval=frame,
                                      afade=t=out:st=${FADE_START_MAIN}:d=5[bgm2];
                                      [voice_delayed][bgm2]amix=inputs=2[main]" \
                      -map "[main]" \
                      -t ${TOTAL_MAIN_DURATION} \
                      -ar 44100 -ac 2 -c:a pcm_s16le \
                      main-mixed.wav || exit 1
          
          if [ -f "main-mixed.wav" ]; then
            echo "✅ main-mixed.wav 生成成功 ($(stat -c%s main-mixed.wav) bytes)"
          else
            echo "::error::❌ main-mixed.wav の生成に失敗"
            exit 1
          fi
          
          # エンディング: BGM4秒イントロ（最大音量）→音声開始時50%→音声終了後最大音量→7秒フェードアウト
          FADE_START_ENDING=$(awk "BEGIN {print $VOICE_ENDING_DURATION + 4}")
          TOTAL_ENDING_DURATION=$(awk "BEGIN {print $VOICE_ENDING_DURATION + 11}")
          VOICE_ENDING_WITH_DELAY=$(awk "BEGIN {print $VOICE_ENDING_DURATION + 4}")
          
          echo "🎵 エンディングセクションのミキシング開始"
          safe_ffmpeg -i voice-ending.wav \
                      -i bgm-ending-30s.wav \
                      -filter_complex "[0]adelay=4s:all=1[voice_delayed];
                                      [1]volume='if(lt(t,4),1,if(lt(t,${VOICE_ENDING_WITH_DELAY}),0.5,1))':eval=frame,
                                      afade=t=out:st=${FADE_START_ENDING}:d=7[bgm3];
                                      [voice_delayed][bgm3]amix=inputs=2[ending]" \
                      -map "[ending]" \
                      -t ${TOTAL_ENDING_DURATION} \
                      -ar 44100 -ac 2 -c:a pcm_s16le \
                      ending-mixed.wav || exit 1
          
          if [ -f "ending-mixed.wav" ]; then
            echo "✅ ending-mixed.wav 生成成功 ($(stat -c%s ending-mixed.wav) bytes)"
          else
            echo "::error::❌ ending-mixed.wav の生成に失敗"
            exit 1
          fi
          
          # 1秒の無音ファイルを作成
          echo "🔇 無音ファイルを作成"
          safe_ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t 1 -c:a pcm_s16le silence-1s.wav || exit 1
          
          # 3つのセクションを連結し、最終調整（エラーハンドリング付き）
          echo "🎵 最終ミックス開始（セクション間に1秒の無音を挿入）"
          echo "📁 連結するファイル:"
          ls -la opening-mixed.wav silence-1s.wav main-mixed.wav silence-1s.wav ending-mixed.wav
          
          safe_ffmpeg -i opening-mixed.wav \
                      -i silence-1s.wav \
                      -i main-mixed.wav \
                      -i silence-1s.wav \
                      -i ending-mixed.wav \
                      -filter_complex "[0][1][2][3][4]concat=n=5:v=0:a=1[combined];[combined]loudnorm=I=-23:LRA=7:TP=-1[normalized]" \
                      -map "[normalized]" \
                      -c:a mp3 \
                      -b:a 320k \
                      final-radio.mp3 || exit 1
          
          if [ -f "final-radio.mp3" ]; then
            echo "✅ final-radio.mp3 生成成功 ($(stat -c%s final-radio.mp3) bytes)"
          else
            echo "::error::❌ final-radio.mp3 の生成に失敗"
            exit 1
          fi
          
          # メタデータ生成
          echo "{
            \"duration\": \"90s\",
            \"sections\": [
              {\"name\": \"opening\", \"duration\": \"4s intro + voice + 2s fade\", \"bgm\": \"upbeat\", \"bgm_volume\": \"50%\", \"intro\": \"4s\", \"fade_out\": \"2s\"},
              {\"name\": \"main\", \"duration\": \"4s intro + voice + 5s fade\", \"bgm\": \"talk-friendly\", \"bgm_volume\": \"100%→50%\", \"intro\": \"4s\", \"fade_out\": \"5s\"},
              {\"name\": \"ending\", \"duration\": \"4s intro + voice + 7s fade\", \"bgm\": \"warm-outro\", \"bgm_volume\": \"100%→50%→100%\", \"intro\": \"4s\", \"fade_out\": \"7s\"}
            ],
            \"audio_standard\": \"-23 LUFS\",
            \"format\": \"MP3 320kbps\"
          }" > metadata.json
          
          echo "final-file=final-radio.mp3" >> $GITHUB_OUTPUT
          echo "metadata=metadata.json" >> $GITHUB_OUTPUT
      
      - name: Upload final audio artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-audio
          path: |
            final-radio.mp3
            metadata.json
          retention-days: 7