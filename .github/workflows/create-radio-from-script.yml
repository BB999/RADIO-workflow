name: Create Radio from Script

on:
  workflow_dispatch:
    inputs:
      script:
        description: 'ラジオ番組の台本'
        required: true
        type: string

env:
  AIVIS_API_KEY: ${{ secrets.AIVIS_API_KEY }}

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      branch-name: ${{ steps.create-branch.outputs.branch-name }}
      folder-name: ${{ steps.create-branch.outputs.folder-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create branch for radio generation
        id: create-branch
        run: |
          BRANCH_NAME="radio/$(date +%Y%m%d)-${{ github.run_id }}"
          FOLDER_NAME="radio-$(date +%Y%m%d)-${{ github.run_id }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push origin $BRANCH_NAME
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "folder-name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Created branch: $BRANCH_NAME"
          echo "Folder name: $FOLDER_NAME"

  script-analysis:
    runs-on: ubuntu-latest
    needs: [setup-branch]
    permissions:
      contents: write
    outputs:
      analysis-completed: ${{ steps.analysis.outputs.completed }}
      opening-script: ${{ steps.analysis.outputs.opening-script }}
      main-script: ${{ steps.analysis.outputs.main-script }}
      ending-script: ${{ steps.analysis.outputs.ending-script }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: 台本分析エージェント
        id: analysis
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::📋 Script Analysis Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          USER_SCRIPT="${{ inputs.script }}"
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          ANALYSIS_DIR="$FOLDER_NAME/analysis"
          
          echo "User script: $USER_SCRIPT"
          echo "Analysis folder: $ANALYSIS_DIR"
          
          # 分析フォルダを事前に作成
          if [ ! -d "$ANALYSIS_DIR" ]; then
            mkdir -p "$ANALYSIS_DIR"
            echo "📁 Created analysis folder: $ANALYSIS_DIR"
          fi
          
          # プロンプトの構築
          PROMPT="あなたはラジオ番組の構成作家です。提供された台本を分析し、「オープニング」「メイン」「エンディング」の3つのセクションに分割してください。

          **ユーザーの台本**: $USER_SCRIPT

          **タスク**:
          1. 台本全体を分析し、自然な区切りで3つのセクションに分割
          2. 各セクションがラジオ番組として自然に聞こえるよう調整
          3. 各セクションの台本をそれぞれファイルに保存
          4. 分析結果のレポートを作成

          **ファイル保存**:
          - オープニング: $ANALYSIS_DIR/opening-script.txt
          - メイン: $ANALYSIS_DIR/main-script.txt
          - エンディング: $ANALYSIS_DIR/ending-script.txt
          - 分析レポート: $ANALYSIS_DIR/script-analysis.md
          - 全体構成: $ANALYSIS_DIR/script-structure.json

          **分割のガイドライン**:
          - オープニング: 挨拶、導入、今日のテーマ紹介など（約30秒分、150-200文字程度）
          - メイン: 主要コンテンツ、詳細な内容（約30秒分、150-200文字程度）
          - エンディング: まとめ、締めの言葉、次回予告など（約30秒分、150-200文字程度）
          
          **重要**: 各セクションは約30秒で読み上げられる長さ（150-200文字程度）に調整してください。
          日本語の標準的な読み上げ速度は1秒あたり5-7文字です。

          **注意事項**:
          - 各セクションは独立して音声生成されるため、文章として完結させる
          - SSML対応のため、適切な<break>タグや<prosody>タグを追加可能
          - 感情表現が必要な箇所は<aivis:emotion>タグを使用
          - txtファイルは音声生成用（改行やSSMLタグ含む）

          **JSONファイルの形式**:
          全体の文字数とセクションごとの情報をJSON形式で記録してください。
          各セクションの推定時間は30秒で統一してください。"
          
          echo "🚀 Starting Script Analysis Agent Claude Code CLI..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Edit" \
            --max-turns 15 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::❌ Claude Code CLI execution failed"
              exit 1
            }
          
          # 生成されたファイルの確認
          echo ""
          echo "📋 Checking analyzed script files..."
          
          # オープニング台本の確認
          if [ -f "$ANALYSIS_DIR/opening-script.txt" ]; then
            OPENING_SCRIPT=$(cat "$ANALYSIS_DIR/opening-script.txt" | head -100 | tr '\n' ' ')
            echo "::notice::✅ Opening script generated"
            echo "Opening preview: ${OPENING_SCRIPT:0:100}..."
            echo "opening-script=$OPENING_SCRIPT" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Opening script file not found"
            exit 1
          fi
          
          # メイン台本の確認
          if [ -f "$ANALYSIS_DIR/main-script.txt" ]; then
            MAIN_SCRIPT=$(cat "$ANALYSIS_DIR/main-script.txt" | head -100 | tr '\n' ' ')
            echo "::notice::✅ Main script generated"
            echo "Main preview: ${MAIN_SCRIPT:0:100}..."
            echo "main-script=$MAIN_SCRIPT" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Main script file not found"
            exit 1
          fi
          
          # エンディング台本の確認
          if [ -f "$ANALYSIS_DIR/ending-script.txt" ]; then
            ENDING_SCRIPT=$(cat "$ANALYSIS_DIR/ending-script.txt" | head -100 | tr '\n' ' ')
            echo "::notice::✅ Ending script generated"
            echo "Ending preview: ${ENDING_SCRIPT:0:100}..."
            echo "ending-script=$ENDING_SCRIPT" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Ending script file not found"
            exit 1
          fi
          
          # 分析レポートの確認
          if [ -f "$ANALYSIS_DIR/script-analysis.md" ]; then
            echo "::notice::✅ Script analysis report generated"
          else
            echo "::warning::⚠️ Script analysis report not found"
          fi
          
          # 構成JSONの確認
          if [ -f "$ANALYSIS_DIR/script-structure.json" ]; then
            echo "::notice::✅ Script structure JSON generated"
            cat "$ANALYSIS_DIR/script-structure.json"
          else
            echo "::warning::⚠️ Script structure JSON not found"
          fi
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Commit and push analysis
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No analysis files to commit"
          else
            git commit -m "Add script analysis: ${{ inputs.script }}"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  voice-generation:
    runs-on: ubuntu-latest
    needs: [setup-branch, script-analysis]
    permissions:
      contents: write
    outputs:
      voice-completed: ${{ steps.voice.outputs.completed }}
      opening-duration: ${{ steps.voice.outputs.opening-duration }}
      main-duration: ${{ steps.voice.outputs.main-duration }}
      ending-duration: ${{ steps.voice.outputs.ending-duration }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg sox
          npm install @anthropic-ai/claude-code
      
      - name: 音声生成エージェント (Aivis Cloud API)
        id: voice
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          AIVIS_API_KEY: ${{ secrets.AIVIS_API_KEY }}
        run: |
          echo "::group::🎙️ Voice Generation Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          ANALYSIS_DIR="$FOLDER_NAME/analysis"
          VOICE_DIR="$FOLDER_NAME/voice"
          
          echo "Analysis folder: $ANALYSIS_DIR"
          echo "Voice folder: $VOICE_DIR"
          
          # 音声フォルダを事前に作成
          if [ ! -d "$VOICE_DIR" ]; then
            mkdir -p "$VOICE_DIR"
            echo "📁 Created voice folder: $VOICE_DIR"
          fi
          
          # プロンプトの構築
          PROMPT="Aivis Cloud APIを使用して、各セクションの音声を生成してください。

          **APIキー**: 環境変数AIVIS_API_KEYに設定済み
          **分析フォルダ**: $ANALYSIS_DIR
          **音声保存フォルダ**: $VOICE_DIR

          **タスク**:
          1. 各セクションの台本ファイルを読み込む
             - オープニング: $ANALYSIS_DIR/opening-script.txt
             - メイン: $ANALYSIS_DIR/main-script.txt
             - エンディング: $ANALYSIS_DIR/ending-script.txt
          
          2. 各セクションごとにAivis Cloud APIで音声生成
             - モデルUUID: a59cb814-0083-4369-8542-f51a29e72af7
             - 出力形式: mp3
             - SSMLタグ有効
             - 感情表現: 適切に調整
             - 話速: 1.0（標準）
          
          3. 生成した音声を保存
             - オープニング: $VOICE_DIR/opening-voice.mp3
             - メイン: $VOICE_DIR/main-voice.mp3
             - エンディング: $VOICE_DIR/ending-voice.mp3
          
          4. 各音声ファイルの長さを測定して記録
             - ffprobeまたはsoxiコマンドを使用
             - 結果を$VOICE_DIR/voice-durations.jsonに保存

          **音声生成のパラメータ**:
          - use_ssml: true
          - emotional_intensity: 1.0
          - speaking_rate: 1.0
          - output_format: mp3
          - output_sampling_rate: 44100
          - output_audio_channels: mono
          - output_bitrate: 128

          **重要な注意点**:
          - APIキーは環境変数から取得: \$AIVIS_API_KEY
          - BashツールでcurlコマンドでAPIを呼び出す
          - レスポンスは直接ファイルに保存
          - 各音声の長さ（秒）を正確に測定
          - エラーハンドリングを適切に実装

          **音声長測定のコマンド例**:
          ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 file.mp3

          **JSON形式**:
          {
            \"opening\": {
              \"file\": \"opening-voice.mp3\",
              \"duration_seconds\": 数値
            },
            \"main\": {
              \"file\": \"main-voice.mp3\",
              \"duration_seconds\": 数値
            },
            \"ending\": {
              \"file\": \"ending-voice.mp3\",
              \"duration_seconds\": 数値
            }
          }"
          
          echo "🚀 Starting Voice Generation Agent Claude Code CLI..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash" \
            --max-turns 20 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::❌ Claude Code CLI execution failed"
              exit 1
            }
          
          # 生成された音声ファイルの確認
          echo ""
          echo "🎙️ Checking generated voice files..."
          
          # 各音声ファイルの確認と長さの取得
          if [ -f "$VOICE_DIR/opening-voice.mp3" ]; then
            OPENING_DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$VOICE_DIR/opening-voice.mp3" | cut -d. -f1)
            echo "::notice::✅ Opening voice generated (${OPENING_DURATION}s)"
            echo "opening-duration=$OPENING_DURATION" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Opening voice file not found"
            exit 1
          fi
          
          if [ -f "$VOICE_DIR/main-voice.mp3" ]; then
            MAIN_DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$VOICE_DIR/main-voice.mp3" | cut -d. -f1)
            echo "::notice::✅ Main voice generated (${MAIN_DURATION}s)"
            echo "main-duration=$MAIN_DURATION" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Main voice file not found"
            exit 1
          fi
          
          if [ -f "$VOICE_DIR/ending-voice.mp3" ]; then
            ENDING_DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$VOICE_DIR/ending-voice.mp3" | cut -d. -f1)
            echo "::notice::✅ Ending voice generated (${ENDING_DURATION}s)"
            echo "ending-duration=$ENDING_DURATION" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Ending voice file not found"
            exit 1
          fi
          
          # 音声長JSONの確認
          if [ -f "$VOICE_DIR/voice-durations.json" ]; then
            echo "::notice::✅ Voice durations JSON generated"
            cat "$VOICE_DIR/voice-durations.json"
          else
            echo "::warning::⚠️ Voice durations JSON not found"
          fi
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Commit and push voice
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No voice files to commit"
          else
            git commit -m "Add generated voice files"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  bgm-generation:
    runs-on: ubuntu-latest
    needs: [setup-branch, script-analysis, voice-generation]
    permissions:
      contents: write
    outputs:
      bgm-completed: ${{ steps.bgm.outputs.completed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: BGM生成エージェント
        id: bgm
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::🎵 BGM Generation Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          ANALYSIS_DIR="$FOLDER_NAME/analysis"
          BGM_DIR="$FOLDER_NAME/bgm"
          OPENING_DURATION="${{ needs.voice-generation.outputs.opening-duration }}"
          MAIN_DURATION="${{ needs.voice-generation.outputs.main-duration }}"
          ENDING_DURATION="${{ needs.voice-generation.outputs.ending-duration }}"
          
          echo "BGM folder: $BGM_DIR"
          echo "Opening duration: ${OPENING_DURATION}s"
          echo "Main duration: ${MAIN_DURATION}s"
          echo "Ending duration: ${ENDING_DURATION}s"
          
          # BGMフォルダを事前に作成
          if [ ! -d "$BGM_DIR" ]; then
            mkdir -p "$BGM_DIR"
            echo "📁 Created BGM folder: $BGM_DIR"
          fi
          
          # MCP設定の確認
          MCP_CONFIG_PATH=".claude/mcp-kamuicode.json"
          MCP_CONFIG_ABS_PATH="$(pwd)/$MCP_CONFIG_PATH"
          
          echo "📋 MCP Configuration Check:"
          echo "Working directory: $(pwd)"
          echo "MCP config path: $MCP_CONFIG_PATH"
          echo "MCP config absolute path: $MCP_CONFIG_ABS_PATH"
          
          # プロンプトの構築
          PROMPT="MCPツールを使用して、各セクション用のBGMを生成してください。

          **BGM保存フォルダ**: $BGM_DIR
          **各セクションの長さ**:
          - オープニング: ${OPENING_DURATION}秒
          - メイン: ${MAIN_DURATION}秒
          - エンディング: ${ENDING_DURATION}秒

          **タスク**:
          1. 各セクションの台本内容を分析（$ANALYSIS_DIR内のファイル参照）
          2. 各セクションに適したBGMをMCPツールで生成
          3. 生成したBGMを保存

          **BGM生成の要件**:
          - オープニング: 明るく期待感のあるBGM（${OPENING_DURATION}秒）
            → ファイル名: $BGM_DIR/opening-bgm.mp3
          - メイン: 落ち着いた雰囲気のBGM（${MAIN_DURATION}秒）
            → ファイル名: $BGM_DIR/main-bgm.mp3
          - エンディング: 締めくくりに適したBGM（${ENDING_DURATION}秒）
            → ファイル名: $BGM_DIR/ending-bgm.mp3

          **BGM生成のガイドライン**:
          - ラジオ番組のBGMとして適切な音量と雰囲気
          - ナレーションの邪魔にならない控えめな音楽
          - 各セクションの雰囲気に合わせた選曲
          - 長さは各セクションの音声に合わせる

          **使用可能なMCPツール**:
          - mcp__bgm-fal-musicgen-large__musicgen_large_submit
          - mcp__bgm-fal-musicgen-large__musicgen_large_status
          - mcp__bgm-fal-musicgen-large__musicgen_large_result
          または他の適切なBGM生成MCPツール

          **重要**:
          - 生成されたBGMのURLを取得後、必ずBashツールでダウンロード
          - ファイル名は指定通りに保存
          - 各BGMの実際の長さを確認してログに出力"
          
          echo "🚀 Starting BGM Generation Agent Claude Code CLI..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            --mcp-config="$MCP_CONFIG_ABS_PATH" \
            --allowedTools "Read,Write,Bash,mcp__bgm-fal-musicgen-large__musicgen_large_submit,mcp__bgm-fal-musicgen-large__musicgen_large_status,mcp__bgm-fal-musicgen-large__musicgen_large_result" \
            --max-turns 25 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::❌ Claude Code CLI execution failed"
              exit 1
            }
          
          # 生成されたBGMファイルの確認
          echo ""
          echo "🎵 Checking generated BGM files..."
          
          if [ -f "$BGM_DIR/opening-bgm.mp3" ]; then
            echo "::notice::✅ Opening BGM generated"
            ls -lh "$BGM_DIR/opening-bgm.mp3"
          else
            echo "::error::❌ Opening BGM file not found"
            exit 1
          fi
          
          if [ -f "$BGM_DIR/main-bgm.mp3" ]; then
            echo "::notice::✅ Main BGM generated"
            ls -lh "$BGM_DIR/main-bgm.mp3"
          else
            echo "::error::❌ Main BGM file not found"
            exit 1
          fi
          
          if [ -f "$BGM_DIR/ending-bgm.mp3" ]; then
            echo "::notice::✅ Ending BGM generated"
            ls -lh "$BGM_DIR/ending-bgm.mp3"
          else
            echo "::error::❌ Ending BGM file not found"
            exit 1
          fi
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Commit and push BGM
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No BGM files to commit"
          else
            git commit -m "Add generated BGM files"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  audio-mixing:
    runs-on: ubuntu-latest
    needs: [setup-branch, voice-generation, bgm-generation]
    permissions:
      contents: write
    outputs:
      mixing-completed: ${{ steps.mixing.outputs.completed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg sox
          npm install @anthropic-ai/claude-code
      
      - name: 音声ミキシングエージェント
        id: mixing
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::🎧 Audio Mixing Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          VOICE_DIR="$FOLDER_NAME/voice"
          BGM_DIR="$FOLDER_NAME/bgm"
          FINAL_DIR="$FOLDER_NAME/final"
          
          echo "Voice folder: $VOICE_DIR"
          echo "BGM folder: $BGM_DIR"
          echo "Final folder: $FINAL_DIR"
          
          # 最終出力フォルダを事前に作成
          if [ ! -d "$FINAL_DIR" ]; then
            mkdir -p "$FINAL_DIR"
            echo "📁 Created final folder: $FINAL_DIR"
          fi
          
          # プロンプトの構築
          PROMPT="ffmpegを使用して、音声とBGMを結合し、最終的なラジオ番組を作成してください。

          **素材フォルダ**:
          - 音声: $VOICE_DIR
          - BGM: $BGM_DIR
          - 最終出力: $FINAL_DIR

          **タスク**:
          1. 各セクションの音声とBGMを結合（BGM音量は60%に調整）
             - オープニング: opening-voice.mp3 + opening-bgm.mp3 → opening-mixed.mp3
             - メイン: main-voice.mp3 + main-bgm.mp3 → main-mixed.mp3
             - エンディング: ending-voice.mp3 + ending-bgm.mp3 → ending-mixed.mp3
          
          2. 3つのミックス済みファイルを1つに結合
             - 出力: $FINAL_DIR/radio-program.mp3
          
          3. 最終的なラジオ番組のメタデータを作成
             - $FINAL_DIR/radio-metadata.json

          **ffmpegコマンドの例**:
          # 音声とBGMのミックス（BGM音量60%）
          ffmpeg -i voice.mp3 -i bgm.mp3 -filter_complex \"[1:a]volume=0.6[bgm];[0:a][bgm]amix=inputs=2:duration=first:dropout_transition=2\" -c:a mp3 -b:a 192k mixed.mp3
          
          # 複数ファイルの結合
          ffmpeg -i \"concat:file1.mp3|file2.mp3|file3.mp3\" -acodec copy output.mp3
          
          **注意事項**:
          - BGMの音量は音声が聞き取りやすいよう60%に調整
          - 各セクション間に0.5秒の無音を挿入
          - 最終出力は高品質（192kbps）で保存
          - エラーハンドリングを適切に実装

          **メタデータJSON形式**:
          {
            \"title\": \"AI Generated Radio Program\",
            \"created_at\": \"YYYY-MM-DD HH:MM:SS\",
            \"total_duration_seconds\": 数値,
            \"sections\": {
              \"opening\": \"長さ\",
              \"main\": \"長さ\",
              \"ending\": \"長さ\"
            },
            \"format\": \"mp3\",
            \"bitrate\": \"192kbps\"
          }"
          
          echo "🚀 Starting Audio Mixing Agent Claude Code CLI..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write,Bash" \
            --max-turns 15 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::❌ Claude Code CLI execution failed"
              exit 1
            }
          
          # 最終出力ファイルの確認
          echo ""
          echo "🎧 Checking final radio program..."
          
          if [ -f "$FINAL_DIR/radio-program.mp3" ]; then
            echo "::notice::✅ Final radio program generated"
            ls -lh "$FINAL_DIR/radio-program.mp3"
            
            # 最終ファイルの長さを取得
            TOTAL_DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$FINAL_DIR/radio-program.mp3")
            echo "Total duration: ${TOTAL_DURATION} seconds"
          else
            echo "::error::❌ Final radio program file not found"
            exit 1
          fi
          
          # メタデータの確認
          if [ -f "$FINAL_DIR/radio-metadata.json" ]; then
            echo "::notice::✅ Radio metadata generated"
            cat "$FINAL_DIR/radio-metadata.json"
          else
            echo "::warning::⚠️ Radio metadata not found"
          fi
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Commit and push final audio
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No final audio files to commit"
          else
            git commit -m "Add final radio program"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  create-pr:
    runs-on: ubuntu-latest
    needs: [setup-branch, script-analysis, voice-generation, bgm-generation, audio-mixing]
    permissions:
      contents: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # ブランチ名を取得
          BRANCH_NAME="${{ needs.setup-branch.outputs.branch-name }}"
          
          # 変更をコミット
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 最終成果物の確認とコミット
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          echo "=== Final Radio Generation Summary ==="
          echo "Radio folder: $FOLDER_NAME"
          
          VOICE_COUNT=0
          BGM_COUNT=0
          FINAL_COUNT=0
          
          if [ -d "$FOLDER_NAME" ]; then
            echo "✅ Radio folder exists: $FOLDER_NAME"
            echo "Contents:"
            ls -la "$FOLDER_NAME"
            
            # 音声ファイルの確認
            if [ -d "$FOLDER_NAME/voice" ]; then
              VOICE_COUNT=$(find "$FOLDER_NAME/voice" -name "*.mp3" | wc -l)
              echo "✅ Voice directory exists with $VOICE_COUNT files"
            fi
            
            # BGMファイルの確認
            if [ -d "$FOLDER_NAME/bgm" ]; then
              BGM_COUNT=$(find "$FOLDER_NAME/bgm" -name "*.mp3" | wc -l)
              echo "✅ BGM directory exists with $BGM_COUNT files"
            fi
            
            # 最終ファイルの確認
            if [ -d "$FOLDER_NAME/final" ]; then
              FINAL_COUNT=$(find "$FOLDER_NAME/final" -name "*.mp3" | wc -l)
              echo "✅ Final directory exists with $FINAL_COUNT files"
            fi
          fi
          
          # すべてのファイルをコミット
          git add "$FOLDER_NAME/" 2>/dev/null || true
          
          # コミットメッセージを作成
          COMMIT_MESSAGE="Add new AI-generated radio program
          
          台本: ${{ inputs.script }}
          生成日時: $(date -u +%Y-%m-%d\ %H:%M:%S)\ UTC
          
          📊 Generation Summary:
          - Voice files: $VOICE_COUNT (Aivis Cloud API)
          - BGM files: $BGM_COUNT (MCP Tools)
          - Final program: $FINAL_COUNT
          
          🤖 Generated with Claude Code SDK & kamuicode MCP
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # コミット
          if git diff --cached --quiet; then
            echo "Warning: No changes to commit"
            git commit --allow-empty -m "$COMMIT_MESSAGE"
          else
            git commit -m "$COMMIT_MESSAGE"
          fi
          
          # プッシュ
          git push origin $BRANCH_NAME
          
          # 最終ラジオ番組のパス取得
          FINAL_RADIO_PATH=""
          if [ -f "$FOLDER_NAME/final/radio-program.mp3" ]; then
            FINAL_RADIO_PATH="$FOLDER_NAME/final/radio-program.mp3"
          fi
          
          # GitHub Actions Summaryに結果を出力
          echo "# 📻 AIラジオ番組生成完了" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 生成情報" >> $GITHUB_STEP_SUMMARY
          echo "- **台本（冒頭）**: ${{ inputs.script }}:0:100}..." >> $GITHUB_STEP_SUMMARY
          echo "- **生成日時**: $(date -u +%Y-%m-%d\ %H:%M:%S)\ UTC" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 生成結果" >> $GITHUB_STEP_SUMMARY
          echo "- 🎙️ **音声**: $VOICE_COUNT ファイル (Aivis Cloud API)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎵 **BGM**: $BGM_COUNT ファイル (MCP Tools)" >> $GITHUB_STEP_SUMMARY
          echo "- 📻 **最終番組**: $FINAL_COUNT ファイル" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$FINAL_RADIO_PATH" ]; then
            echo "## 📻 生成されたラジオ番組" >> $GITHUB_STEP_SUMMARY
            echo "📁 **ファイル**: \`$FINAL_RADIO_PATH\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ 音声ファイルはGitHub Actions Summaryでは再生できません。プルリクエストで確認してください。" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 次のステップ" >> $GITHUB_STEP_SUMMARY
          echo "1. プルリクエストでラジオ番組を確認" >> $GITHUB_STEP_SUMMARY
          echo "2. 必要に応じてメインブランチにマージ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # プルリクエスト用のボディを作成
          PR_BODY="🤖 Claude Code SDK & kamuicode MCPを使用して自動生成されたラジオ番組です."
          PR_BODY="$PR_BODY"$'\n\n'"台本（冒頭）: ${{ inputs.script }}:0:200}..."
          PR_BODY="$PR_BODY"$'\n\n'"生成フロー:"
          PR_BODY="$PR_BODY"$'\n'"1. 📋 台本を3つのセクションに分析・分割"
          PR_BODY="$PR_BODY"$'\n'"2. 🎙️ Aivis Cloud APIで各セクションの音声生成"
          PR_BODY="$PR_BODY"$'\n'"3. 🎵 MCPツールで各セクションのBGM生成"
          PR_BODY="$PR_BODY"$'\n'"4. 🎧 ffmpegで音声とBGMを結合"
          PR_BODY="$PR_BODY"$'\n\n'"成果物:"
          PR_BODY="$PR_BODY"$'\n'"- 音声ファイル: $VOICE_COUNT"
          PR_BODY="$PR_BODY"$'\n'"- BGMファイル: $BGM_COUNT"
          PR_BODY="$PR_BODY"$'\n'"- 最終番組: $FINAL_COUNT"
          
          if [ -n "$FINAL_RADIO_PATH" ]; then
            # GitHubの生ファイルURL構築
            GITHUB_AUDIO_URL="https://github.com/${{ github.repository }}/raw/$BRANCH_NAME/$FINAL_RADIO_PATH"
            PR_BODY="$PR_BODY"$'\n\n'"## 📻 生成されたラジオ番組"
            PR_BODY="$PR_BODY"$'\n\n'"<audio controls>"
            PR_BODY="$PR_BODY"$'\n'"  <source src=\"$GITHUB_AUDIO_URL\" type=\"audio/mpeg\">"
            PR_BODY="$PR_BODY"$'\n'"  お使いのブラウザは音声タグをサポートしていません。"
            PR_BODY="$PR_BODY"$'\n'"  <a href=\"$GITHUB_AUDIO_URL\">音声をダウンロードして再生</a>"
            PR_BODY="$PR_BODY"$'\n'"</audio>"
            PR_BODY="$PR_BODY"$'\n\n'"📁 **ファイルパス**: \`$FINAL_RADIO_PATH\`"
          fi
          
          PR_BODY="$PR_BODY
          
          ---
          🤖 Generated with [Claude Code SDK & kamuicode MCP](https://github.com/AI-Summoner/ai-summoner)"
          
          # PR作成
          gh pr create \
            --title "新しいAI生成ラジオ番組: ${{ inputs.script }}:0:50}..." \
            --body "$PR_BODY" \
            --base main \
            --head $BRANCH_NAME