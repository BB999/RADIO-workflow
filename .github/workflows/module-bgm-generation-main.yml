name: BGM Generation Main (Minimal)
on:
  workflow_call:
    outputs:
      bgm-url:
        value: ${{ jobs.generate.outputs.url }}
      bgm-file:
        value: ${{ jobs.generate.outputs.file }}

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.bgm.outputs.music-url }}
      file: ${{ steps.bgm.outputs.music-file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: |
          echo "📦 Claude Code SDKインストール"
          npm install @anthropic-ai/claude-code --force 2>/dev/null || echo "⚠️ インストールエラーを無視して続行"
      
      - name: Generate Main BGM with Google Lyria
        id: bgm
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          echo "::group::🎵 Main BGM Generation with Google Lyria"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # MCP設定の確認
          MCP_CONFIG_PATH=".claude/mcp-kamuicode.json"
          MCP_CONFIG_ABS_PATH="$(pwd)/$MCP_CONFIG_PATH"
          
          # プロンプトの構築
          PROMPT="以下のメインBGMを生成してください：

          【BGM要件】
          - 長さ: 30秒（ループ用ベース音楽）
          - スタイル: ラジオ番組風、落ち着いたトーク向け、温かみのある
          - 雰囲気: リラックスした会話の雰囲気、親しみやすい、聴きやすい
          - 楽器: ジャズピアノ、ウッドベース、ブラシドラム、暖かいパッド音
          - 特徴: ラジオトークの背景に最適、話し声を引き立てる、心地よいループ

          **重要**: 
          1. \`mcp__t2m-google-lyria__lyria_generate\` ツールを使用してください
          2. 生成されたファイルを自動ダウンロードし、ファイル名を出力してください
          3. auto_download: true, auto_open: false を設定してください

          **必須**: 必ず正しいツール名 \`mcp__t2m-google-lyria__lyria_generate\` を使用してください。"
          
          echo "🚀 Starting Main BGM Generation..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          echo "📋 MCP Configuration Check:"
          echo "Working directory: $(pwd)"
          echo "MCP config path: $MCP_CONFIG_PATH"
          echo "MCP config absolute path: $MCP_CONFIG_ABS_PATH"
          
          # MCP設定ファイルの存在確認
          if [ -f "$MCP_CONFIG_ABS_PATH" ]; then
            echo "✅ MCP config file exists"
          else
            echo "::warning::⚠️ MCP config file not found, proceeding without kamuicode"
          fi
          
          # Claude Code CLIの実行
          echo "🤖 Claude Code CLI実行開始"
          if [ -f "$MCP_CONFIG_ABS_PATH" ]; then
            echo "✅ MCP設定ファイルが見つかりました"
            
            # Claude Codeの実行とエラーハンドリング
            echo "🎯 Claude Code CLI実行中（120秒タイムアウト）..."
            BGM_RESULT=$(timeout 120 npx @anthropic-ai/claude-code \
              --mcp-config="$MCP_CONFIG_ABS_PATH" \
              --allowedTools "mcp__t2m-google-lyria__lyria_generate,Bash" \
              --max-turns 5 \
              --print \
              --verbose \
              "$PROMPT" 2>&1) || {
                CLAUDE_EXIT_CODE=$?
                echo "::error::❌ Claude Code実行失敗 (exit code: $CLAUDE_EXIT_CODE)"
                if [ $CLAUDE_EXIT_CODE -eq 124 ]; then
                  echo "::error::❌ タイムアウトしました (2分)"
                fi
                echo "::error::詳細なエラー出力:"
                echo "$BGM_RESULT" | head -50
                echo "::error::環境変数確認:"
                echo "CLAUDE_CODE_OAUTH_TOKEN: ${CLAUDE_CODE_OAUTH_TOKEN:0:20}..."
                BGM_RESULT=""
              }
          else
            echo "::warning::⚠️ MCP設定ファイルが見つかりません: $MCP_CONFIG_ABS_PATH"
            echo "::warning::現在のディレクトリ内容:"
            ls -la || true
            BGM_RESULT=""
          fi
          
          echo "🎵 BGM生成結果 (最初の500文字):"
          echo "$BGM_RESULT" | head -c 500
          echo ""
          
          # 結果からURLまたはファイル名を抽出
          MUSIC_URL=$(echo "$BGM_RESULT" | grep -oP '(https://|gs://)[^\s]+\.(wav|mp3|m4a)' | head -1)
          # Claude Codeの出力からファイル名を抽出（バッククォートで囲まれたファイル名を検索）
          CLAUDE_FILE=$(echo "$BGM_RESULT" | grep -oP '`lyria_output_[^`]+\.wav`' | sed 's/`//g' | head -1)
          if [ ! -z "$CLAUDE_FILE" ]; then
            echo "✅ Claude Codeの出力からファイル名を検出: $CLAUDE_FILE"
          fi
          MUSIC_FILE="bgm-main.wav"
          
          # 直接ダウンロードされたファイルを検索（より包括的に）
          echo "🔍 生成されたファイルを検索中..."
          ls -la || true
          
          # 複数のパターンでファイルを検索
          DOWNLOADED_FILE=""
          
          # パターン0: Claude Codeが明示的に出力したファイル名
          if [ ! -z "$CLAUDE_FILE" ] && [ -f "$CLAUDE_FILE" ]; then
            DOWNLOADED_FILE="$CLAUDE_FILE"
            echo "✅ パターン0（Claude出力）で発見: $DOWNLOADED_FILE"
          fi
          
          # パターン1: lyria_output_で始まるファイル
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "lyria_output_*.wav" -type f 2>/dev/null | head -1)
            [ ! -z "$DOWNLOADED_FILE" ] && echo "✅ パターン1で発見: $DOWNLOADED_FILE"
          fi
          
          # パターン2: musicで始まるファイル
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "music*.wav" -type f 2>/dev/null | head -1)
            [ ! -z "$DOWNLOADED_FILE" ] && echo "✅ パターン2で発見: $DOWNLOADED_FILE"
          fi
          
          # パターン3: 最近作成されたwavファイル
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "*.wav" -type f -mmin -5 2>/dev/null | head -1)
            [ ! -z "$DOWNLOADED_FILE" ] && echo "✅ パターン3で発見: $DOWNLOADED_FILE"
          fi
          
          # パターン4: 任意のwavファイル
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "*.wav" -type f 2>/dev/null | head -1)
            [ ! -z "$DOWNLOADED_FILE" ] && echo "✅ パターン4で発見: $DOWNLOADED_FILE"
          fi
          
          echo "🔍 URL抽出結果: '$MUSIC_URL'"
          echo "📁 ダウンロードされたファイル: '$DOWNLOADED_FILE'"
          
          # ファイル処理（ダウンロード済みファイルを優先）
          if [ ! -z "$DOWNLOADED_FILE" ] && [ -s "$DOWNLOADED_FILE" ]; then
            echo "✅ 既にダウンロードされたファイルを使用: $DOWNLOADED_FILE"
            
            FILE_SIZE=$(stat -c%s "$DOWNLOADED_FILE")
            echo "📊 ファイルサイズ: ${FILE_SIZE} bytes"
            
            # 音声ファイルの簡易検証
            file "$DOWNLOADED_FILE"
            
            # ffmpegでループ拡張
            sudo apt-get update && sudo apt-get install -y ffmpeg
            if ffmpeg -stream_loop -1 -i "$DOWNLOADED_FILE" -t 30 -ar 44100 -ac 2 -c:a pcm_s16le "bgm-main-30s.wav" -y; then
              echo "✅ BGMループ拡張成功"
              echo "music-url=file://$(pwd)/$DOWNLOADED_FILE" >> $GITHUB_OUTPUT
              echo "music-file=bgm-main-30s.wav" >> $GITHUB_OUTPUT
            else
              echo "::error::❌ ffmpeg処理失敗"
              exit 1
            fi
          elif [ ! -z "$MUSIC_URL" ] && [[ "$MUSIC_URL" =~ ^https:// ]]; then
            echo "✅ HTTPS URLからダウンロード: $MUSIC_URL"
            
            # ダウンロードとファイルチェック
            if curl -L "$MUSIC_URL" -o "$MUSIC_FILE" --max-time 60; then
              if [ -s "$MUSIC_FILE" ]; then
                FILE_SIZE=$(stat -c%s "$MUSIC_FILE")
                echo "✅ BGMファイルダウンロード成功 (${FILE_SIZE} bytes)"
                
                # 音声ファイルの簡易検証
                file "$MUSIC_FILE"
                
                # ファイル内容をチェック（XMLエラーかどうか）
                echo "📄 ファイル内容（最初の200文字）:"
                head -c 200 "$MUSIC_FILE" || true
                echo ""
                
                # XMLファイルの場合はエラーとして扱う
                if file "$MUSIC_FILE" | grep -q "XML"; then
                  echo "::error::❌ ダウンロードしたファイルがXMLエラーレスポンスです"
                  echo "::error::ファイル全体の内容:"
                  cat "$MUSIC_FILE"
                  exit 1
                fi
                
                # ffmpegでループ拡張
                sudo apt-get update && sudo apt-get install -y ffmpeg
                if ffmpeg -stream_loop -1 -i "$MUSIC_FILE" -t 30 -ar 44100 -ac 2 -c:a pcm_s16le "bgm-main-30s.wav" -y; then
                  echo "✅ BGMループ拡張成功"
                  echo "music-url=$MUSIC_URL" >> $GITHUB_OUTPUT
                  echo "music-file=bgm-main-30s.wav" >> $GITHUB_OUTPUT
                else
                  echo "::error::❌ ffmpeg処理失敗"
                  exit 1
                fi
              else
                echo "::warning::⚠️ ダウンロードされたファイルが空です"
              fi
            else
              echo "::warning::⚠️ BGMファイルのダウンロードに失敗しました"
            fi
          else
            echo "::warning::⚠️ 有効なURLまたはファイルが見つかりません"
          fi
          
          # BGM生成失敗時はワークフローを停止
          if [ ! -f "bgm-main-30s.wav" ] || [ ! -s "bgm-main-30s.wav" ]; then
            echo "::error::❌ BGM生成に失敗しました"
            echo "::error::詳細なエラーログ:"
            echo "::error::Claude Code実行結果: $BGM_RESULT"
            echo "::error::抽出されたURL: '$MUSIC_URL'"
            echo "::error::現在のディレクトリ内容:"
            ls -la || true
            echo "::error::MCP設定ファイル確認:"
            if [ -f "$MCP_CONFIG_ABS_PATH" ]; then
              echo "::error::MCP設定ファイルが存在します: $MCP_CONFIG_ABS_PATH"
              head -20 "$MCP_CONFIG_ABS_PATH" || true
            else
              echo "::error::MCP設定ファイルが見つかりません: $MCP_CONFIG_ABS_PATH"
            fi
            exit 1
          fi
          
          # 最終ファイルチェック
          if [ -f "bgm-main-30s.wav" ]; then
            FINAL_SIZE=$(stat -c%s "bgm-main-30s.wav")
            echo "✅ 最終BGMファイル生成完了 (${FINAL_SIZE} bytes)"
          else
            echo "::error::❌ 最終BGMファイルの生成に失敗しました"
            exit 1
          fi
          
          echo "::endgroup::"
      
      - name: Upload BGM artifact
        uses: actions/upload-artifact@v4
        with:
          name: bgm-main
          path: bgm-main-30s.wav
          retention-days: 1