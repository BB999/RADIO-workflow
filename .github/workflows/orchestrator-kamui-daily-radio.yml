name: Kamui Daily Radio Production (Minimal)
on:
  workflow_dispatch:
    inputs:
      auto-collect:
        description: 'Notionから文字起こしを自動収集'
        required: false
        type: boolean
        default: true
      development-report:
        description: '神威アプリの開発進捗・最新情報（自動収集がOFFの場合は必須）'
        required: false
        type: string
      public:
        description: '公開設定'
        required: false
        type: boolean
        default: false
      gemini-summary:
        description: 'Geminiまとめ'
        required: false
        type: boolean
        default: false
  schedule:
    # 日本時間 朝6時（UTC 21時 前日）に実行
    - cron: '0 21 * * *'
    # 日本時間 午後3時（UTC 6時）に実行  
    - cron: '0 6 * * *'

permissions:
  contents: write  # リリース作成に必要
  pull-requests: write  # PR作成に必要

jobs:
  api-check:
    runs-on: ubuntu-latest
    outputs:
      api-status: ${{ steps.check.outputs.status }}
    steps:
      - name: Check API availability
        id: check
        run: |
          echo "🔍 API接続チェック開始..."
          
          AIVIS_STATUS="failed"
          
          # AIVIS Cloud API 動作チェック
          echo "📡 AIVIS Cloud API 動作チェック中..."
          
          # APIキー確認
          if [ -z "${{ secrets.AIVIS_API_KEY }}" ]; then
            echo "::error::AIVIS_API_KEY が設定されていません"
            echo "::error::GitHub Secrets に AIVIS_API_KEY を設定してください"
            AIVIS_STATUS="missing_key"
          else
            echo "✅ APIキーが設定されています (先頭10文字: ${AIVIS_API_KEY:0:10}...)"
            
            # 詳細なcurlリクエスト実行
            echo "🔍 API接続テスト開始..."
            echo "  エンドポイント: https://api.aivis-project.com/v1/tts/synthesize"
            echo "  リクエストボディ: {\"model_uuid\": \"test\", \"text\": \"テスト\", \"output_format\": \"wav\"}"
            
            # レスポンスファイルの準備
            RESPONSE_FILE="aivis_response.json"
            ERROR_FILE="aivis_error.txt"
            
            # curlコマンド実行（詳細ログ付き）
            HTTP_STATUS=$(curl -s -w "%{http_code}" \
              -X POST "https://api.aivis-project.com/v1/tts/synthesize" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.AIVIS_API_KEY }}" \
              -d '{
                "model_uuid": "test",
                "text": "テスト",
                "output_format": "wav"
              }' \
              --connect-timeout 30 \
              --max-time 60 \
              -o "$RESPONSE_FILE" \
              --stderr "$ERROR_FILE" \
              --verbose) || {
                echo "::error::curl実行に失敗しました"
                echo "::error::curlエラー詳細:"
                cat "$ERROR_FILE" || echo "エラーファイルを読み取れません"
                HTTP_STATUS="000"
            }
            
            echo "📊 APIレスポンス詳細:"
            echo "  HTTPステータスコード: $HTTP_STATUS"
            echo "  レスポンスファイルサイズ: $(stat -c%s "$RESPONSE_FILE" 2>/dev/null || echo "0") bytes"
            
            # レスポンス内容の表示（最初の500文字）
            if [ -f "$RESPONSE_FILE" ]; then
              echo "  レスポンス内容（先頭500文字）:"
              head -c 500 "$RESPONSE_FILE" || echo "レスポンス内容を読み取れません"
            fi
            
            # エラーファイルの表示
            if [ -f "$ERROR_FILE" ] && [ -s "$ERROR_FILE" ]; then
              echo "  curlエラー出力:"
              cat "$ERROR_FILE"
            fi
            
            # ステータス判定
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ AIVIS Cloud API 動作確認成功"
              AIVIS_STATUS="ok"
            elif [ "$HTTP_STATUS" = "422" ]; then
              echo "✅ AIVIS Cloud API 動作確認成功 (テストパラメータによる検証応答)"
              echo "  APIサーバーが正常に応答し、リクエスト形式の検証が動作しています"
              AIVIS_STATUS="ok"
            elif [ "$HTTP_STATUS" = "401" ]; then
              echo "::error::AIVIS Cloud API 認証失敗 (HTTP 401)"
              echo "::error::APIキーが無効または期限切れの可能性があります"
            elif [ "$HTTP_STATUS" = "403" ]; then
              echo "::error::AIVIS Cloud API アクセス拒否 (HTTP 403)"
              echo "::error::APIキーに十分な権限がない可能性があります"
            elif [ "$HTTP_STATUS" = "429" ]; then
              echo "::error::AIVIS Cloud API レート制限 (HTTP 429)"
              echo "::error::リクエスト数が制限に達しました。後で再試行してください"
            elif [ "$HTTP_STATUS" = "000" ]; then
              echo "::error::AIVIS Cloud API 接続失敗"
              echo "::error::ネットワーク接続またはタイムアウトエラーです"
            else
              echo "::error::AIVIS Cloud API 予期しないエラー (HTTP $HTTP_STATUS)"
              echo "::error::サービス側の問題の可能性があります"
            fi
            
            # 一時ファイルのクリーンアップ
            rm -f "$RESPONSE_FILE" "$ERROR_FILE"
          fi
          
          # 全体ステータス判定
          if [ "$AIVIS_STATUS" = "ok" ]; then
            echo "✅ AIVIS Cloud API動作チェック完了 - 処理を続行します"
            echo "status=ready" >> $GITHUB_OUTPUT
          else
            echo "::error::AIVIS Cloud APIの動作チェックに失敗しました。ワークフローを停止します。"
            echo "aivis_status=$AIVIS_STATUS" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi


  # 文字起こし自動収集（APIチェック後に実行）
  auto-collect-transcript:
    needs: api-check
    if: ${{ (inputs.auto-collect == true || github.event_name == 'schedule') && needs.api-check.result == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      transcript: ${{ steps.collect.outputs.transcript }}
      has_transcript: ${{ steps.collect.outputs.has_transcript }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      
      - name: Install Python dependencies
        run: |
          pip install selenium webdriver-manager pytz python-dotenv requests
      
      - name: Run auto collector
        id: collect
        env:
          NOTION_URL: ${{ secrets.NOTION_URL }}
          GITHUB_ACTIONS: true
        run: |
          cd radio-workflow/scripts
          python auto_daily_collector.py
          
          # 文字起こしファイルの存在確認
          if [ -f transcript.txt ]; then
            echo "has_transcript=true" >> $GITHUB_OUTPUT
            echo "✅ 文字起こし自動収集成功"
            echo "文字数: $(wc -c < transcript.txt)"
          else
            echo "has_transcript=false" >> $GITHUB_OUTPUT
            echo "❌ 文字起こしの自動収集に失敗しました"
            exit 1
          fi
      
      - name: Upload transcript artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: auto-collected-transcript
          path: radio-workflow/scripts/transcript.txt

  planning:
    needs: [api-check, auto-collect-transcript]
    if: |
      always() && 
      needs.api-check.result == 'success' &&
      (needs.auto-collect-transcript.result == 'skipped' || needs.auto-collect-transcript.outputs.has_transcript == 'true')
    uses: ./.github/workflows/module-radio-planning.yml
    with:
      processed-summary: ''
      use-processed-input: false
      use-auto-collected: ${{ (inputs.auto-collect == true || github.event_name == 'schedule') && needs.auto-collect-transcript.outputs.has_transcript == 'true' }}
      development-report: ${{ inputs.development-report || '' }}
    secrets: inherit

  voice-opening:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-opening.yml
    with:
      script-text: ${{ needs.planning.outputs.script-opening }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-main:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-main.yml
    with:
      script-text: ${{ needs.planning.outputs.script-main }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-main-part2:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-main-part2.yml
    with:
      script-text: ${{ needs.planning.outputs.script-main-part2 }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-ending:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-ending.yml
    with:
      script-text: ${{ needs.planning.outputs.script-ending }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-jingle:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-jingle.yml
    with:
      script-text: ${{ needs.planning.outputs.script-jingle }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  bgm-opening:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-bgm-generation-opening.yml
    secrets: inherit

  bgm-main:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-bgm-generation-main.yml
    secrets: inherit

  bgm-main-part2:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-bgm-generation-main-part2.yml
    secrets: inherit

  bgm-ending:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-bgm-generation-ending.yml
    secrets: inherit

  bgm-jingle:
    needs: planning
    uses: ./.github/workflows/module-bgm-generation-jingle.yml
    secrets: inherit

  image-generation:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-image-generation.yml
    secrets: inherit

  audio-mixing-opening:
    needs: [voice-opening, bgm-opening]
    if: success()  # オープニング音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-opening.yml
    with:
      voice-opening: ${{ needs.voice-opening.outputs.audio-file }}
      bgm-opening: ${{ needs.bgm-opening.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-main:
    needs: [voice-main, bgm-main]
    if: success()  # メイン前半音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-main.yml
    with:
      voice-main: ${{ needs.voice-main.outputs.audio-file }}
      bgm-main: ${{ needs.bgm-main.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-main-part2:
    needs: [voice-main-part2, bgm-main-part2]
    if: success()  # メイン後半音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-main-part2.yml
    with:
      voice-main-part2: ${{ needs.voice-main-part2.outputs.audio-file }}
      bgm-main-part2: ${{ needs.bgm-main-part2.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-ending:
    needs: [voice-ending, bgm-ending]
    if: success()  # エンディング音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-ending.yml
    with:
      voice-ending: ${{ needs.voice-ending.outputs.audio-file }}
      bgm-ending: ${{ needs.bgm-ending.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-jingle:
    needs: [voice-jingle, bgm-jingle]
    if: success()  # ジングル音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-jingle.yml
    with:
      voice-jingle: ${{ needs.voice-jingle.outputs.audio-file }}
      bgm-jingle: ${{ needs.bgm-jingle.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-final:
    needs: [audio-mixing-opening, audio-mixing-main, audio-mixing-main-part2, audio-mixing-jingle, audio-mixing-ending, image-generation]
    if: success()  # 全てのセクション音声ミキシングと画像生成が成功した場合のみ最終結合実行
    uses: ./.github/workflows/module-audio-mixing-final.yml
    with:
      opening-audio: ${{ needs.audio-mixing-opening.outputs.mixed-audio }}
      main-audio: ${{ needs.audio-mixing-main.outputs.mixed-audio }}
      main-part2-audio: ${{ needs.audio-mixing-main-part2.outputs.mixed-audio }}
      jingle-audio: ${{ needs.audio-mixing-jingle.outputs.mixed-audio }}
      ending-audio: ${{ needs.audio-mixing-ending.outputs.mixed-audio }}
    secrets: inherit

  publish:
    needs: [audio-mixing-final, image-generation]
    if: success()  # 音声ミキシングと画像生成が成功した場合のみリリース実行
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download final audio artifact
        uses: actions/download-artifact@v4
        with:
          name: final-audio
          path: release-files
      
      - name: Download radio image artifact
        uses: actions/download-artifact@v4
        with:
          name: radio-image
          path: release-files
      
      - name: List release files
        run: |
          echo "::group::📁 リリースファイル"
          ls -la release-files/
          echo "::endgroup::"
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: radio-${{ github.run_id }}
          name: 神威日報振り返りエンターテインメントラジオ「KAMURAJI」${{ steps.date.outputs.date }}
          body: |
            ## 🎙️ 神威日報振り返りエンターテインメントラジオ「KAMURAJI」
            
            ### 番組情報
            - 放送日: ${{ steps.date.outputs.date }}
            - 時間: 240秒（4分）
            - MC: AI生成（20代女性）
            
            ### 内容
            神威アプリの最新開発情報をお届けします。
            
            ### 📜 今回の台本
            
            **オープニング:**
            ${{ needs.planning.outputs.script-opening }}
            
            **メイン前半:**
            ${{ needs.planning.outputs.script-main }}
            
            **メイン後半:**
            ${{ needs.planning.outputs.script-main-part2 }}
            
            **エンディング:**
            ${{ needs.planning.outputs.script-ending }}
            
            **ジングル:**
            ${{ needs.planning.outputs.script-jingle }}
            
            ### 📁 生成ファイル
            - 音声ファイル: final-radio.mp3
            - 画像ファイル: radio-title.png
            - メタデータ: metadata.json
            
            🎵 Generated with [Claude Code](https://claude.ai/code)
          files: |
            release-files/final-radio.mp3
            release-files/radio-title.png
            release-files/metadata.json


  summary:
    needs: [planning, voice-opening, voice-main, voice-main-part2, voice-ending, voice-jingle, bgm-opening, bgm-main, bgm-main-part2, bgm-ending, bgm-jingle, audio-mixing-final, publish, podcast-publish]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate workflow summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎙️ ラジオ番組制作結果
          
          | ステップ | 状態 | 結果 |
          |---------|------|-----|
          | 台本生成 | ${{ needs.planning.result }} | ${{ needs.planning.result == 'success' && '✅' || '❌' }} |
          | 音声生成(開始) | ${{ needs.voice-opening.result }} | ${{ needs.voice-opening.result == 'success' && '✅' || needs.voice-opening.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(前半) | ${{ needs.voice-main.result }} | ${{ needs.voice-main.result == 'success' && '✅' || needs.voice-main.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(後半) | ${{ needs.voice-main-part2.result }} | ${{ needs.voice-main-part2.result == 'success' && '✅' || needs.voice-main-part2.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(終了) | ${{ needs.voice-ending.result }} | ${{ needs.voice-ending.result == 'success' && '✅' || needs.voice-ending.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(ジングル) | ${{ needs.voice-jingle.result }} | ${{ needs.voice-jingle.result == 'success' && '✅' || needs.voice-jingle.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(開始) | ${{ needs.bgm-opening.result }} | ${{ needs.bgm-opening.result == 'success' && '✅' || needs.bgm-opening.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(前半) | ${{ needs.bgm-main.result }} | ${{ needs.bgm-main.result == 'success' && '✅' || needs.bgm-main.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(後半) | ${{ needs.bgm-main-part2.result }} | ${{ needs.bgm-main-part2.result == 'success' && '✅' || needs.bgm-main-part2.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(終了) | ${{ needs.bgm-ending.result }} | ${{ needs.bgm-ending.result == 'success' && '✅' || needs.bgm-ending.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(ジングル) | ${{ needs.bgm-jingle.result }} | ${{ needs.bgm-jingle.result == 'success' && '✅' || needs.bgm-jingle.result == 'failure' && '❌' || '⚠️' }} |
          | 音声合成 | ${{ needs.audio-mixing-final.result }} | ${{ needs.audio-mixing-final.result == 'success' && '✅' || '❌' }} |
          | リリース作成 | ${{ needs.publish.result }} | ${{ needs.publish.result == 'success' && '✅' || '❌' }} |
          
          ### 📊 統計情報
          - ワークフロー実行ID: ${{ github.run_id }}
          - 音声品質: -23 LUFS (放送基準)
          - 並列処理: 6つのモジュールを同時実行
          EOF

  line-notification:
    needs: [api-check, auto-collect-transcript, planning, voice-opening, voice-main, voice-main-part2, voice-ending, voice-jingle, bgm-opening, bgm-main, bgm-main-part2, bgm-ending, bgm-jingle, audio-mixing-final, publish, podcast-publish, summary]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send LINE notification
        env:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        run: |
          COMPLETION_TIME=$(date "+%Y/%m/%d %H:%M:%S")
          STATUS_EMOJI="✅"
          STATUS_TEXT="完了"
          
          # 全体の成功判定
          if [[ "${{ needs.api-check.result }}" != "success" ]] || \
             [[ "${{ needs.planning.result }}" != "success" ]] || \
             [[ "${{ needs.voice-opening.result }}" != "success" ]] || \
             [[ "${{ needs.voice-main.result }}" != "success" ]] || \
             [[ "${{ needs.voice-main-part2.result }}" != "success" ]] || \
             [[ "${{ needs.voice-ending.result }}" != "success" ]] || \
             [[ "${{ needs.voice-jingle.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-opening.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-main.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-main-part2.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-ending.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-jingle.result }}" != "success" ]] || \
             [[ "${{ needs.audio-mixing-final.result }}" != "success" ]] || \
             [[ "${{ needs.publish.result }}" != "success" ]]; then
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="一部失敗"
          fi
          
          # 各ステップの状態確認
          API_STATUS="${{ needs.api-check.result == 'success' && '✅ 利用可能' || '❌ API確認失敗' }}"
          PLANNING_STATUS="${{ needs.planning.result == 'success' && '✅' || '❌ 台本生成失敗' }}"
          VOICE_OPENING_STATUS="${{ needs.voice-opening.result == 'success' && '✅' || '❌' }}"
          VOICE_MAIN_STATUS="${{ needs.voice-main.result == 'success' && '✅' || '❌' }}"
          VOICE_MAIN_PART2_STATUS="${{ needs.voice-main-part2.result == 'success' && '✅' || '❌' }}"
          VOICE_ENDING_STATUS="${{ needs.voice-ending.result == 'success' && '✅' || '❌' }}"
          VOICE_JINGLE_STATUS="${{ needs.voice-jingle.result == 'success' && '✅' || '❌' }}"
          BGM_OPENING_STATUS="${{ needs.bgm-opening.result == 'success' && '✅' || '❌' }}"
          BGM_MAIN_STATUS="${{ needs.bgm-main.result == 'success' && '✅' || '❌' }}"
          BGM_MAIN_PART2_STATUS="${{ needs.bgm-main-part2.result == 'success' && '✅' || '❌' }}"
          BGM_ENDING_STATUS="${{ needs.bgm-ending.result == 'success' && '✅' || '❌' }}"
          BGM_JINGLE_STATUS="${{ needs.bgm-jingle.result == 'success' && '✅' || '❌' }}"
          MIXING_STATUS="${{ needs.audio-mixing-final.result == 'success' && '✅' || '❌ ミキシング失敗' }}"
          PUBLISH_STATUS="${{ needs.publish.result == 'success' && '✅' || '❌ リリース作成失敗' }}"
          
          # LINE通知送信（簡潔版）
          curl -X POST https://api.line.me/v2/bot/message/push \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${LINE_CHANNEL_ACCESS_TOKEN}" \
            -d "{
              \"to\": \"${LINE_USER_ID}\",
              \"messages\": [
                {
                  \"type\": \"text\",
                  \"text\": \"${STATUS_EMOJI} 神威日報ラジオ制作${STATUS_TEXT}！\\n\\n📻 ワークフロー実行結果\\n⏰ 完成時刻: ${COMPLETION_TIME}\\n\\n📊 制作結果:\\n・台本生成: ${PLANNING_STATUS}\\n・音声生成: ${VOICE_OPENING_STATUS} ${VOICE_MAIN_STATUS} ${VOICE_ENDING_STATUS}\\n・BGM生成: ${BGM_OPENING_STATUS} ${BGM_MAIN_STATUS} ${BGM_ENDING_STATUS}\\n・ミキシング: ${MIXING_STATUS}\\n・リリース: ${PUBLISH_STATUS}\\n\\n📋 実行ID: ${{ github.run_id }}\"
                }
              ]
            }"

  podcast-publish:
    needs: [publish]
    if: success()
    uses: ./.github/workflows/podcast-publish.yml
    with:
      episode-number: "${{ github.run_number }}"
      episode-title: "神威日報振り返りエンターテインメントラジオ「KAMURAJI」"
      episode-description: ""
      audio-url: "https://github.com/${{ github.repository }}/releases/download/radio-${{ github.run_id }}/final-radio.mp3"
      image-url: "https://github.com/${{ github.repository }}/releases/download/radio-${{ github.run_id }}/radio-title.png"
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}