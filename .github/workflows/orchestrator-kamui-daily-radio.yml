name: Kamui Daily Radio Production (Minimal)
on:
  workflow_dispatch:
    inputs:
      development-report:
        description: '神威アプリの開発進捗・最新情報'
        required: true
        type: string
      topic-focus:
        description: '特に強調したいトピック（オプション）'
        required: false
        type: string

permissions:
  contents: write  # リリース作成に必要
  pull-requests: write  # PR作成に必要

jobs:
  api-check:
    runs-on: ubuntu-latest
    outputs:
      api-status: ${{ steps.check.outputs.status }}
    steps:
      - name: Check API availability
        id: check
        run: |
          echo "🔍 API接続チェック開始..."
          
          CLAUDE_STATUS="failed"
          AIVIS_STATUS="failed"
          
          # Claude API (Anthropic) 動作チェック
          echo "📡 Claude API 動作チェック中..."
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "::error::ANTHROPIC_API_KEY が設定されていません"
          else
            # 軽量なAPIリクエストでテスト（短いメッセージで最小限の利用）
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              -X POST "https://api.anthropic.com/v1/messages" \
              -H "Content-Type: application/json" \
              -H "x-api-key: ${{ secrets.ANTHROPIC_API_KEY }}" \
              -H "anthropic-version: 2023-06-01" \
              -d '{
                "model": "claude-3-haiku-20240307",
                "max_tokens": 10,
                "messages": [{"role": "user", "content": "test"}]
              }')
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Claude API 動作確認成功"
              CLAUDE_STATUS="ok"
            elif [ "$HTTP_STATUS" = "401" ]; then
              echo "::error::Claude API 認証失敗 (HTTP 401) - APIキーが無効です"
            elif [ "$HTTP_STATUS" = "429" ]; then
              echo "::error::Claude API レート制限 (HTTP 429) - 後で再試行してください"
            else
              echo "::error::Claude API エラー (HTTP $HTTP_STATUS)"
            fi
          fi
          
          # AIVIS Cloud API 動作チェック
          echo "📡 AIVIS Cloud API 動作チェック中..."
          if [ -z "${{ secrets.AIVIS_API_KEY }}" ]; then
            echo "::error::AIVIS_API_KEY が設定されていません"
          else
            # AIVIS APIのヘルスチェックエンドポイント（または軽量テスト）
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              -X POST "https://api.aivis.club/v1/audio/speech" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.AIVIS_API_KEY }}" \
              -d '{
                "model": "tts-1",
                "input": "test",
                "voice": "alloy",
                "response_format": "mp3"
              }' \
              --connect-timeout 30)
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ AIVIS Cloud API 動作確認成功"
              AIVIS_STATUS="ok"
            elif [ "$HTTP_STATUS" = "401" ] || [ "$HTTP_STATUS" = "403" ]; then
              echo "::error::AIVIS Cloud API 認証失敗 (HTTP $HTTP_STATUS) - APIキーが無効です"
            elif [ "$HTTP_STATUS" = "429" ]; then
              echo "::error::AIVIS Cloud API レート制限 (HTTP 429) - 後で再試行してください"
            else
              echo "::error::AIVIS Cloud API エラー (HTTP $HTTP_STATUS)"
            fi
          fi
          
          # 全体ステータス判定
          if [ "$CLAUDE_STATUS" = "ok" ] && [ "$AIVIS_STATUS" = "ok" ]; then
            echo "✅ 全てのAPI動作チェック完了 - 処理を続行します"
            echo "status=ready" >> $GITHUB_OUTPUT
          else
            echo "::error::APIの動作チェックに失敗しました。ワークフローを停止します。"
            echo "claude_status=$CLAUDE_STATUS" >> $GITHUB_OUTPUT
            echo "aivis_status=$AIVIS_STATUS" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  planning:
    needs: api-check
    uses: ./.github/workflows/module-radio-planning.yml
    with:
      development-report: ${{ inputs.development-report }}
      topic-focus: ${{ inputs.topic-focus }}
    secrets: inherit

  voice-opening:
    needs: planning
    uses: ./.github/workflows/module-voice-generation-opening.yml
    with:
      script-text: ${{ needs.planning.outputs.script-opening }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-main:
    needs: planning
    uses: ./.github/workflows/module-voice-generation-main.yml
    with:
      script-text: ${{ needs.planning.outputs.script-main }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-ending:
    needs: planning
    uses: ./.github/workflows/module-voice-generation-ending.yml
    with:
      script-text: ${{ needs.planning.outputs.script-ending }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  bgm-opening:
    needs: planning
    uses: ./.github/workflows/module-bgm-generation-opening.yml
    secrets: inherit

  bgm-main:
    needs: planning
    uses: ./.github/workflows/module-bgm-generation-main.yml
    secrets: inherit

  bgm-ending:
    needs: planning
    uses: ./.github/workflows/module-bgm-generation-ending.yml
    secrets: inherit

  audio-mixing:
    needs: [voice-opening, voice-main, voice-ending, bgm-opening, bgm-main, bgm-ending]
    if: success()  # 全ての音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing.yml
    with:
      voice-opening: ${{ needs.voice-opening.outputs.audio-file }}
      voice-main: ${{ needs.voice-main.outputs.audio-file }}
      voice-ending: ${{ needs.voice-ending.outputs.audio-file }}
      bgm-opening: ${{ needs.bgm-opening.outputs.bgm-file }}
      bgm-main: ${{ needs.bgm-main.outputs.bgm-file }}
      bgm-ending: ${{ needs.bgm-ending.outputs.bgm-file }}
    secrets: inherit

  publish:
    needs: audio-mixing
    if: false  # リリース無効化
    runs-on: ubuntu-latest
    steps:
      - name: Download final audio artifact
        uses: actions/download-artifact@v4
        with:
          name: final-audio
          path: release-files
      
      - name: List release files
        run: |
          echo "::group::📁 リリースファイル"
          ls -la release-files/
          echo "::endgroup::"
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: radio-${{ github.run_id }}
          name: 神威日報ラジオ - ${{ steps.date.outputs.date }}
          body: |
            ## 🎙️ 神威日報ラジオ
            
            ### 番組情報
            - 放送日: ${{ steps.date.outputs.date }}
            - 時間: 240秒（4分）
            - MC: AI生成（20代女性）
            
            ### 内容
            神威アプリの最新開発情報をお届けします。
            
            **開発進捗**: ${{ inputs.development-report }}
            **強調ポイント**: ${{ inputs.topic-focus || 'なし' }}
            
            🎵 Generated with [Claude Code](https://claude.ai/code)
          files: |
            release-files/final-radio.mp3
            release-files/metadata.json

  create-pr:
    needs: [planning, audio-mixing]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download final audio artifact
        uses: actions/download-artifact@v4
        with:
          name: final-audio
          path: radio-output
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Create feature branch
        run: |
          BRANCH_NAME="radio/daily-radio-${{ steps.date.outputs.date }}-${{ github.run_id }}"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        id: branch
      
      - name: Commit generated files
        run: |
          # 生成されたファイルをradio-outputディレクトリに配置
          mkdir -p radio-output
          
          # Gitに追加
          git add radio-output/
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git commit -m "$(cat <<'EOF'
          神威日報ラジオ生成 - ${{ steps.date.outputs.date }}
          
          - 音声ファイル: final-radio.mp3 (240秒、-23 LUFS)
          - メタデータ: metadata.json
          - 開発進捗: ${{ inputs.development-report }}
          - 強調ポイント: ${{ inputs.topic-focus || 'なし' }}
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF
          )"
      
      - name: Push branch
        run: |
          git push origin "${{ steps.branch.outputs.branch_name }}"
      
      - name: Create Pull Request
        run: |
          # 台本の内容を取得してSSMLタグを除去
          OPENING_TEXT=$(echo "${{ needs.planning.outputs.script-opening }}" | sed 's/<[^>]*>//g' | sed 's/^ *//' | sed 's/ *$//')
          MAIN_TEXT=$(echo "${{ needs.planning.outputs.script-main }}" | sed 's/<[^>]*>//g' | sed 's/^ *//' | sed 's/ *$//')
          ENDING_TEXT=$(echo "${{ needs.planning.outputs.script-ending }}" | sed 's/<[^>]*>//g' | sed 's/^ *//' | sed 's/ *$//')
          
          # PRボディを直接作成
          gh pr create \
            --title "🎙️ 神威日報ラジオ - ${{ steps.date.outputs.date }}" \
            --body "## 🎙️ 神威日報ラジオ生成完了

          ### 📊 番組情報
          - **放送日**: ${{ steps.date.outputs.date }}
          - **時間**: 240秒（4分）
          - **音声品質**: -23 LUFS (放送基準)
          - **MC**: AI生成（20代女性）

          ### 📝 生成された台本

          #### オープニング
          ${OPENING_TEXT}

          #### メインコンテンツ
          ${MAIN_TEXT}

          #### エンディング
          ${ENDING_TEXT}

          ### 📁 生成ファイル
          - \`radio-output/final-radio.mp3\` - 完成したラジオ番組音声
          - \`radio-output/metadata.json\` - 番組メタデータ

          ### 🔗 関連リンク
          - [リリース](https://github.com/${{ github.repository }}/releases/tag/radio-${{ github.run_id }})
          - [ワークフロー実行](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### ✅ テストプラン
          - [ ] 音声ファイルの再生確認
          - [ ] 音声品質の確認 (-23 LUFS)
          - [ ] メタデータの内容確認
          - [ ] 台本の内容確認

          🤖 Generated with [Claude Code](https://claude.ai/code)"
        env:
          GH_TOKEN: ${{ github.token }}

  summary:
    needs: [planning, voice-opening, voice-main, voice-ending, bgm-opening, bgm-main, bgm-ending, audio-mixing, create-pr]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate workflow summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎙️ ラジオ番組制作結果
          
          | ステップ | 状態 | 結果 |
          |---------|------|-----|
          | 台本生成 | ${{ needs.planning.result }} | ${{ needs.planning.result == 'success' && '✅' || '❌' }} |
          | 音声生成(開始) | ${{ needs.voice-opening.result }} | ${{ needs.voice-opening.result == 'success' && '✅' || needs.voice-opening.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(本編) | ${{ needs.voice-main.result }} | ${{ needs.voice-main.result == 'success' && '✅' || needs.voice-main.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(終了) | ${{ needs.voice-ending.result }} | ${{ needs.voice-ending.result == 'success' && '✅' || needs.voice-ending.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(開始) | ${{ needs.bgm-opening.result }} | ${{ needs.bgm-opening.result == 'success' && '✅' || needs.bgm-opening.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(本編) | ${{ needs.bgm-main.result }} | ${{ needs.bgm-main.result == 'success' && '✅' || needs.bgm-main.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(終了) | ${{ needs.bgm-ending.result }} | ${{ needs.bgm-ending.result == 'success' && '✅' || needs.bgm-ending.result == 'failure' && '❌' || '⚠️' }} |
          | 音声合成 | ${{ needs.audio-mixing.result }} | ${{ needs.audio-mixing.result == 'success' && '✅' || '❌' }} |
          | リリース作成 | ${{ needs.publish.result }} | ${{ needs.publish.result == 'success' && '✅' || '❌' }} |
          
          ### 📊 統計情報
          - ワークフロー実行ID: ${{ github.run_id }}
          - 音声品質: -23 LUFS (放送基準)
          - 並列処理: 6つのモジュールを同時実行
          EOF

  line-notification:
    needs: [planning, voice-opening, voice-main, voice-ending, bgm-opening, bgm-main, bgm-ending, audio-mixing, create-pr, summary]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send LINE notification
        run: |
          COMPLETION_TIME=$(date "+%Y/%m/%d %H:%M:%S")
          STATUS_EMOJI="✅"
          if [[ "${{ needs.audio-mixing.result }}" != "success" ]]; then
            STATUS_EMOJI="❌"
          fi
          
          curl -X POST https://api.line.me/v2/bot/message/push \
            -H 'Content-Type: application/json' \
            -H 'Authorization: Bearer ${{ secrets.LINE_BOT_CHANNEL_ACCESS_TOKEN }}' \
            -d "{
              \"to\": \"${{ secrets.LINE_USER_ID }}\",
              \"messages\": [
                {
                  \"type\": \"text\",
                  \"text\": \"${STATUS_EMOJI} 神威日報ラジオ制作完了！\n\n📻 新しいエピソードの制作が完了しました。\n⏰ 完成時刻: ${COMPLETION_TIME}\n\n📊 制作結果:\n・台本生成: ${{ needs.planning.result == 'success' && '✅' || '❌' }}\n・音声合成: ${{ needs.audio-mixing.result == 'success' && '✅' || '❌' }}\n・プルリク作成: ${{ needs.create-pr.result == 'success' && '✅' || '❌' }}\"
                }
              ]
            }"