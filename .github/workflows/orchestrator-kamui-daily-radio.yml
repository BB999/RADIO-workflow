name: Kamui Daily Radio Production (Minimal)
on:
  workflow_dispatch:
    inputs:
      development-report:
        description: '神威アプリの開発進捗・最新情報'
        required: true
        type: string
      public:
        description: '公開設定'
        required: false
        type: boolean
        default: false
      gemini-summary:
        description: 'Geminiまとめ'
        required: false
        type: boolean
        default: false

permissions:
  contents: write  # リリース作成に必要
  pull-requests: write  # PR作成に必要

jobs:
  api-check:
    runs-on: ubuntu-latest
    outputs:
      api-status: ${{ steps.check.outputs.status }}
    steps:
      - name: Check API availability
        id: check
        run: |
          echo "🔍 API接続チェック開始..."
          
          AIVIS_STATUS="failed"
          
          # AIVIS Cloud API 動作チェック
          echo "📡 AIVIS Cloud API 動作チェック中..."
          
          # APIキー確認
          if [ -z "${{ secrets.AIVIS_API_KEY }}" ]; then
            echo "::error::AIVIS_API_KEY が設定されていません"
            echo "::error::GitHub Secrets に AIVIS_API_KEY を設定してください"
            AIVIS_STATUS="missing_key"
          else
            echo "✅ APIキーが設定されています (先頭10文字: ${AIVIS_API_KEY:0:10}...)"
            
            # 詳細なcurlリクエスト実行
            echo "🔍 API接続テスト開始..."
            echo "  エンドポイント: https://api.aivis-project.com/v1/tts/synthesize"
            echo "  リクエストボディ: {\"model_uuid\": \"test\", \"text\": \"テスト\", \"output_format\": \"wav\"}"
            
            # レスポンスファイルの準備
            RESPONSE_FILE="aivis_response.json"
            ERROR_FILE="aivis_error.txt"
            
            # curlコマンド実行（詳細ログ付き）
            HTTP_STATUS=$(curl -s -w "%{http_code}" \
              -X POST "https://api.aivis-project.com/v1/tts/synthesize" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.AIVIS_API_KEY }}" \
              -d '{
                "model_uuid": "test",
                "text": "テスト",
                "output_format": "wav"
              }' \
              --connect-timeout 30 \
              --max-time 60 \
              -o "$RESPONSE_FILE" \
              --stderr "$ERROR_FILE" \
              --verbose) || {
                echo "::error::curl実行に失敗しました"
                echo "::error::curlエラー詳細:"
                cat "$ERROR_FILE" || echo "エラーファイルを読み取れません"
                HTTP_STATUS="000"
            }
            
            echo "📊 APIレスポンス詳細:"
            echo "  HTTPステータスコード: $HTTP_STATUS"
            echo "  レスポンスファイルサイズ: $(stat -c%s "$RESPONSE_FILE" 2>/dev/null || echo "0") bytes"
            
            # レスポンス内容の表示（最初の500文字）
            if [ -f "$RESPONSE_FILE" ]; then
              echo "  レスポンス内容（先頭500文字）:"
              head -c 500 "$RESPONSE_FILE" || echo "レスポンス内容を読み取れません"
            fi
            
            # エラーファイルの表示
            if [ -f "$ERROR_FILE" ] && [ -s "$ERROR_FILE" ]; then
              echo "  curlエラー出力:"
              cat "$ERROR_FILE"
            fi
            
            # ステータス判定
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ AIVIS Cloud API 動作確認成功"
              AIVIS_STATUS="ok"
            elif [ "$HTTP_STATUS" = "422" ]; then
              echo "✅ AIVIS Cloud API 動作確認成功 (テストパラメータによる検証応答)"
              echo "  APIサーバーが正常に応答し、リクエスト形式の検証が動作しています"
              AIVIS_STATUS="ok"
            elif [ "$HTTP_STATUS" = "401" ]; then
              echo "::error::AIVIS Cloud API 認証失敗 (HTTP 401)"
              echo "::error::APIキーが無効または期限切れの可能性があります"
            elif [ "$HTTP_STATUS" = "403" ]; then
              echo "::error::AIVIS Cloud API アクセス拒否 (HTTP 403)"
              echo "::error::APIキーに十分な権限がない可能性があります"
            elif [ "$HTTP_STATUS" = "429" ]; then
              echo "::error::AIVIS Cloud API レート制限 (HTTP 429)"
              echo "::error::リクエスト数が制限に達しました。後で再試行してください"
            elif [ "$HTTP_STATUS" = "000" ]; then
              echo "::error::AIVIS Cloud API 接続失敗"
              echo "::error::ネットワーク接続またはタイムアウトエラーです"
            else
              echo "::error::AIVIS Cloud API 予期しないエラー (HTTP $HTTP_STATUS)"
              echo "::error::サービス側の問題の可能性があります"
            fi
            
            # 一時ファイルのクリーンアップ
            rm -f "$RESPONSE_FILE" "$ERROR_FILE"
          fi
          
          # 全体ステータス判定
          if [ "$AIVIS_STATUS" = "ok" ]; then
            echo "✅ AIVIS Cloud API動作チェック完了 - 処理を続行します"
            echo "status=ready" >> $GITHUB_OUTPUT
          else
            echo "::error::AIVIS Cloud APIの動作チェックに失敗しました。ワークフローを停止します。"
            echo "aivis_status=$AIVIS_STATUS" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  input-processing:
    needs: api-check
    if: ${{ inputs.gemini-summary == true }}
    uses: ./.github/workflows/module-input-processing.yml
    with:
      development-report: ${{ inputs.development-report }}
    secrets: inherit

  planning:
    needs: [api-check]
    if: needs.api-check.result == 'success'
    uses: ./.github/workflows/module-radio-planning.yml
    with:
      processed-summary: ''
      use-processed-input: false
      development-report: ${{ inputs.development-report }}
    secrets: inherit

  voice-opening:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-opening.yml
    with:
      script-text: ${{ needs.planning.outputs.script-opening }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-main:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-main.yml
    with:
      script-text: ${{ needs.planning.outputs.script-main }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-main-part2:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-main-part2.yml
    with:
      script-text: ${{ needs.planning.outputs.script-main-part2 }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-ending:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-ending.yml
    with:
      script-text: ${{ needs.planning.outputs.script-ending }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  voice-jingle:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-voice-generation-jingle.yml
    with:
      script-text: ${{ needs.planning.outputs.script-jingle }}
      voice-config: ${{ needs.planning.outputs.voice-config }}
    secrets: inherit

  bgm-opening:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-bgm-generation-opening.yml
    secrets: inherit

  bgm-main:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-bgm-generation-main.yml
    secrets: inherit

  bgm-main-part2:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-bgm-generation-main-part2.yml
    secrets: inherit

  bgm-ending:
    needs: planning
    if: needs.planning.result == 'success'
    uses: ./.github/workflows/module-bgm-generation-ending.yml
    secrets: inherit

  bgm-jingle:
    needs: planning
    uses: ./.github/workflows/module-bgm-generation-jingle.yml
    secrets: inherit

  audio-mixing-opening:
    needs: [voice-opening, bgm-opening]
    if: success()  # オープニング音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-opening.yml
    with:
      voice-opening: ${{ needs.voice-opening.outputs.audio-file }}
      bgm-opening: ${{ needs.bgm-opening.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-main:
    needs: [voice-main, bgm-main]
    if: success()  # メイン前半音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-main.yml
    with:
      voice-main: ${{ needs.voice-main.outputs.audio-file }}
      bgm-main: ${{ needs.bgm-main.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-main-part2:
    needs: [voice-main-part2, bgm-main-part2]
    if: success()  # メイン後半音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-main-part2.yml
    with:
      voice-main-part2: ${{ needs.voice-main-part2.outputs.audio-file }}
      bgm-main-part2: ${{ needs.bgm-main-part2.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-ending:
    needs: [voice-ending, bgm-ending]
    if: success()  # エンディング音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-ending.yml
    with:
      voice-ending: ${{ needs.voice-ending.outputs.audio-file }}
      bgm-ending: ${{ needs.bgm-ending.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-jingle:
    needs: [voice-jingle, bgm-jingle]
    if: success()  # ジングル音声・BGM生成が成功した場合のみミキシング実行
    uses: ./.github/workflows/module-audio-mixing-jingle.yml
    with:
      voice-jingle: ${{ needs.voice-jingle.outputs.audio-file }}
      bgm-jingle: ${{ needs.bgm-jingle.outputs.bgm-file }}
    secrets: inherit

  audio-mixing-final:
    needs: [audio-mixing-opening, audio-mixing-main, audio-mixing-main-part2, audio-mixing-jingle, audio-mixing-ending]
    if: success()  # 全てのセクション音声ミキシングが成功した場合のみ最終結合実行
    uses: ./.github/workflows/module-audio-mixing-final.yml
    with:
      opening-audio: ${{ needs.audio-mixing-opening.outputs.mixed-audio }}
      main-audio: ${{ needs.audio-mixing-main.outputs.mixed-audio }}
      main-part2-audio: ${{ needs.audio-mixing-main-part2.outputs.mixed-audio }}
      jingle-audio: ${{ needs.audio-mixing-jingle.outputs.mixed-audio }}
      ending-audio: ${{ needs.audio-mixing-ending.outputs.mixed-audio }}
    secrets: inherit

  publish:
    needs: audio-mixing-final
    if: false  # リリース無効化
    runs-on: ubuntu-latest
    steps:
      - name: Download final audio artifact
        uses: actions/download-artifact@v4
        with:
          name: final-audio
          path: release-files
      
      - name: List release files
        run: |
          echo "::group::📁 リリースファイル"
          ls -la release-files/
          echo "::endgroup::"
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: radio-${{ github.run_id }}
          name: 神威日報ラジオ - ${{ steps.date.outputs.date }}
          body: |
            ## 🎙️ 神威日報ラジオ
            
            ### 番組情報
            - 放送日: ${{ steps.date.outputs.date }}
            - 時間: 240秒（4分）
            - MC: AI生成（20代女性）
            
            ### 内容
            神威アプリの最新開発情報をお届けします。
            
            **開発進捗**: ${{ inputs.development-report }}
            
            🎵 Generated with [Claude Code](https://claude.ai/code)
          files: |
            release-files/final-radio.mp3
            release-files/metadata.json

  create-pr:
    needs: [planning, audio-mixing-final]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download final audio artifact
        uses: actions/download-artifact@v4
        with:
          name: final-audio
          path: radio-output
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Create feature branch
        run: |
          BRANCH_NAME="radio/daily-radio-${{ steps.date.outputs.date }}-${{ github.run_id }}"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        id: branch
      
      - name: Commit generated files
        run: |
          # 生成されたファイルをradio-outputディレクトリに配置
          mkdir -p radio-output
          
          # Gitに追加
          git add radio-output/
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git commit -m "$(cat <<'EOF'
          神威日報ラジオ生成 - ${{ steps.date.outputs.date }}
          
          - 音声ファイル: final-radio.mp3 (240秒、-23 LUFS)
          - メタデータ: metadata.json
          - 開発進捗: ${{ inputs.development-report }}
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF
          )"
      
      - name: Push branch
        run: |
          git push origin "${{ steps.branch.outputs.branch_name }}"
      
      - name: Create Pull Request
        run: |
          # 台本の内容を取得してSSMLタグを除去
          OPENING_TEXT=$(echo "${{ needs.planning.outputs.script-opening }}" | sed 's/<[^>]*>//g' | sed 's/^ *//' | sed 's/ *$//')
          MAIN_TEXT=$(echo "${{ needs.planning.outputs.script-main }}" | sed 's/<[^>]*>//g' | sed 's/^ *//' | sed 's/ *$//')
          MAIN_PART2_TEXT=$(echo "${{ needs.planning.outputs.script-main-part2 }}" | sed 's/<[^>]*>//g' | sed 's/^ *//' | sed 's/ *$//')
          JINGLE_TEXT=$(echo "${{ needs.planning.outputs.script-jingle }}" | sed 's/<[^>]*>//g' | sed 's/^ *//' | sed 's/ *$//')
          ENDING_TEXT=$(echo "${{ needs.planning.outputs.script-ending }}" | sed 's/<[^>]*>//g' | sed 's/^ *//' | sed 's/ *$//')
          
          # 文字数計算（日本語対応）
          OPENING_COUNT=$(echo "$OPENING_TEXT" | wc -m)
          MAIN_COUNT=$(echo "$MAIN_TEXT" | wc -m)
          MAIN_PART2_COUNT=$(echo "$MAIN_PART2_TEXT" | wc -m)
          JINGLE_COUNT=$(echo "$JINGLE_TEXT" | wc -m)
          ENDING_COUNT=$(echo "$ENDING_TEXT" | wc -m)
          TOTAL_COUNT=$((OPENING_COUNT + MAIN_COUNT + MAIN_PART2_COUNT + JINGLE_COUNT + ENDING_COUNT))
          
          # 音声IDとアーティファクトから楽曲情報を取得
          VOICE_ID="不明"
          SELECTED_MUSIC="不明"
          ARTIST_NAME="不明"
          SONG_NAME="不明"
          if [ -f "radio-output/USE_UUID.md" ]; then
            VOICE_ID=$(grep "Voice UUID:" radio-output/USE_UUID.md | cut -d' ' -f3 2>/dev/null || echo "不明")
            SELECTED_MUSIC_FILE=$(grep "Selected Music File:" radio-output/USE_UUID.md | cut -d' ' -f4- 2>/dev/null || echo "不明")
            ARTIST_NAME=$(grep "Artist:" radio-output/USE_UUID.md | cut -d' ' -f2- 2>/dev/null || echo "不明")
            SONG_NAME=$(grep "Song:" radio-output/USE_UUID.md | cut -d' ' -f2- 2>/dev/null || echo "不明")
            
            # 曲名情報を整理（アーティスト名と楽曲名が取得できた場合）
            if [ "$ARTIST_NAME" != "不明" ] && [ "$SONG_NAME" != "不明" ]; then
              SELECTED_MUSIC="${ARTIST_NAME} - ${SONG_NAME}"
            elif [ "$SONG_NAME" != "不明" ]; then
              SELECTED_MUSIC="${SONG_NAME}"
            else
              SELECTED_MUSIC="$SELECTED_MUSIC_FILE"
            fi
          fi
          
          # PRボディを直接作成
          gh pr create \
            --title "🎙️ 神威日報ラジオ - ${{ steps.date.outputs.date }}" \
            --body "## 🎙️ 神威日報ラジオ生成完了

          ### 📊 番組情報
          - **放送日**: ${{ steps.date.outputs.date }}
          - **時間**: 240秒（4分）
          - **音声品質**: -23 LUFS (放送基準)
          - **MC**: AI生成（20代女性）
          - **使用音声ID**: ${VOICE_ID}
          - **使用楽曲**: ${SELECTED_MUSIC}

          ### 📝 生成された台本（合計文字数: ${TOTAL_COUNT}文字）

          #### オープニング（${OPENING_COUNT}文字）
          ${OPENING_TEXT}

          #### メイン前半（${MAIN_COUNT}文字）
          ${MAIN_TEXT}

          #### ジングル（${JINGLE_COUNT}文字）
          ${JINGLE_TEXT}

          #### メイン後半（${MAIN_PART2_COUNT}文字）
          ${MAIN_PART2_TEXT}

          #### エンディング（${ENDING_COUNT}文字）
          ${ENDING_TEXT}

          ### 📁 生成ファイル
          - \`radio-output/final-radio.mp3\` - 完成したラジオ番組音声
          - \`radio-output/metadata.json\` - 番組メタデータ

          ### 🔗 関連リンク
          - [リリース](https://github.com/${{ github.repository }}/releases/tag/radio-${{ github.run_id }})
          - [ワークフロー実行](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### ✅ テストプラン
          - [ ] 音声ファイルの再生確認
          - [ ] 音声品質の確認 (-23 LUFS)
          - [ ] メタデータの内容確認
          - [ ] 台本の内容確認

          🤖 Generated with [Claude Code](https://claude.ai/code)"
        env:
          GH_TOKEN: ${{ github.token }}

  summary:
    needs: [planning, voice-opening, voice-main, voice-main-part2, voice-ending, voice-jingle, bgm-opening, bgm-main, bgm-main-part2, bgm-ending, bgm-jingle, audio-mixing-final, create-pr]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate workflow summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎙️ ラジオ番組制作結果
          
          | ステップ | 状態 | 結果 |
          |---------|------|-----|
          | 台本生成 | ${{ needs.planning.result }} | ${{ needs.planning.result == 'success' && '✅' || '❌' }} |
          | 音声生成(開始) | ${{ needs.voice-opening.result }} | ${{ needs.voice-opening.result == 'success' && '✅' || needs.voice-opening.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(前半) | ${{ needs.voice-main.result }} | ${{ needs.voice-main.result == 'success' && '✅' || needs.voice-main.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(後半) | ${{ needs.voice-main-part2.result }} | ${{ needs.voice-main-part2.result == 'success' && '✅' || needs.voice-main-part2.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(終了) | ${{ needs.voice-ending.result }} | ${{ needs.voice-ending.result == 'success' && '✅' || needs.voice-ending.result == 'failure' && '❌' || '⚠️' }} |
          | 音声生成(ジングル) | ${{ needs.voice-jingle.result }} | ${{ needs.voice-jingle.result == 'success' && '✅' || needs.voice-jingle.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(開始) | ${{ needs.bgm-opening.result }} | ${{ needs.bgm-opening.result == 'success' && '✅' || needs.bgm-opening.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(前半) | ${{ needs.bgm-main.result }} | ${{ needs.bgm-main.result == 'success' && '✅' || needs.bgm-main.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(後半) | ${{ needs.bgm-main-part2.result }} | ${{ needs.bgm-main-part2.result == 'success' && '✅' || needs.bgm-main-part2.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(終了) | ${{ needs.bgm-ending.result }} | ${{ needs.bgm-ending.result == 'success' && '✅' || needs.bgm-ending.result == 'failure' && '❌' || '⚠️' }} |
          | BGM生成(ジングル) | ${{ needs.bgm-jingle.result }} | ${{ needs.bgm-jingle.result == 'success' && '✅' || needs.bgm-jingle.result == 'failure' && '❌' || '⚠️' }} |
          | 音声合成 | ${{ needs.audio-mixing-final.result }} | ${{ needs.audio-mixing-final.result == 'success' && '✅' || '❌' }} |
          | リリース作成 | ${{ needs.publish.result }} | ${{ needs.publish.result == 'success' && '✅' || '❌' }} |
          
          ### 📊 統計情報
          - ワークフロー実行ID: ${{ github.run_id }}
          - 音声品質: -23 LUFS (放送基準)
          - 並列処理: 6つのモジュールを同時実行
          EOF

  line-notification:
    needs: [api-check, input-processing, planning, voice-opening, voice-main, voice-main-part2, voice-ending, voice-jingle, bgm-opening, bgm-main, bgm-main-part2, bgm-ending, bgm-jingle, audio-mixing-final, create-pr, summary]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send LINE notification
        env:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        run: |
          COMPLETION_TIME=$(date "+%Y/%m/%d %H:%M:%S")
          STATUS_EMOJI="✅"
          STATUS_TEXT="完了"
          
          # 全体の成功判定
          if [[ "${{ needs.api-check.result }}" != "success" ]] || \
             [[ "${{ needs.planning.result }}" != "success" ]] || \
             [[ "${{ needs.voice-opening.result }}" != "success" ]] || \
             [[ "${{ needs.voice-main.result }}" != "success" ]] || \
             [[ "${{ needs.voice-main-part2.result }}" != "success" ]] || \
             [[ "${{ needs.voice-ending.result }}" != "success" ]] || \
             [[ "${{ needs.voice-jingle.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-opening.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-main.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-main-part2.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-ending.result }}" != "success" ]] || \
             [[ "${{ needs.bgm-jingle.result }}" != "success" ]] || \
             [[ "${{ needs.audio-mixing-final.result }}" != "success" ]] || \
             [[ "${{ needs.create-pr.result }}" != "success" ]]; then
            STATUS_EMOJI="❌"
            STATUS_TEXT="失敗"
          fi
          
          # 個別ステータス変数の準備
          API_STATUS="${{ needs.api-check.result == 'success' && '✅' || '❌ 認証失敗' }}"
          PLANNING_STATUS="${{ needs.planning.result == 'success' && '✅' || '❌ Claude API異常' }}"
          VOICE_OPENING_STATUS="${{ needs.voice-opening.result == 'success' && '✅' || '❌ AIVIS API失敗' }}"
          VOICE_MAIN_STATUS="${{ needs.voice-main.result == 'success' && '✅' || '❌ AIVIS API失敗' }}"
          VOICE_MAIN_PART2_STATUS="${{ needs.voice-main-part2.result == 'success' && '✅' || '❌ AIVIS API失敗' }}"
          VOICE_ENDING_STATUS="${{ needs.voice-ending.result == 'success' && '✅' || '❌ AIVIS API失敗' }}"
          VOICE_JINGLE_STATUS="${{ needs.voice-jingle.result == 'success' && '✅' || '❌ AIVIS API失敗' }}"
          BGM_OPENING_STATUS="${{ needs.bgm-opening.result == 'success' && '✅' || '❌ Google Lyria失敗' }}"
          BGM_MAIN_STATUS="${{ needs.bgm-main.result == 'success' && '✅' || '❌ Google Lyria失敗' }}"
          BGM_MAIN_PART2_STATUS="${{ needs.bgm-main-part2.result == 'success' && '✅' || '❌ Google Lyria失敗' }}"
          BGM_ENDING_STATUS="${{ needs.bgm-ending.result == 'success' && '✅' || '❌ Google Lyria失敗' }}"
          BGM_JINGLE_STATUS="${{ needs.bgm-jingle.result == 'success' && '✅' || '❌ ジングルSE選択失敗' }}"
          MIXING_STATUS="${{ needs.audio-mixing-final.result == 'success' && '✅' || '❌ FFmpeg失敗' }}"
          PR_STATUS="${{ needs.create-pr.result == 'success' && '✅' || '❌ GitHub API失敗' }}"
          
          # エラー詳細情報の構築
          ERROR_DETAILS=""
          if [[ "${{ needs.api-check.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 API接続エラー: AIVIS Cloud API認証失敗"
          fi
          if [[ "${{ needs.planning.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 台本生成エラー: Claude API応答異常"
          fi
          if [[ "${{ needs.voice-opening.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 オープニング音声生成エラー: AIVIS API失敗"
          fi
          if [[ "${{ needs.voice-main.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 メイン前半音声生成エラー: AIVIS API失敗"
          fi
          if [[ "${{ needs.voice-main-part2.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 メイン後半音声生成エラー: AIVIS API失敗"
          fi
          if [[ "${{ needs.voice-ending.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 エンディング音声生成エラー: AIVIS API失敗"
          fi
          if [[ "${{ needs.voice-jingle.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 ジングル音声生成エラー: AIVIS API失敗"
          fi
          if [[ "${{ needs.bgm-opening.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 オープニングBGM生成エラー: Google Lyria API失敗"
          fi
          if [[ "${{ needs.bgm-main.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 メイン前半BGM生成エラー: Google Lyria API失敗"
          fi
          if [[ "${{ needs.bgm-main-part2.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 メイン後半BGM生成エラー: Google Lyria API失敗"
          fi
          if [[ "${{ needs.bgm-ending.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 エンディングBGM生成エラー: Google Lyria API失敗"
          fi
          if [[ "${{ needs.bgm-jingle.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 ジングルBGM選択エラー: ファイル処理失敗"
          fi
          if [[ "${{ needs.audio-mixing-final.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 音声ミキシングエラー: FFmpeg処理失敗"
          fi
          if [[ "${{ needs.create-pr.result }}" != "success" ]]; then
            ERROR_DETAILS="${ERROR_DETAILS}\n🚫 プルリク作成エラー: GitHub API失敗"
          fi
          
          # LINE APIが設定されているか確認
          if [ -z "$LINE_CHANNEL_ACCESS_TOKEN" ] || [ -z "$LINE_USER_ID" ]; then
            echo "::warning::LINE通知設定がありません。スキップします。"
            echo "LINE_CHANNEL_ACCESS_TOKEN または LINE_USER_ID が設定されていません"
            exit 0
          fi
          
          curl -X POST https://api.line.me/v2/bot/message/push \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${LINE_CHANNEL_ACCESS_TOKEN}" \
            -d "{
              \"to\": \"${LINE_USER_ID}\",
              \"messages\": [
                {
                  \"type\": \"text\",
                  \"text\": \"${STATUS_EMOJI} 神威日報ラジオ制作${STATUS_TEXT}！\n\n📻 ワークフロー実行結果をお知らせします。\n⏰ 完成時刻: ${COMPLETION_TIME}\n\n🔍 API状況:\n・AIVIS Cloud API: ${API_STATUS}\n\n📊 制作結果:\n・台本生成: ${PLANNING_STATUS}\n・音声生成(開始): ${VOICE_OPENING_STATUS}\n・音声生成(前半): ${VOICE_MAIN_STATUS}\n・音声生成(後半): ${VOICE_MAIN_PART2_STATUS}\n・音声生成(終了): ${VOICE_ENDING_STATUS}\n・音声生成(ジングル): ${VOICE_JINGLE_STATUS}\n・BGM生成(開始): ${BGM_OPENING_STATUS}\n・BGM生成(前半): ${BGM_MAIN_STATUS}\n・BGM生成(後半): ${BGM_MAIN_PART2_STATUS}\n・BGM生成(終了): ${BGM_ENDING_STATUS}\n・BGM生成(ジングル): ${BGM_JINGLE_STATUS}\n・音声ミキシング: ${MIXING_STATUS}\n・プルリク作成: ${PR_STATUS}\n\n📋 ワークフロー実行ID: ${{ github.run_id }}${ERROR_DETAILS}\"
                }
              ]
            }"